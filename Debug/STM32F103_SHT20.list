
STM32F103_SHT20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007370  08007370  00017370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007670  08007670  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007670  08007670  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200001dc  08007854  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08007854  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a001  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfc  00000000  00000000  0002a206  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0002bf08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017bf0  00000000  00000000  0002d148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096a3  00000000  00000000  00044d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000849b0  00000000  00000000  0004e3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003344  00000000  00000000  000d2e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007354 	.word	0x08007354

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007354 	.word	0x08007354

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_CRC_Init+0x20>)
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <MX_CRC_Init+0x24>)
 800102c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_CRC_Init+0x20>)
 8001030:	f000 fcd7 	bl	80019e2 <HAL_CRC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800103a:	f000 f95e 	bl	80012fa <Error_Handler>
  }

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000204 	.word	0x20000204
 8001048:	40023000 	.word	0x40023000

0800104c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_CRC_MspInit+0x34>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10b      	bne.n	8001076 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_CRC_MspInit+0x38>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_CRC_MspInit+0x38>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_CRC_MspInit+0x38>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40023000 	.word	0x40023000
 8001084:	40021000 	.word	0x40021000

08001088 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_GPIO_Init+0x58>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_GPIO_Init+0x58>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_GPIO_Init+0x58>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C1_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C1_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C1_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C1_Init+0x50>)
 8001122:	f000 fe07 	bl	8001d34 <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f8e5 	bl	80012fa <Error_Handler>
  }

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000020c 	.word	0x2000020c
 8001138:	40005400 	.word	0x40005400
 800113c:	000186a0 	.word	0x000186a0

08001140 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_I2C_MspInit+0x90>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d132      	bne.n	80011c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117e:	2312      	movs	r3, #18
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <HAL_I2C_MspInit+0x98>)
 800118e:	f000 fc77 	bl	8001a80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_I2C_MspInit+0x9c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <HAL_I2C_MspInit+0x9c>)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_I2C_MspInit+0x94>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40010000 	.word	0x40010000

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b08f      	sub	sp, #60	; 0x3c
 80011e4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
char buf[40] = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2228      	movs	r2, #40	; 0x28
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fb6b 	bl	80038c8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 fa8f 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f83b 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f7ff ff45 	bl	8001088 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fe:	f000 f9ef 	bl	80015e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001202:	f7ff ff6f 	bl	80010e4 <MX_I2C1_Init>
  MX_CRC_Init();
 8001206:	f7ff ff0d 	bl	8001024 <MX_CRC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	SHT20_get();
 800120a:	f000 f943 	bl	8001494 <SHT20_get>
	sprintf(buf, "%d.... Tem = %.2f, Hum = %.2f\r\n", sht20_data.crc[0], sht20_data.temp, sht20_data.humidity);
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0x84>)
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	461e      	mov	r6, r3
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <main+0x84>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f905 	bl	8000428 <__aeabi_f2d>
 800121e:	4604      	mov	r4, r0
 8001220:	460d      	mov	r5, r1
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <main+0x84>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f8fe 	bl	8000428 <__aeabi_f2d>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4638      	mov	r0, r7
 8001232:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001236:	e9cd 4500 	strd	r4, r5, [sp]
 800123a:	4632      	mov	r2, r6
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <main+0x88>)
 800123e:	f003 f97f 	bl	8004540 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 10);
 8001242:	463b      	mov	r3, r7
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ff83 	bl	8000150 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	4639      	mov	r1, r7
 8001250:	230a      	movs	r3, #10
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <main+0x8c>)
 8001254:	f002 f9a3 	bl	800359e <HAL_UART_Transmit>

	HAL_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 fabc 	bl	80017d8 <HAL_Delay>
	SHT20_get();
 8001260:	e7d3      	b.n	800120a <main+0x2a>
 8001262:	bf00      	nop
 8001264:	20000260 	.word	0x20000260
 8001268:	08007370 	.word	0x08007370
 800126c:	2000026c 	.word	0x2000026c

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2228      	movs	r2, #40	; 0x28
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fb22 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001296:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fd07 	bl	8002ccc <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012c4:	f000 f819 	bl	80012fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 ff72 	bl	80031cc <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ee:	f000 f804 	bl	80012fa <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3740      	adds	r7, #64	; 0x40
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x6>
 8001302:	0000      	movs	r0, r0
 8001304:	0000      	movs	r0, r0
	...

08001308 <SHT20_calc_temp>:
#include "i2c.h"
#include "crc.h"


float static SHT20_calc_temp(uint16_t raw_temp)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
	float temperature = -46.85 + 175.72 * ((float)raw_temp / 65536);
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fcdd 	bl	8000cd4 <__aeabi_ui2f>
 800131a:	4603      	mov	r3, r0
 800131c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fde3 	bl	8000eec <__aeabi_fdiv>
 8001326:	4603      	mov	r3, r0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f87d 	bl	8000428 <__aeabi_f2d>
 800132e:	a30e      	add	r3, pc, #56	; (adr r3, 8001368 <SHT20_calc_temp+0x60>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f8d0 	bl	80004d8 <__aeabi_dmul>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	4618      	mov	r0, r3
 800133e:	4621      	mov	r1, r4
 8001340:	a30b      	add	r3, pc, #44	; (adr r3, 8001370 <SHT20_calc_temp+0x68>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7fe ff0f 	bl	8000168 <__aeabi_dsub>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	4618      	mov	r0, r3
 8001350:	4621      	mov	r1, r4
 8001352:	f7ff fbb9 	bl	8000ac8 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	60fb      	str	r3, [r7, #12]
	return temperature;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	f3af 8000 	nop.w
 8001368:	3d70a3d7 	.word	0x3d70a3d7
 800136c:	4065f70a 	.word	0x4065f70a
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	40476ccc 	.word	0x40476ccc

08001378 <SHT20_calc_humidity>:



float static SHT20_calc_humidity(uint16_t raw_temp)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	float humidity = -6 + 125 * ((float)raw_temp / 65536);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fca5 	bl	8000cd4 <__aeabi_ui2f>
 800138a:	4603      	mov	r3, r0
 800138c:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fdab 	bl	8000eec <__aeabi_fdiv>
 8001396:	4603      	mov	r3, r0
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <SHT20_calc_humidity+0x40>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fcf2 	bl	8000d84 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4906      	ldr	r1, [pc, #24]	; (80013bc <SHT20_calc_humidity+0x44>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fbe3 	bl	8000b70 <__aeabi_fsub>
 80013aa:	4603      	mov	r3, r0
 80013ac:	60fb      	str	r3, [r7, #12]
	return humidity;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	42fa0000 	.word	0x42fa0000
 80013bc:	40c00000 	.word	0x40c00000

080013c0 <SHT20_get_temp>:



float static SHT20_get_temp(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
	uint8_t temp[3] = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2100      	movs	r1, #0
 80013ca:	460a      	mov	r2, r1
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	460a      	mov	r2, r1
 80013d0:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(&hi2c1, SHT20_ADDR << 1, SHT20_Temp_HM, I2C_MEMADD_SIZE_8BIT, (void *)0, 0, 100);
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	22e3      	movs	r2, #227	; 0xe3
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	4812      	ldr	r0, [pc, #72]	; (8001430 <SHT20_get_temp+0x70>)
 80013e6:	f001 f837 	bl	8002458 <HAL_I2C_Mem_Write>

	HAL_I2C_Master_Receive(&hi2c1, SHT20_ADDR << 1, temp, 3, 100);
 80013ea:	1d3a      	adds	r2, r7, #4
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2303      	movs	r3, #3
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <SHT20_get_temp+0x70>)
 80013f6:	f000 fdd5 	bl	8001fa4 <HAL_I2C_Master_Receive>

	sht20_data.crc[0] = HAL_CRC_Calculate(&hcrc, (uint32_t *)temp[2], 1);
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <SHT20_get_temp+0x74>)
 8001402:	f000 fb0a 	bl	8001a1a <HAL_CRC_Calculate>
 8001406:	4603      	mov	r3, r0
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <SHT20_get_temp+0x78>)
 800140c:	721a      	strb	r2, [r3, #8]

	return SHT20_calc_temp(temp[0] << 8 | temp[1]);
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff72 	bl	8001308 <SHT20_calc_temp>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000020c 	.word	0x2000020c
 8001434:	20000204 	.word	0x20000204
 8001438:	20000260 	.word	0x20000260

0800143c <SHT20_get_humidity>:



float static SHT20_get_humidity(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af04      	add	r7, sp, #16
	uint8_t temp[2] = {0};
 8001442:	2300      	movs	r3, #0
 8001444:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, SHT20_ADDR << 1, SHT20_HUMIDITY_HM, I2C_MEMADD_SIZE_8BIT, (void *)0, 0, 100);
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2300      	movs	r3, #0
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	22e5      	movs	r2, #229	; 0xe5
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <SHT20_get_humidity+0x54>)
 800145a:	f000 fffd 	bl	8002458 <HAL_I2C_Mem_Write>

	HAL_I2C_Master_Receive(&hi2c1, SHT20_ADDR << 1, temp, 2, 100);
 800145e:	1d3a      	adds	r2, r7, #4
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2302      	movs	r3, #2
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <SHT20_get_humidity+0x54>)
 800146a:	f000 fd9b 	bl	8001fa4 <HAL_I2C_Master_Receive>

	return SHT20_calc_humidity(temp[0] << 8 | temp[1]);
 800146e:	793b      	ldrb	r3, [r7, #4]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff7a 	bl	8001378 <SHT20_calc_humidity>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000020c 	.word	0x2000020c

08001494 <SHT20_get>:



void SHT20_get(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	sht20_data.temp = SHT20_get_temp();
 8001498:	f7ff ff92 	bl	80013c0 <SHT20_get_temp>
 800149c:	4602      	mov	r2, r0
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SHT20_get+0x1c>)
 80014a0:	601a      	str	r2, [r3, #0]
	sht20_data.humidity = SHT20_get_humidity();
 80014a2:	f7ff ffcb 	bl	800143c <SHT20_get_humidity>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b01      	ldr	r3, [pc, #4]	; (80014b0 <SHT20_get+0x1c>)
 80014aa:	605a      	str	r2, [r3, #4]


}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000260 	.word	0x20000260

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_MspInit+0x5c>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_MspInit+0x5c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x5c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x5c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_MspInit+0x60>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_MspInit+0x60>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155e:	f000 f91f 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f002 f96c 	bl	8003874 <__errno>
 800159c:	4602      	mov	r2, r0
 800159e:	230c      	movs	r3, #12
 80015a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20005000 	.word	0x20005000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200001f8 	.word	0x200001f8
 80015d0:	200002b8 	.word	0x200002b8

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_USART2_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001618:	f001 ff74 	bl	8003504 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f7ff fe6a 	bl	80012fa <Error_Handler>
  }

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000026c 	.word	0x2000026c
 8001630:	40004400 	.word	0x40004400

08001634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d12f      	bne.n	80016b4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001684:	2304      	movs	r3, #4
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HAL_UART_MspInit+0x90>)
 8001698:	f000 f9f2 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800169c:	2308      	movs	r3, #8
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_UART_MspInit+0x90>)
 80016b0:	f000 f9e6 	bl	8001a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800

080016c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016ca:	e003      	b.n	80016d4 <LoopCopyDataInit>

080016cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016d2:	3104      	adds	r1, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016dc:	d3f6      	bcc.n	80016cc <CopyDataInit>
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016e0:	e002      	b.n	80016e8 <LoopFillZerobss>

080016e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016e4:	f842 3b04 	str.w	r3, [r2], #4

080016e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016ec:	d3f9      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ee:	f7ff ff71 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f002 f8c5 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f6:	f7ff fd73 	bl	80011e0 <main>
  bx lr
 80016fa:	4770      	bx	lr
  ldr r3, =_sidata
 80016fc:	08007678 	.word	0x08007678
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001704:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001708:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800170c:	200002b4 	.word	0x200002b4

08001710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC1_2_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_Init+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_Init+0x28>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f929 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fec0 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f933 	bl	80019ca <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177c:	f000 f909 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000000 	.word	0x20000000
 8001798:	20000008 	.word	0x20000008
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x1c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_IncTick+0x20>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_IncTick+0x20>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000008 	.word	0x20000008
 80017c0:	200002ac 	.word	0x200002ac

080017c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <HAL_GetTick+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	200002ac 	.word	0x200002ac

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_Delay+0x40>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffe0 	bl	80017c4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f7ff ff90 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff49 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb0 	bl	8001938 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00e      	b.n	8001a12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	795b      	ldrb	r3, [r3, #5]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fb21 	bl	800104c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3f0      	bcc.n	8001a46 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001a72:	693b      	ldr	r3, [r7, #16]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b08b      	sub	sp, #44	; 0x2c
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e127      	b.n	8001ce4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a94:	2201      	movs	r2, #1
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8116 	bne.w	8001cde <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d034      	beq.n	8001b24 <HAL_GPIO_Init+0xa4>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d80d      	bhi.n	8001ada <HAL_GPIO_Init+0x5a>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_GPIO_Init+0x9a>
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d804      	bhi.n	8001ad0 <HAL_GPIO_Init+0x50>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d031      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d01c      	beq.n	8001b08 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ace:	e048      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d043      	beq.n	8001b5c <HAL_GPIO_Init+0xdc>
 8001ad4:	2b11      	cmp	r3, #17
 8001ad6:	d01b      	beq.n	8001b10 <HAL_GPIO_Init+0x90>
          break;
 8001ad8:	e043      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ada:	4a89      	ldr	r2, [pc, #548]	; (8001d00 <HAL_GPIO_Init+0x280>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d026      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
 8001ae0:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_GPIO_Init+0x280>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d806      	bhi.n	8001af4 <HAL_GPIO_Init+0x74>
 8001ae6:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_GPIO_Init+0x284>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d020      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
 8001aec:	4a86      	ldr	r2, [pc, #536]	; (8001d08 <HAL_GPIO_Init+0x288>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01d      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
          break;
 8001af2:	e036      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af4:	4a85      	ldr	r2, [pc, #532]	; (8001d0c <HAL_GPIO_Init+0x28c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
 8001afa:	4a85      	ldr	r2, [pc, #532]	; (8001d10 <HAL_GPIO_Init+0x290>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d016      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
 8001b00:	4a84      	ldr	r2, [pc, #528]	; (8001d14 <HAL_GPIO_Init+0x294>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0xae>
          break;
 8001b06:	e02c      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e028      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	3304      	adds	r3, #4
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e023      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	3308      	adds	r3, #8
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e01e      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	330c      	adds	r3, #12
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e019      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b36:	2304      	movs	r3, #4
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e012      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b44:	2308      	movs	r3, #8
 8001b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	611a      	str	r2, [r3, #16]
          break;
 8001b4e:	e008      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	615a      	str	r2, [r3, #20]
          break;
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d801      	bhi.n	8001b6c <HAL_GPIO_Init+0xec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	e001      	b.n	8001b70 <HAL_GPIO_Init+0xf0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	d802      	bhi.n	8001b7e <HAL_GPIO_Init+0xfe>
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x104>
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	3b08      	subs	r3, #8
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	6a39      	ldr	r1, [r7, #32]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8096 	beq.w	8001cde <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb2:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_GPIO_Init+0x298>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x298>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b56      	ldr	r3, [pc, #344]	; (8001d18 <HAL_GPIO_Init+0x298>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bca:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x29c>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <HAL_GPIO_Init+0x2a0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x19e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4a      	ldr	r2, [pc, #296]	; (8001d24 <HAL_GPIO_Init+0x2a4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x19a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2a8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x196>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x192>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x1a0>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x1a0>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x1a0>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x1a0>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c30:	493a      	ldr	r1, [pc, #232]	; (8001d1c <HAL_GPIO_Init+0x29c>)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4938      	ldr	r1, [pc, #224]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4933      	ldr	r1, [pc, #204]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	492e      	ldr	r1, [pc, #184]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
 8001c7e:	e006      	b.n	8001c8e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4929      	ldr	r1, [pc, #164]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	4924      	ldr	r1, [pc, #144]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	491f      	ldr	r1, [pc, #124]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	491a      	ldr	r1, [pc, #104]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	4915      	ldr	r1, [pc, #84]	; (8001d30 <HAL_GPIO_Init+0x2b0>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f aed0 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	372c      	adds	r7, #44	; 0x2c
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	10210000 	.word	0x10210000
 8001d04:	10110000 	.word	0x10110000
 8001d08:	10120000 	.word	0x10120000
 8001d0c:	10310000 	.word	0x10310000
 8001d10:	10320000 	.word	0x10320000
 8001d14:	10220000 	.word	0x10220000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40011400 	.word	0x40011400
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e11f      	b.n	8001f86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff f9f0 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d98:	f001 fb6e 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_I2C_Init+0x25c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d807      	bhi.n	8001db8 <HAL_I2C_Init+0x84>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_I2C_Init+0x260>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e006      	b.n	8001dc6 <HAL_I2C_Init+0x92>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <HAL_I2C_Init+0x264>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0db      	b.n	8001f86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a72      	ldr	r2, [pc, #456]	; (8001f9c <HAL_I2C_Init+0x268>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a64      	ldr	r2, [pc, #400]	; (8001f90 <HAL_I2C_Init+0x25c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d802      	bhi.n	8001e08 <HAL_I2C_Init+0xd4>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3301      	adds	r3, #1
 8001e06:	e009      	b.n	8001e1c <HAL_I2C_Init+0xe8>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	4a63      	ldr	r2, [pc, #396]	; (8001fa0 <HAL_I2C_Init+0x26c>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4956      	ldr	r1, [pc, #344]	; (8001f90 <HAL_I2C_Init+0x25c>)
 8001e38:	428b      	cmp	r3, r1
 8001e3a:	d80d      	bhi.n	8001e58 <HAL_I2C_Init+0x124>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e59      	subs	r1, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	bf38      	it	cc
 8001e54:	2304      	movcc	r3, #4
 8001e56:	e04f      	b.n	8001ef8 <HAL_I2C_Init+0x1c4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <HAL_I2C_Init+0x150>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e012      	b.n	8001eaa <HAL_I2C_Init+0x176>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	0099      	lsls	r1, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x17e>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e022      	b.n	8001ef8 <HAL_I2C_Init+0x1c4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_I2C_Init+0x1a4>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e58      	subs	r0, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	440b      	add	r3, r1
 8001ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	e00f      	b.n	8001ef8 <HAL_I2C_Init+0x1c4>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e58      	subs	r0, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	0099      	lsls	r1, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	6809      	ldr	r1, [r1, #0]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6911      	ldr	r1, [r2, #16]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	000186a0 	.word	0x000186a0
 8001f94:	001e847f 	.word	0x001e847f
 8001f98:	003d08ff 	.word	0x003d08ff
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fc02 	bl	80017c4 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 8238 	bne.w	8002440 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2319      	movs	r3, #25
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	497e      	ldr	r1, [pc, #504]	; (80021d4 <HAL_I2C_Master_Receive+0x230>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fc9a 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e22b      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2C_Master_Receive+0x54>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e224      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d007      	beq.n	800201e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2222      	movs	r2, #34	; 0x22
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2210      	movs	r2, #16
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	893a      	ldrh	r2, [r7, #8]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a5e      	ldr	r2, [pc, #376]	; (80021d8 <HAL_I2C_Master_Receive+0x234>)
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 faf0 	bl	800264c <I2C_MasterRequestRead>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1e5      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e1b9      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d11d      	bne.n	80020ea <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020e6:	b662      	cpsie	i
 80020e8:	e197      	b.n	800241a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11d      	bne.n	800212e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002102:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800212a:	b662      	cpsie	i
 800212c:	e175      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002154:	e161      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b03      	cmp	r3, #3
 800215c:	f200 811a 	bhi.w	8002394 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b01      	cmp	r3, #1
 8002166:	d123      	bne.n	80021b0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 fd29 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e162      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021ae:	e134      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d150      	bne.n	800225a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	2200      	movs	r2, #0
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <HAL_I2C_Master_Receive+0x238>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fba6 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e137      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000
 80021dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002258:	e0df      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	2200      	movs	r2, #0
 8002262:	497a      	ldr	r1, [pc, #488]	; (800244c <HAL_I2C_Master_Receive+0x4a8>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb55 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0e6      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022b8:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_I2C_Master_Receive+0x4ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_I2C_Master_Receive+0x4b0>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	0a1a      	lsrs	r2, r3, #8
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d117      	bne.n	800230e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002300:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e099      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d1da      	bne.n	80022d2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002392:	e042      	b.n	800241a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fc13 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e04c      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d118      	bne.n	800241a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae99 	bne.w	8002156 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	00010004 	.word	0x00010004
 8002450:	20000000 	.word	0x20000000
 8002454:	14f8b589 	.word	0x14f8b589

08002458 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002472:	f7ff f9a7 	bl	80017c4 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	f040 80d9 	bne.w	8002638 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2319      	movs	r3, #25
 800248c:	2201      	movs	r2, #1
 800248e:	496d      	ldr	r1, [pc, #436]	; (8002644 <HAL_I2C_Mem_Write+0x1ec>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fa3f 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
 800249e:	e0cc      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_I2C_Mem_Write+0x56>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0c5      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d007      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2221      	movs	r2, #33	; 0x21
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a4d      	ldr	r2, [pc, #308]	; (8002648 <HAL_I2C_Mem_Write+0x1f0>)
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002516:	88f8      	ldrh	r0, [r7, #6]
 8002518:	893a      	ldrh	r2, [r7, #8]
 800251a:	8979      	ldrh	r1, [r7, #10]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f95e 	bl	80027e8 <I2C_RequestMemoryWrite>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d052      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e081      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fac0 	bl	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d107      	bne.n	800255e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d11b      	bne.n	80025d8 <HAL_I2C_Mem_Write+0x180>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d017      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1aa      	bne.n	8002536 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 faac 	bl	8002b42 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d107      	bne.n	8002608 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e016      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	00100002 	.word	0x00100002
 8002648:	ffff0000 	.word	0xffff0000

0800264c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	460b      	mov	r3, r1
 800265a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d006      	beq.n	8002686 <I2C_MasterRequestRead+0x3a>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d003      	beq.n	8002686 <I2C_MasterRequestRead+0x3a>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e00b      	b.n	80026b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	2b11      	cmp	r3, #17
 800269e:	d107      	bne.n	80026b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f929 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d6:	d103      	bne.n	80026e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e079      	b.n	80027d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ec:	d108      	bne.n	8002700 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e05f      	b.n	80027c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	11db      	asrs	r3, r3, #7
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0306 	and.w	r3, r3, #6
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f063 030f 	orn	r3, r3, #15
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4930      	ldr	r1, [pc, #192]	; (80027e0 <I2C_MasterRequestRead+0x194>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f94f 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e054      	b.n	80027d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4929      	ldr	r1, [pc, #164]	; (80027e4 <I2C_MasterRequestRead+0x198>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f93f 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e044      	b.n	80027d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002772:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f8c7 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279a:	d103      	bne.n	80027a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e017      	b.n	80027d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027a8:	897b      	ldrh	r3, [r7, #10]
 80027aa:	11db      	asrs	r3, r3, #7
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f063 030e 	orn	r3, r3, #14
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4907      	ldr	r1, [pc, #28]	; (80027e4 <I2C_MasterRequestRead+0x198>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8fb 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	00010008 	.word	0x00010008
 80027e4:	00010002 	.word	0x00010002

080027e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2200      	movs	r2, #0
 800281a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f878 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d103      	bne.n	8002842 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e05f      	b.n	8002906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	492d      	ldr	r1, [pc, #180]	; (8002910 <I2C_RequestMemoryWrite+0x128>)
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f8b0 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e04c      	b.n	8002906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f91a 	bl	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b04      	cmp	r3, #4
 8002898:	d107      	bne.n	80028aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02b      	b.n	8002906 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	e021      	b.n	8002904 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f8f4 	bl	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d107      	bne.n	80028f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e005      	b.n	8002906 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fa:	893b      	ldrh	r3, [r7, #8]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	00010002 	.word	0x00010002

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e025      	b.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292c:	d021      	beq.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe ff49 	bl	80017c4 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d116      	bne.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e023      	b.n	80029ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10d      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	e00c      	b.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d0b6      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d0:	e051      	b.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d123      	bne.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e046      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d021      	beq.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe fec7 	bl	80017c4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d116      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e020      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e00b      	b.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d18d      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002acc:	e02d      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8ce 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02d      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae4:	d021      	beq.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe fe6d 	bl	80017c4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e007      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d1ca      	bne.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4e:	e02d      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f88d 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02d      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b66:	d021      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fe2c 	bl	80017c4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1ca      	bne.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd0:	e042      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d119      	bne.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e029      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe fdd6 	bl	80017c4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d1b5      	bne.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d11b      	bne.n	8002cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e26c      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8087 	beq.w	8002dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cec:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d00c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d112      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
 8002d04:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x12c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d168      	bne.n	8002df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e246      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x76>
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7f      	ldr	r2, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e02e      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7a      	ldr	r2, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0xbc>
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d88:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fd0c 	bl	80017c4 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fd08 	bl	80017c4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1fa      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe4>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fcf8 	bl	80017c4 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fcf4 	bl	80017c4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1e6      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x10c>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1ba      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4939      	ldr	r1, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fcad 	bl	80017c4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fca9 	bl	80017c4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e19b      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fc8c 	bl	80017c4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fc88 	bl	80017c4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e17a      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03a      	beq.n	8002f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fc6c 	bl	80017c4 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fc68 	bl	80017c4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e15a      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f000 fada 	bl	80034c8 <RCC_Delay>
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fc52 	bl	80017c4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe fc4e 	bl	80017c4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e140      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	42420000 	.word	0x42420000
 8002f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b9e      	ldr	r3, [pc, #632]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e9      	bne.n	8002f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a6 	beq.w	80030aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f62:	4b97      	ldr	r3, [pc, #604]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b94      	ldr	r3, [pc, #592]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a93      	ldr	r2, [pc, #588]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]
 8002f7a:	4b91      	ldr	r3, [pc, #580]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b8e      	ldr	r3, [pc, #568]	; (80031c4 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b8b      	ldr	r3, [pc, #556]	; (80031c4 <HAL_RCC_OscConfig+0x4f8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a8a      	ldr	r2, [pc, #552]	; (80031c4 <HAL_RCC_OscConfig+0x4f8>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fc0f 	bl	80017c4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe fc0b 	bl	80017c4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0fd      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x4f8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x312>
 8002fd0:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	e02d      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x334>
 8002fe6:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a75      	ldr	r2, [pc, #468]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	4b73      	ldr	r3, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a72      	ldr	r2, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	e01c      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x356>
 8003008:	4b6d      	ldr	r3, [pc, #436]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a6c      	ldr	r2, [pc, #432]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4a69      	ldr	r2, [pc, #420]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6213      	str	r3, [r2, #32]
 8003020:	e00b      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a66      	ldr	r2, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a63      	ldr	r2, [pc, #396]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d015      	beq.n	800306e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fbbf 	bl	80017c4 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fbbb 	bl	80017c4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0ab      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ee      	beq.n	800304a <HAL_RCC_OscConfig+0x37e>
 800306c:	e014      	b.n	8003098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe fba9 	bl	80017c4 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fba5 	bl	80017c4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e095      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ee      	bne.n	8003076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8081 	beq.w	80031b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d061      	beq.n	8003184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d146      	bne.n	8003156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <HAL_RCC_OscConfig+0x4fc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe fb79 	bl	80017c4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fb75 	bl	80017c4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e067      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d108      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	492d      	ldr	r1, [pc, #180]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a19      	ldr	r1, [r3, #32]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	430b      	orrs	r3, r1
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x4fc>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe fb49 	bl	80017c4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe fb45 	bl	80017c4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e037      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x46a>
 8003154:	e02f      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <HAL_RCC_OscConfig+0x4fc>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fb32 	bl	80017c4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fb2e 	bl	80017c4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e020      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x498>
 8003182:	e018      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42420060 	.word	0x42420060

080031cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d0      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b67      	ldr	r3, [pc, #412]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4965      	ldr	r1, [pc, #404]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b8      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800324a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d040      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e07f      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e073      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06b      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4936      	ldr	r1, [pc, #216]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fa82 	bl	80017c4 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe fa7e 	bl	80017c4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e053      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e032      	b.n	8003382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	490e      	ldr	r1, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335a:	f000 f821 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	fa21 f303 	lsr.w	r3, r1, r3
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1cc>)
 8003374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1d0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f9e0 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40022000 	.word	0x40022000
 8003390:	40021000 	.word	0x40021000
 8003394:	080073a4 	.word	0x080073a4
 8003398:	20000000 	.word	0x20000000
 800339c:	20000004 	.word	0x20000004

080033a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b490      	push	{r4, r7}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033a8:	1d3c      	adds	r4, r7, #4
 80033aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x40>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x46>
 80033de:	e02d      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033e2:	623b      	str	r3, [r7, #32]
      break;
 80033e4:	e02d      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033f2:	4413      	add	r3, r2
 80033f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c5b      	lsrs	r3, r3, #17
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003412:	4413      	add	r3, r2
 8003414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_RCC_GetSysClockFreq+0xbc>)
 800341e:	fb02 f203 	mul.w	r2, r2, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e004      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4a0c      	ldr	r2, [pc, #48]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	623b      	str	r3, [r7, #32]
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_RCC_GetSysClockFreq+0xbc>)
 800343e:	623b      	str	r3, [r7, #32]
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6a3b      	ldr	r3, [r7, #32]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3728      	adds	r7, #40	; 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc90      	pop	{r4, r7}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	08007390 	.word	0x08007390
 8003454:	080073a0 	.word	0x080073a0
 8003458:	40021000 	.word	0x40021000
 800345c:	007a1200 	.word	0x007a1200
 8003460:	003d0900 	.word	0x003d0900

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b02      	ldr	r3, [pc, #8]	; (8003474 <HAL_RCC_GetHCLKFreq+0x10>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	20000000 	.word	0x20000000

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800347c:	f7ff fff2 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003480:	4601      	mov	r1, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4a03      	ldr	r2, [pc, #12]	; (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	080073b4 	.word	0x080073b4

080034a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a4:	f7ff ffde 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034a8:	4601      	mov	r1, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	0adb      	lsrs	r3, r3, #11
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	080073b4 	.word	0x080073b4

080034c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <RCC_Delay+0x34>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <RCC_Delay+0x38>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0a5b      	lsrs	r3, r3, #9
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034e4:	bf00      	nop
  }
  while (Delay --);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1e5a      	subs	r2, r3, #1
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f9      	bne.n	80034e4 <RCC_Delay+0x1c>
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000
 8003500:	10624dd3 	.word	0x10624dd3

08003504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e03f      	b.n	8003596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f882 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f905 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af02      	add	r7, sp, #8
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d17c      	bne.n	80036b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_Transmit+0x2c>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e075      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Transmit+0x3e>
 80035d8:	2302      	movs	r3, #2
 80035da:	e06e      	b.n	80036ba <HAL_UART_Transmit+0x11c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2221      	movs	r2, #33	; 0x21
 80035ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035f2:	f7fe f8e7 	bl	80017c4 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Transmit+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003630:	e02a      	b.n	8003688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f840 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3302      	adds	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e007      	b.n	800367a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cf      	bne.n	8003632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f810 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e02c      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036da:	d028      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	f7fe f86f 	bl	80017c4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d21d      	bcs.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0c3      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003792:	f023 030c 	bic.w	r3, r3, #12
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	430b      	orrs	r3, r1
 800379e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <UART_SetConfig+0x114>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff fe6e 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	e002      	b.n	80037ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7ff fe56 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	0119      	lsls	r1, r3, #4
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <UART_SetConfig+0x118>)
 8003806:	fba3 0302 	umull	r0, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <UART_SetConfig+0x118>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	4419      	add	r1, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <UART_SetConfig+0x118>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <UART_SetConfig+0x118>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	440a      	add	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40013800 	.word	0x40013800
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	; (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	2500      	movs	r5, #0
 8003884:	4e0c      	ldr	r6, [pc, #48]	; (80038b8 <__libc_init_array+0x38>)
 8003886:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003888:	1ba4      	subs	r4, r4, r6
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	42a5      	cmp	r5, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	f003 fd60 	bl	8007354 <_init>
 8003894:	2500      	movs	r5, #0
 8003896:	4e0a      	ldr	r6, [pc, #40]	; (80038c0 <__libc_init_array+0x40>)
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <__libc_init_array+0x44>)
 800389a:	1ba4      	subs	r4, r4, r6
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	42a5      	cmp	r5, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038a8:	4798      	blx	r3
 80038aa:	3501      	adds	r5, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b2:	4798      	blx	r3
 80038b4:	3501      	adds	r5, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	08007670 	.word	0x08007670
 80038bc:	08007670 	.word	0x08007670
 80038c0:	08007670 	.word	0x08007670
 80038c4:	08007674 	.word	0x08007674

080038c8 <memset>:
 80038c8:	4603      	mov	r3, r0
 80038ca:	4402      	add	r2, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <__cvt>:
 80038d8:	2b00      	cmp	r3, #0
 80038da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038de:	461e      	mov	r6, r3
 80038e0:	bfbb      	ittet	lt
 80038e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80038e6:	461e      	movlt	r6, r3
 80038e8:	2300      	movge	r3, #0
 80038ea:	232d      	movlt	r3, #45	; 0x2d
 80038ec:	b088      	sub	sp, #32
 80038ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80038f0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80038f4:	f027 0720 	bic.w	r7, r7, #32
 80038f8:	2f46      	cmp	r7, #70	; 0x46
 80038fa:	4614      	mov	r4, r2
 80038fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038fe:	700b      	strb	r3, [r1, #0]
 8003900:	d004      	beq.n	800390c <__cvt+0x34>
 8003902:	2f45      	cmp	r7, #69	; 0x45
 8003904:	d100      	bne.n	8003908 <__cvt+0x30>
 8003906:	3501      	adds	r5, #1
 8003908:	2302      	movs	r3, #2
 800390a:	e000      	b.n	800390e <__cvt+0x36>
 800390c:	2303      	movs	r3, #3
 800390e:	aa07      	add	r2, sp, #28
 8003910:	9204      	str	r2, [sp, #16]
 8003912:	aa06      	add	r2, sp, #24
 8003914:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003918:	e9cd 3500 	strd	r3, r5, [sp]
 800391c:	4622      	mov	r2, r4
 800391e:	4633      	mov	r3, r6
 8003920:	f001 fd7e 	bl	8005420 <_dtoa_r>
 8003924:	2f47      	cmp	r7, #71	; 0x47
 8003926:	4680      	mov	r8, r0
 8003928:	d102      	bne.n	8003930 <__cvt+0x58>
 800392a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800392c:	07db      	lsls	r3, r3, #31
 800392e:	d526      	bpl.n	800397e <__cvt+0xa6>
 8003930:	2f46      	cmp	r7, #70	; 0x46
 8003932:	eb08 0905 	add.w	r9, r8, r5
 8003936:	d111      	bne.n	800395c <__cvt+0x84>
 8003938:	f898 3000 	ldrb.w	r3, [r8]
 800393c:	2b30      	cmp	r3, #48	; 0x30
 800393e:	d10a      	bne.n	8003956 <__cvt+0x7e>
 8003940:	2200      	movs	r2, #0
 8003942:	2300      	movs	r3, #0
 8003944:	4620      	mov	r0, r4
 8003946:	4631      	mov	r1, r6
 8003948:	f7fd f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800394c:	b918      	cbnz	r0, 8003956 <__cvt+0x7e>
 800394e:	f1c5 0501 	rsb	r5, r5, #1
 8003952:	f8ca 5000 	str.w	r5, [sl]
 8003956:	f8da 3000 	ldr.w	r3, [sl]
 800395a:	4499      	add	r9, r3
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4620      	mov	r0, r4
 8003962:	4631      	mov	r1, r6
 8003964:	f7fd f820 	bl	80009a8 <__aeabi_dcmpeq>
 8003968:	b938      	cbnz	r0, 800397a <__cvt+0xa2>
 800396a:	2230      	movs	r2, #48	; 0x30
 800396c:	9b07      	ldr	r3, [sp, #28]
 800396e:	454b      	cmp	r3, r9
 8003970:	d205      	bcs.n	800397e <__cvt+0xa6>
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	9107      	str	r1, [sp, #28]
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e7f8      	b.n	800396c <__cvt+0x94>
 800397a:	f8cd 901c 	str.w	r9, [sp, #28]
 800397e:	4640      	mov	r0, r8
 8003980:	9b07      	ldr	r3, [sp, #28]
 8003982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003984:	eba3 0308 	sub.w	r3, r3, r8
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	b008      	add	sp, #32
 800398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003990 <__exponent>:
 8003990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003992:	2900      	cmp	r1, #0
 8003994:	bfb4      	ite	lt
 8003996:	232d      	movlt	r3, #45	; 0x2d
 8003998:	232b      	movge	r3, #43	; 0x2b
 800399a:	4604      	mov	r4, r0
 800399c:	bfb8      	it	lt
 800399e:	4249      	neglt	r1, r1
 80039a0:	2909      	cmp	r1, #9
 80039a2:	f804 2b02 	strb.w	r2, [r4], #2
 80039a6:	7043      	strb	r3, [r0, #1]
 80039a8:	dd21      	ble.n	80039ee <__exponent+0x5e>
 80039aa:	f10d 0307 	add.w	r3, sp, #7
 80039ae:	461f      	mov	r7, r3
 80039b0:	260a      	movs	r6, #10
 80039b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80039b6:	fb06 1115 	mls	r1, r6, r5, r1
 80039ba:	2d09      	cmp	r5, #9
 80039bc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80039c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039c4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80039c8:	4629      	mov	r1, r5
 80039ca:	dc09      	bgt.n	80039e0 <__exponent+0x50>
 80039cc:	3130      	adds	r1, #48	; 0x30
 80039ce:	3b02      	subs	r3, #2
 80039d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80039d4:	42bb      	cmp	r3, r7
 80039d6:	4622      	mov	r2, r4
 80039d8:	d304      	bcc.n	80039e4 <__exponent+0x54>
 80039da:	1a10      	subs	r0, r2, r0
 80039dc:	b003      	add	sp, #12
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e0:	4613      	mov	r3, r2
 80039e2:	e7e6      	b.n	80039b2 <__exponent+0x22>
 80039e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039e8:	f804 2b01 	strb.w	r2, [r4], #1
 80039ec:	e7f2      	b.n	80039d4 <__exponent+0x44>
 80039ee:	2330      	movs	r3, #48	; 0x30
 80039f0:	4419      	add	r1, r3
 80039f2:	7083      	strb	r3, [r0, #2]
 80039f4:	1d02      	adds	r2, r0, #4
 80039f6:	70c1      	strb	r1, [r0, #3]
 80039f8:	e7ef      	b.n	80039da <__exponent+0x4a>
	...

080039fc <_printf_float>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b091      	sub	sp, #68	; 0x44
 8003a02:	460c      	mov	r4, r1
 8003a04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003a06:	4693      	mov	fp, r2
 8003a08:	461e      	mov	r6, r3
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	f002 fdea 	bl	80065e4 <_localeconv_r>
 8003a10:	6803      	ldr	r3, [r0, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	9309      	str	r3, [sp, #36]	; 0x24
 8003a16:	f7fc fb9b 	bl	8000150 <strlen>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	900a      	str	r0, [sp, #40]	; 0x28
 8003a22:	3307      	adds	r3, #7
 8003a24:	f023 0307 	bic.w	r3, r3, #7
 8003a28:	f103 0208 	add.w	r2, r3, #8
 8003a2c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003a30:	f8d4 a000 	ldr.w	sl, [r4]
 8003a34:	603a      	str	r2, [r7, #0]
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a3e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003a42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a4c:	4ba6      	ldr	r3, [pc, #664]	; (8003ce8 <_printf_float+0x2ec>)
 8003a4e:	4638      	mov	r0, r7
 8003a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a52:	f7fc ffdb 	bl	8000a0c <__aeabi_dcmpun>
 8003a56:	bb68      	cbnz	r0, 8003ab4 <_printf_float+0xb8>
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a5c:	4ba2      	ldr	r3, [pc, #648]	; (8003ce8 <_printf_float+0x2ec>)
 8003a5e:	4638      	mov	r0, r7
 8003a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a62:	f7fc ffb5 	bl	80009d0 <__aeabi_dcmple>
 8003a66:	bb28      	cbnz	r0, 8003ab4 <_printf_float+0xb8>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	4649      	mov	r1, r9
 8003a70:	f7fc ffa4 	bl	80009bc <__aeabi_dcmplt>
 8003a74:	b110      	cbz	r0, 8003a7c <_printf_float+0x80>
 8003a76:	232d      	movs	r3, #45	; 0x2d
 8003a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7c:	4f9b      	ldr	r7, [pc, #620]	; (8003cec <_printf_float+0x2f0>)
 8003a7e:	4b9c      	ldr	r3, [pc, #624]	; (8003cf0 <_printf_float+0x2f4>)
 8003a80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a84:	bf98      	it	ls
 8003a86:	461f      	movls	r7, r3
 8003a88:	2303      	movs	r3, #3
 8003a8a:	f04f 0900 	mov.w	r9, #0
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	f02a 0304 	bic.w	r3, sl, #4
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	9600      	str	r6, [sp, #0]
 8003a98:	465b      	mov	r3, fp
 8003a9a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f9e2 	bl	8003e68 <_printf_common>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f040 8090 	bne.w	8003bca <_printf_float+0x1ce>
 8003aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aae:	b011      	add	sp, #68	; 0x44
 8003ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab4:	463a      	mov	r2, r7
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	4638      	mov	r0, r7
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc ffa6 	bl	8000a0c <__aeabi_dcmpun>
 8003ac0:	b110      	cbz	r0, 8003ac8 <_printf_float+0xcc>
 8003ac2:	4f8c      	ldr	r7, [pc, #560]	; (8003cf4 <_printf_float+0x2f8>)
 8003ac4:	4b8c      	ldr	r3, [pc, #560]	; (8003cf8 <_printf_float+0x2fc>)
 8003ac6:	e7db      	b.n	8003a80 <_printf_float+0x84>
 8003ac8:	6863      	ldr	r3, [r4, #4]
 8003aca:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	a80d      	add	r0, sp, #52	; 0x34
 8003ad2:	a90e      	add	r1, sp, #56	; 0x38
 8003ad4:	d140      	bne.n	8003b58 <_printf_float+0x15c>
 8003ad6:	2306      	movs	r3, #6
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	f04f 0c00 	mov.w	ip, #0
 8003ade:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003ae2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003ae6:	6863      	ldr	r3, [r4, #4]
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	463a      	mov	r2, r7
 8003af2:	464b      	mov	r3, r9
 8003af4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003af8:	4628      	mov	r0, r5
 8003afa:	f7ff feed 	bl	80038d8 <__cvt>
 8003afe:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003b02:	2b47      	cmp	r3, #71	; 0x47
 8003b04:	4607      	mov	r7, r0
 8003b06:	d109      	bne.n	8003b1c <_printf_float+0x120>
 8003b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b0a:	1cd8      	adds	r0, r3, #3
 8003b0c:	db02      	blt.n	8003b14 <_printf_float+0x118>
 8003b0e:	6862      	ldr	r2, [r4, #4]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	dd47      	ble.n	8003ba4 <_printf_float+0x1a8>
 8003b14:	f1a8 0802 	sub.w	r8, r8, #2
 8003b18:	fa5f f888 	uxtb.w	r8, r8
 8003b1c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003b20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b22:	d824      	bhi.n	8003b6e <_printf_float+0x172>
 8003b24:	3901      	subs	r1, #1
 8003b26:	4642      	mov	r2, r8
 8003b28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b2c:	910d      	str	r1, [sp, #52]	; 0x34
 8003b2e:	f7ff ff2f 	bl	8003990 <__exponent>
 8003b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b34:	4681      	mov	r9, r0
 8003b36:	1813      	adds	r3, r2, r0
 8003b38:	2a01      	cmp	r2, #1
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	dc02      	bgt.n	8003b44 <_printf_float+0x148>
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	07d1      	lsls	r1, r2, #31
 8003b42:	d501      	bpl.n	8003b48 <_printf_float+0x14c>
 8003b44:	3301      	adds	r3, #1
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0a2      	beq.n	8003a96 <_printf_float+0x9a>
 8003b50:	232d      	movs	r3, #45	; 0x2d
 8003b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b56:	e79e      	b.n	8003a96 <_printf_float+0x9a>
 8003b58:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003b5c:	f000 816e 	beq.w	8003e3c <_printf_float+0x440>
 8003b60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b64:	d1b9      	bne.n	8003ada <_printf_float+0xde>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1b7      	bne.n	8003ada <_printf_float+0xde>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7b4      	b.n	8003ad8 <_printf_float+0xdc>
 8003b6e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003b72:	d119      	bne.n	8003ba8 <_printf_float+0x1ac>
 8003b74:	2900      	cmp	r1, #0
 8003b76:	6863      	ldr	r3, [r4, #4]
 8003b78:	dd0c      	ble.n	8003b94 <_printf_float+0x198>
 8003b7a:	6121      	str	r1, [r4, #16]
 8003b7c:	b913      	cbnz	r3, 8003b84 <_printf_float+0x188>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	07d2      	lsls	r2, r2, #31
 8003b82:	d502      	bpl.n	8003b8a <_printf_float+0x18e>
 8003b84:	3301      	adds	r3, #1
 8003b86:	440b      	add	r3, r1
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b8c:	f04f 0900 	mov.w	r9, #0
 8003b90:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b92:	e7d9      	b.n	8003b48 <_printf_float+0x14c>
 8003b94:	b913      	cbnz	r3, 8003b9c <_printf_float+0x1a0>
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	07d0      	lsls	r0, r2, #31
 8003b9a:	d501      	bpl.n	8003ba0 <_printf_float+0x1a4>
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	e7f3      	b.n	8003b88 <_printf_float+0x18c>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e7f1      	b.n	8003b88 <_printf_float+0x18c>
 8003ba4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003ba8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003bac:	4293      	cmp	r3, r2
 8003bae:	db05      	blt.n	8003bbc <_printf_float+0x1c0>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	6123      	str	r3, [r4, #16]
 8003bb4:	07d1      	lsls	r1, r2, #31
 8003bb6:	d5e8      	bpl.n	8003b8a <_printf_float+0x18e>
 8003bb8:	3301      	adds	r3, #1
 8003bba:	e7e5      	b.n	8003b88 <_printf_float+0x18c>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfcc      	ite	gt
 8003bc0:	2301      	movgt	r3, #1
 8003bc2:	f1c3 0302 	rsble	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	e7de      	b.n	8003b88 <_printf_float+0x18c>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	055a      	lsls	r2, r3, #21
 8003bce:	d407      	bmi.n	8003be0 <_printf_float+0x1e4>
 8003bd0:	6923      	ldr	r3, [r4, #16]
 8003bd2:	463a      	mov	r2, r7
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	47b0      	blx	r6
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d129      	bne.n	8003c32 <_printf_float+0x236>
 8003bde:	e764      	b.n	8003aaa <_printf_float+0xae>
 8003be0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003be4:	f240 80d7 	bls.w	8003d96 <_printf_float+0x39a>
 8003be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bec:	2200      	movs	r2, #0
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f7fc feda 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf4:	b388      	cbz	r0, 8003c5a <_printf_float+0x25e>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <_printf_float+0x300>)
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	47b0      	blx	r6
 8003c00:	3001      	adds	r0, #1
 8003c02:	f43f af52 	beq.w	8003aaa <_printf_float+0xae>
 8003c06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	db02      	blt.n	8003c14 <_printf_float+0x218>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	07d8      	lsls	r0, r3, #31
 8003c12:	d50e      	bpl.n	8003c32 <_printf_float+0x236>
 8003c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c18:	4659      	mov	r1, fp
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47b0      	blx	r6
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f43f af43 	beq.w	8003aaa <_printf_float+0xae>
 8003c24:	2700      	movs	r7, #0
 8003c26:	f104 081a 	add.w	r8, r4, #26
 8003c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	42bb      	cmp	r3, r7
 8003c30:	dc09      	bgt.n	8003c46 <_printf_float+0x24a>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	079f      	lsls	r7, r3, #30
 8003c36:	f100 80fd 	bmi.w	8003e34 <_printf_float+0x438>
 8003c3a:	68e0      	ldr	r0, [r4, #12]
 8003c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c3e:	4298      	cmp	r0, r3
 8003c40:	bfb8      	it	lt
 8003c42:	4618      	movlt	r0, r3
 8003c44:	e733      	b.n	8003aae <_printf_float+0xb2>
 8003c46:	2301      	movs	r3, #1
 8003c48:	4642      	mov	r2, r8
 8003c4a:	4659      	mov	r1, fp
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	3001      	adds	r0, #1
 8003c52:	f43f af2a 	beq.w	8003aaa <_printf_float+0xae>
 8003c56:	3701      	adds	r7, #1
 8003c58:	e7e7      	b.n	8003c2a <_printf_float+0x22e>
 8003c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dc2b      	bgt.n	8003cb8 <_printf_float+0x2bc>
 8003c60:	2301      	movs	r3, #1
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <_printf_float+0x300>)
 8003c64:	4659      	mov	r1, fp
 8003c66:	4628      	mov	r0, r5
 8003c68:	47b0      	blx	r6
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	f43f af1d 	beq.w	8003aaa <_printf_float+0xae>
 8003c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c72:	b923      	cbnz	r3, 8003c7e <_printf_float+0x282>
 8003c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c76:	b913      	cbnz	r3, 8003c7e <_printf_float+0x282>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	07d9      	lsls	r1, r3, #31
 8003c7c:	d5d9      	bpl.n	8003c32 <_printf_float+0x236>
 8003c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c82:	4659      	mov	r1, fp
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b0      	blx	r6
 8003c88:	3001      	adds	r0, #1
 8003c8a:	f43f af0e 	beq.w	8003aaa <_printf_float+0xae>
 8003c8e:	f04f 0800 	mov.w	r8, #0
 8003c92:	f104 091a 	add.w	r9, r4, #26
 8003c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c98:	425b      	negs	r3, r3
 8003c9a:	4543      	cmp	r3, r8
 8003c9c:	dc01      	bgt.n	8003ca2 <_printf_float+0x2a6>
 8003c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ca0:	e797      	b.n	8003bd2 <_printf_float+0x1d6>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	464a      	mov	r2, r9
 8003ca6:	4659      	mov	r1, fp
 8003ca8:	4628      	mov	r0, r5
 8003caa:	47b0      	blx	r6
 8003cac:	3001      	adds	r0, #1
 8003cae:	f43f aefc 	beq.w	8003aaa <_printf_float+0xae>
 8003cb2:	f108 0801 	add.w	r8, r8, #1
 8003cb6:	e7ee      	b.n	8003c96 <_printf_float+0x29a>
 8003cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bfa8      	it	ge
 8003cc0:	461a      	movge	r2, r3
 8003cc2:	2a00      	cmp	r2, #0
 8003cc4:	4690      	mov	r8, r2
 8003cc6:	dd07      	ble.n	8003cd8 <_printf_float+0x2dc>
 8003cc8:	4613      	mov	r3, r2
 8003cca:	4659      	mov	r1, fp
 8003ccc:	463a      	mov	r2, r7
 8003cce:	4628      	mov	r0, r5
 8003cd0:	47b0      	blx	r6
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	f43f aee9 	beq.w	8003aaa <_printf_float+0xae>
 8003cd8:	f104 031a 	add.w	r3, r4, #26
 8003cdc:	f04f 0a00 	mov.w	sl, #0
 8003ce0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ce6:	e015      	b.n	8003d14 <_printf_float+0x318>
 8003ce8:	7fefffff 	.word	0x7fefffff
 8003cec:	080073c0 	.word	0x080073c0
 8003cf0:	080073bc 	.word	0x080073bc
 8003cf4:	080073c8 	.word	0x080073c8
 8003cf8:	080073c4 	.word	0x080073c4
 8003cfc:	080073cc 	.word	0x080073cc
 8003d00:	2301      	movs	r3, #1
 8003d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d04:	4659      	mov	r1, fp
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b0      	blx	r6
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f aecd 	beq.w	8003aaa <_printf_float+0xae>
 8003d10:	f10a 0a01 	add.w	sl, sl, #1
 8003d14:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003d18:	eba9 0308 	sub.w	r3, r9, r8
 8003d1c:	4553      	cmp	r3, sl
 8003d1e:	dcef      	bgt.n	8003d00 <_printf_float+0x304>
 8003d20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d24:	429a      	cmp	r2, r3
 8003d26:	444f      	add	r7, r9
 8003d28:	db14      	blt.n	8003d54 <_printf_float+0x358>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	07da      	lsls	r2, r3, #31
 8003d2e:	d411      	bmi.n	8003d54 <_printf_float+0x358>
 8003d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d34:	eba3 0209 	sub.w	r2, r3, r9
 8003d38:	eba3 0901 	sub.w	r9, r3, r1
 8003d3c:	4591      	cmp	r9, r2
 8003d3e:	bfa8      	it	ge
 8003d40:	4691      	movge	r9, r2
 8003d42:	f1b9 0f00 	cmp.w	r9, #0
 8003d46:	dc0d      	bgt.n	8003d64 <_printf_float+0x368>
 8003d48:	2700      	movs	r7, #0
 8003d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d4e:	f104 081a 	add.w	r8, r4, #26
 8003d52:	e018      	b.n	8003d86 <_printf_float+0x38a>
 8003d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d58:	4659      	mov	r1, fp
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b0      	blx	r6
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d1e6      	bne.n	8003d30 <_printf_float+0x334>
 8003d62:	e6a2      	b.n	8003aaa <_printf_float+0xae>
 8003d64:	464b      	mov	r3, r9
 8003d66:	463a      	mov	r2, r7
 8003d68:	4659      	mov	r1, fp
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	47b0      	blx	r6
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d1ea      	bne.n	8003d48 <_printf_float+0x34c>
 8003d72:	e69a      	b.n	8003aaa <_printf_float+0xae>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4642      	mov	r2, r8
 8003d78:	4659      	mov	r1, fp
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b0      	blx	r6
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f43f ae93 	beq.w	8003aaa <_printf_float+0xae>
 8003d84:	3701      	adds	r7, #1
 8003d86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	eba3 0309 	sub.w	r3, r3, r9
 8003d90:	42bb      	cmp	r3, r7
 8003d92:	dcef      	bgt.n	8003d74 <_printf_float+0x378>
 8003d94:	e74d      	b.n	8003c32 <_printf_float+0x236>
 8003d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d98:	2a01      	cmp	r2, #1
 8003d9a:	dc01      	bgt.n	8003da0 <_printf_float+0x3a4>
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d538      	bpl.n	8003e12 <_printf_float+0x416>
 8003da0:	2301      	movs	r3, #1
 8003da2:	463a      	mov	r2, r7
 8003da4:	4659      	mov	r1, fp
 8003da6:	4628      	mov	r0, r5
 8003da8:	47b0      	blx	r6
 8003daa:	3001      	adds	r0, #1
 8003dac:	f43f ae7d 	beq.w	8003aaa <_printf_float+0xae>
 8003db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003db4:	4659      	mov	r1, fp
 8003db6:	4628      	mov	r0, r5
 8003db8:	47b0      	blx	r6
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f107 0701 	add.w	r7, r7, #1
 8003dc0:	f43f ae73 	beq.w	8003aaa <_printf_float+0xae>
 8003dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f7fc fde9 	bl	80009a8 <__aeabi_dcmpeq>
 8003dd6:	b9c0      	cbnz	r0, 8003e0a <_printf_float+0x40e>
 8003dd8:	4643      	mov	r3, r8
 8003dda:	463a      	mov	r2, r7
 8003ddc:	4659      	mov	r1, fp
 8003dde:	4628      	mov	r0, r5
 8003de0:	47b0      	blx	r6
 8003de2:	3001      	adds	r0, #1
 8003de4:	d10d      	bne.n	8003e02 <_printf_float+0x406>
 8003de6:	e660      	b.n	8003aaa <_printf_float+0xae>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4642      	mov	r2, r8
 8003dec:	4659      	mov	r1, fp
 8003dee:	4628      	mov	r0, r5
 8003df0:	47b0      	blx	r6
 8003df2:	3001      	adds	r0, #1
 8003df4:	f43f ae59 	beq.w	8003aaa <_printf_float+0xae>
 8003df8:	3701      	adds	r7, #1
 8003dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	42bb      	cmp	r3, r7
 8003e00:	dcf2      	bgt.n	8003de8 <_printf_float+0x3ec>
 8003e02:	464b      	mov	r3, r9
 8003e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e08:	e6e4      	b.n	8003bd4 <_printf_float+0x1d8>
 8003e0a:	2700      	movs	r7, #0
 8003e0c:	f104 081a 	add.w	r8, r4, #26
 8003e10:	e7f3      	b.n	8003dfa <_printf_float+0x3fe>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e7e1      	b.n	8003dda <_printf_float+0x3de>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4642      	mov	r2, r8
 8003e1a:	4659      	mov	r1, fp
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	47b0      	blx	r6
 8003e20:	3001      	adds	r0, #1
 8003e22:	f43f ae42 	beq.w	8003aaa <_printf_float+0xae>
 8003e26:	3701      	adds	r7, #1
 8003e28:	68e3      	ldr	r3, [r4, #12]
 8003e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	42bb      	cmp	r3, r7
 8003e30:	dcf1      	bgt.n	8003e16 <_printf_float+0x41a>
 8003e32:	e702      	b.n	8003c3a <_printf_float+0x23e>
 8003e34:	2700      	movs	r7, #0
 8003e36:	f104 0819 	add.w	r8, r4, #25
 8003e3a:	e7f5      	b.n	8003e28 <_printf_float+0x42c>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f43f ae94 	beq.w	8003b6a <_printf_float+0x16e>
 8003e42:	f04f 0c00 	mov.w	ip, #0
 8003e46:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003e4a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003e4e:	6022      	str	r2, [r4, #0]
 8003e50:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003e54:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	463a      	mov	r2, r7
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fd3a 	bl	80038d8 <__cvt>
 8003e64:	4607      	mov	r7, r0
 8003e66:	e64f      	b.n	8003b08 <_printf_float+0x10c>

08003e68 <_printf_common>:
 8003e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	461f      	mov	r7, r3
 8003e70:	688a      	ldr	r2, [r1, #8]
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	4606      	mov	r6, r0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	bfb8      	it	lt
 8003e7a:	4613      	movlt	r3, r2
 8003e7c:	f8c9 3000 	str.w	r3, [r9]
 8003e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e84:	460c      	mov	r4, r1
 8003e86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e8a:	b112      	cbz	r2, 8003e92 <_printf_common+0x2a>
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8c9 3000 	str.w	r3, [r9]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	0699      	lsls	r1, r3, #26
 8003e96:	bf42      	ittt	mi
 8003e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e9c:	3302      	addmi	r3, #2
 8003e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	f015 0506 	ands.w	r5, r5, #6
 8003ea8:	d107      	bne.n	8003eba <_printf_common+0x52>
 8003eaa:	f104 0a19 	add.w	sl, r4, #25
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	42ab      	cmp	r3, r5
 8003eb8:	dc29      	bgt.n	8003f0e <_printf_common+0xa6>
 8003eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	3300      	adds	r3, #0
 8003ec2:	bf18      	it	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	0692      	lsls	r2, r2, #26
 8003ec8:	d42e      	bmi.n	8003f28 <_printf_common+0xc0>
 8003eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ece:	4639      	mov	r1, r7
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	47c0      	blx	r8
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d021      	beq.n	8003f1c <_printf_common+0xb4>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	68e5      	ldr	r5, [r4, #12]
 8003edc:	f003 0306 	and.w	r3, r3, #6
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	bf18      	it	ne
 8003ee4:	2500      	movne	r5, #0
 8003ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8003eea:	f04f 0900 	mov.w	r9, #0
 8003eee:	bf08      	it	eq
 8003ef0:	1aad      	subeq	r5, r5, r2
 8003ef2:	68a3      	ldr	r3, [r4, #8]
 8003ef4:	6922      	ldr	r2, [r4, #16]
 8003ef6:	bf08      	it	eq
 8003ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bfc4      	itt	gt
 8003f00:	1a9b      	subgt	r3, r3, r2
 8003f02:	18ed      	addgt	r5, r5, r3
 8003f04:	341a      	adds	r4, #26
 8003f06:	454d      	cmp	r5, r9
 8003f08:	d11a      	bne.n	8003f40 <_printf_common+0xd8>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e008      	b.n	8003f20 <_printf_common+0xb8>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4652      	mov	r2, sl
 8003f12:	4639      	mov	r1, r7
 8003f14:	4630      	mov	r0, r6
 8003f16:	47c0      	blx	r8
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d103      	bne.n	8003f24 <_printf_common+0xbc>
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	3501      	adds	r5, #1
 8003f26:	e7c2      	b.n	8003eae <_printf_common+0x46>
 8003f28:	2030      	movs	r0, #48	; 0x30
 8003f2a:	18e1      	adds	r1, r4, r3
 8003f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f36:	4422      	add	r2, r4
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f3e:	e7c4      	b.n	8003eca <_printf_common+0x62>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4622      	mov	r2, r4
 8003f44:	4639      	mov	r1, r7
 8003f46:	4630      	mov	r0, r6
 8003f48:	47c0      	blx	r8
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d0e6      	beq.n	8003f1c <_printf_common+0xb4>
 8003f4e:	f109 0901 	add.w	r9, r9, #1
 8003f52:	e7d8      	b.n	8003f06 <_printf_common+0x9e>

08003f54 <_printf_i>:
 8003f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	7e09      	ldrb	r1, [r1, #24]
 8003f60:	b085      	sub	sp, #20
 8003f62:	296e      	cmp	r1, #110	; 0x6e
 8003f64:	4617      	mov	r7, r2
 8003f66:	4606      	mov	r6, r0
 8003f68:	4698      	mov	r8, r3
 8003f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f6c:	f000 80b3 	beq.w	80040d6 <_printf_i+0x182>
 8003f70:	d822      	bhi.n	8003fb8 <_printf_i+0x64>
 8003f72:	2963      	cmp	r1, #99	; 0x63
 8003f74:	d036      	beq.n	8003fe4 <_printf_i+0x90>
 8003f76:	d80a      	bhi.n	8003f8e <_printf_i+0x3a>
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	f000 80b9 	beq.w	80040f0 <_printf_i+0x19c>
 8003f7e:	2958      	cmp	r1, #88	; 0x58
 8003f80:	f000 8083 	beq.w	800408a <_printf_i+0x136>
 8003f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f8c:	e032      	b.n	8003ff4 <_printf_i+0xa0>
 8003f8e:	2964      	cmp	r1, #100	; 0x64
 8003f90:	d001      	beq.n	8003f96 <_printf_i+0x42>
 8003f92:	2969      	cmp	r1, #105	; 0x69
 8003f94:	d1f6      	bne.n	8003f84 <_printf_i+0x30>
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	0605      	lsls	r5, r0, #24
 8003f9c:	f103 0104 	add.w	r1, r3, #4
 8003fa0:	d52a      	bpl.n	8003ff8 <_printf_i+0xa4>
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6011      	str	r1, [r2, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	da03      	bge.n	8003fb2 <_printf_i+0x5e>
 8003faa:	222d      	movs	r2, #45	; 0x2d
 8003fac:	425b      	negs	r3, r3
 8003fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fb2:	486f      	ldr	r0, [pc, #444]	; (8004170 <_printf_i+0x21c>)
 8003fb4:	220a      	movs	r2, #10
 8003fb6:	e039      	b.n	800402c <_printf_i+0xd8>
 8003fb8:	2973      	cmp	r1, #115	; 0x73
 8003fba:	f000 809d 	beq.w	80040f8 <_printf_i+0x1a4>
 8003fbe:	d808      	bhi.n	8003fd2 <_printf_i+0x7e>
 8003fc0:	296f      	cmp	r1, #111	; 0x6f
 8003fc2:	d020      	beq.n	8004006 <_printf_i+0xb2>
 8003fc4:	2970      	cmp	r1, #112	; 0x70
 8003fc6:	d1dd      	bne.n	8003f84 <_printf_i+0x30>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	f043 0320 	orr.w	r3, r3, #32
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	e003      	b.n	8003fda <_printf_i+0x86>
 8003fd2:	2975      	cmp	r1, #117	; 0x75
 8003fd4:	d017      	beq.n	8004006 <_printf_i+0xb2>
 8003fd6:	2978      	cmp	r1, #120	; 0x78
 8003fd8:	d1d4      	bne.n	8003f84 <_printf_i+0x30>
 8003fda:	2378      	movs	r3, #120	; 0x78
 8003fdc:	4865      	ldr	r0, [pc, #404]	; (8004174 <_printf_i+0x220>)
 8003fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe2:	e055      	b.n	8004090 <_printf_i+0x13c>
 8003fe4:	6813      	ldr	r3, [r2, #0]
 8003fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fea:	1d19      	adds	r1, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e08c      	b.n	8004112 <_printf_i+0x1be>
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	bf18      	it	ne
 8004002:	b21b      	sxthne	r3, r3
 8004004:	e7cf      	b.n	8003fa6 <_printf_i+0x52>
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	6825      	ldr	r5, [r4, #0]
 800400a:	1d18      	adds	r0, r3, #4
 800400c:	6010      	str	r0, [r2, #0]
 800400e:	0628      	lsls	r0, r5, #24
 8004010:	d501      	bpl.n	8004016 <_printf_i+0xc2>
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	e002      	b.n	800401c <_printf_i+0xc8>
 8004016:	0668      	lsls	r0, r5, #25
 8004018:	d5fb      	bpl.n	8004012 <_printf_i+0xbe>
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	296f      	cmp	r1, #111	; 0x6f
 800401e:	bf14      	ite	ne
 8004020:	220a      	movne	r2, #10
 8004022:	2208      	moveq	r2, #8
 8004024:	4852      	ldr	r0, [pc, #328]	; (8004170 <_printf_i+0x21c>)
 8004026:	2100      	movs	r1, #0
 8004028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800402c:	6865      	ldr	r5, [r4, #4]
 800402e:	2d00      	cmp	r5, #0
 8004030:	60a5      	str	r5, [r4, #8]
 8004032:	f2c0 8095 	blt.w	8004160 <_printf_i+0x20c>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	f021 0104 	bic.w	r1, r1, #4
 800403c:	6021      	str	r1, [r4, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d13d      	bne.n	80040be <_printf_i+0x16a>
 8004042:	2d00      	cmp	r5, #0
 8004044:	f040 808e 	bne.w	8004164 <_printf_i+0x210>
 8004048:	4665      	mov	r5, ip
 800404a:	2a08      	cmp	r2, #8
 800404c:	d10b      	bne.n	8004066 <_printf_i+0x112>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	07db      	lsls	r3, r3, #31
 8004052:	d508      	bpl.n	8004066 <_printf_i+0x112>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	bfde      	ittt	le
 800405c:	2330      	movle	r3, #48	; 0x30
 800405e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004062:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004066:	ebac 0305 	sub.w	r3, ip, r5
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	f8cd 8000 	str.w	r8, [sp]
 8004070:	463b      	mov	r3, r7
 8004072:	aa03      	add	r2, sp, #12
 8004074:	4621      	mov	r1, r4
 8004076:	4630      	mov	r0, r6
 8004078:	f7ff fef6 	bl	8003e68 <_printf_common>
 800407c:	3001      	adds	r0, #1
 800407e:	d14d      	bne.n	800411c <_printf_i+0x1c8>
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004084:	b005      	add	sp, #20
 8004086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800408a:	4839      	ldr	r0, [pc, #228]	; (8004170 <_printf_i+0x21c>)
 800408c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004090:	6813      	ldr	r3, [r2, #0]
 8004092:	6821      	ldr	r1, [r4, #0]
 8004094:	1d1d      	adds	r5, r3, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6015      	str	r5, [r2, #0]
 800409a:	060a      	lsls	r2, r1, #24
 800409c:	d50b      	bpl.n	80040b6 <_printf_i+0x162>
 800409e:	07ca      	lsls	r2, r1, #31
 80040a0:	bf44      	itt	mi
 80040a2:	f041 0120 	orrmi.w	r1, r1, #32
 80040a6:	6021      	strmi	r1, [r4, #0]
 80040a8:	b91b      	cbnz	r3, 80040b2 <_printf_i+0x15e>
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	f022 0220 	bic.w	r2, r2, #32
 80040b0:	6022      	str	r2, [r4, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	e7b7      	b.n	8004026 <_printf_i+0xd2>
 80040b6:	064d      	lsls	r5, r1, #25
 80040b8:	bf48      	it	mi
 80040ba:	b29b      	uxthmi	r3, r3
 80040bc:	e7ef      	b.n	800409e <_printf_i+0x14a>
 80040be:	4665      	mov	r5, ip
 80040c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040c4:	fb02 3311 	mls	r3, r2, r1, r3
 80040c8:	5cc3      	ldrb	r3, [r0, r3]
 80040ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040ce:	460b      	mov	r3, r1
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d1f5      	bne.n	80040c0 <_printf_i+0x16c>
 80040d4:	e7b9      	b.n	800404a <_printf_i+0xf6>
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6961      	ldr	r1, [r4, #20]
 80040de:	6010      	str	r0, [r2, #0]
 80040e0:	0628      	lsls	r0, r5, #24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	d501      	bpl.n	80040ea <_printf_i+0x196>
 80040e6:	6019      	str	r1, [r3, #0]
 80040e8:	e002      	b.n	80040f0 <_printf_i+0x19c>
 80040ea:	066a      	lsls	r2, r5, #25
 80040ec:	d5fb      	bpl.n	80040e6 <_printf_i+0x192>
 80040ee:	8019      	strh	r1, [r3, #0]
 80040f0:	2300      	movs	r3, #0
 80040f2:	4665      	mov	r5, ip
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	e7b9      	b.n	800406c <_printf_i+0x118>
 80040f8:	6813      	ldr	r3, [r2, #0]
 80040fa:	1d19      	adds	r1, r3, #4
 80040fc:	6011      	str	r1, [r2, #0]
 80040fe:	681d      	ldr	r5, [r3, #0]
 8004100:	6862      	ldr	r2, [r4, #4]
 8004102:	2100      	movs	r1, #0
 8004104:	4628      	mov	r0, r5
 8004106:	f002 fa95 	bl	8006634 <memchr>
 800410a:	b108      	cbz	r0, 8004110 <_printf_i+0x1bc>
 800410c:	1b40      	subs	r0, r0, r5
 800410e:	6060      	str	r0, [r4, #4]
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411a:	e7a7      	b.n	800406c <_printf_i+0x118>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	462a      	mov	r2, r5
 8004120:	4639      	mov	r1, r7
 8004122:	4630      	mov	r0, r6
 8004124:	47c0      	blx	r8
 8004126:	3001      	adds	r0, #1
 8004128:	d0aa      	beq.n	8004080 <_printf_i+0x12c>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	079b      	lsls	r3, r3, #30
 800412e:	d413      	bmi.n	8004158 <_printf_i+0x204>
 8004130:	68e0      	ldr	r0, [r4, #12]
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	4298      	cmp	r0, r3
 8004136:	bfb8      	it	lt
 8004138:	4618      	movlt	r0, r3
 800413a:	e7a3      	b.n	8004084 <_printf_i+0x130>
 800413c:	2301      	movs	r3, #1
 800413e:	464a      	mov	r2, r9
 8004140:	4639      	mov	r1, r7
 8004142:	4630      	mov	r0, r6
 8004144:	47c0      	blx	r8
 8004146:	3001      	adds	r0, #1
 8004148:	d09a      	beq.n	8004080 <_printf_i+0x12c>
 800414a:	3501      	adds	r5, #1
 800414c:	68e3      	ldr	r3, [r4, #12]
 800414e:	9a03      	ldr	r2, [sp, #12]
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	42ab      	cmp	r3, r5
 8004154:	dcf2      	bgt.n	800413c <_printf_i+0x1e8>
 8004156:	e7eb      	b.n	8004130 <_printf_i+0x1dc>
 8004158:	2500      	movs	r5, #0
 800415a:	f104 0919 	add.w	r9, r4, #25
 800415e:	e7f5      	b.n	800414c <_printf_i+0x1f8>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ac      	bne.n	80040be <_printf_i+0x16a>
 8004164:	7803      	ldrb	r3, [r0, #0]
 8004166:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800416e:	e76c      	b.n	800404a <_printf_i+0xf6>
 8004170:	080073ce 	.word	0x080073ce
 8004174:	080073df 	.word	0x080073df

08004178 <_scanf_float>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	469a      	mov	sl, r3
 800417e:	688b      	ldr	r3, [r1, #8]
 8004180:	4616      	mov	r6, r2
 8004182:	1e5a      	subs	r2, r3, #1
 8004184:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004188:	bf88      	it	hi
 800418a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800418e:	b087      	sub	sp, #28
 8004190:	bf85      	ittet	hi
 8004192:	189b      	addhi	r3, r3, r2
 8004194:	9301      	strhi	r3, [sp, #4]
 8004196:	2300      	movls	r3, #0
 8004198:	f240 135d 	movwhi	r3, #349	; 0x15d
 800419c:	4688      	mov	r8, r1
 800419e:	f04f 0b00 	mov.w	fp, #0
 80041a2:	bf8c      	ite	hi
 80041a4:	608b      	strhi	r3, [r1, #8]
 80041a6:	9301      	strls	r3, [sp, #4]
 80041a8:	680b      	ldr	r3, [r1, #0]
 80041aa:	4607      	mov	r7, r0
 80041ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80041b0:	f848 3b1c 	str.w	r3, [r8], #28
 80041b4:	460c      	mov	r4, r1
 80041b6:	4645      	mov	r5, r8
 80041b8:	465a      	mov	r2, fp
 80041ba:	46d9      	mov	r9, fp
 80041bc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80041c0:	f8cd b008 	str.w	fp, [sp, #8]
 80041c4:	68a1      	ldr	r1, [r4, #8]
 80041c6:	b181      	cbz	r1, 80041ea <_scanf_float+0x72>
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b49      	cmp	r3, #73	; 0x49
 80041ce:	d071      	beq.n	80042b4 <_scanf_float+0x13c>
 80041d0:	d84d      	bhi.n	800426e <_scanf_float+0xf6>
 80041d2:	2b39      	cmp	r3, #57	; 0x39
 80041d4:	d840      	bhi.n	8004258 <_scanf_float+0xe0>
 80041d6:	2b31      	cmp	r3, #49	; 0x31
 80041d8:	f080 8088 	bcs.w	80042ec <_scanf_float+0x174>
 80041dc:	2b2d      	cmp	r3, #45	; 0x2d
 80041de:	f000 8090 	beq.w	8004302 <_scanf_float+0x18a>
 80041e2:	d815      	bhi.n	8004210 <_scanf_float+0x98>
 80041e4:	2b2b      	cmp	r3, #43	; 0x2b
 80041e6:	f000 808c 	beq.w	8004302 <_scanf_float+0x18a>
 80041ea:	f1b9 0f00 	cmp.w	r9, #0
 80041ee:	d003      	beq.n	80041f8 <_scanf_float+0x80>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	3a01      	subs	r2, #1
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	f200 80ea 	bhi.w	80043d4 <_scanf_float+0x25c>
 8004200:	4545      	cmp	r5, r8
 8004202:	f200 80dc 	bhi.w	80043be <_scanf_float+0x246>
 8004206:	2601      	movs	r6, #1
 8004208:	4630      	mov	r0, r6
 800420a:	b007      	add	sp, #28
 800420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004210:	2b2e      	cmp	r3, #46	; 0x2e
 8004212:	f000 809f 	beq.w	8004354 <_scanf_float+0x1dc>
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d1e7      	bne.n	80041ea <_scanf_float+0x72>
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004220:	d064      	beq.n	80042ec <_scanf_float+0x174>
 8004222:	9b01      	ldr	r3, [sp, #4]
 8004224:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004228:	6020      	str	r0, [r4, #0]
 800422a:	f109 0901 	add.w	r9, r9, #1
 800422e:	b11b      	cbz	r3, 8004238 <_scanf_float+0xc0>
 8004230:	3b01      	subs	r3, #1
 8004232:	3101      	adds	r1, #1
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	60a1      	str	r1, [r4, #8]
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	3301      	adds	r3, #1
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	6873      	ldr	r3, [r6, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	6073      	str	r3, [r6, #4]
 800424c:	f340 80ac 	ble.w	80043a8 <_scanf_float+0x230>
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	e7b5      	b.n	80041c4 <_scanf_float+0x4c>
 8004258:	2b45      	cmp	r3, #69	; 0x45
 800425a:	f000 8085 	beq.w	8004368 <_scanf_float+0x1f0>
 800425e:	2b46      	cmp	r3, #70	; 0x46
 8004260:	d06a      	beq.n	8004338 <_scanf_float+0x1c0>
 8004262:	2b41      	cmp	r3, #65	; 0x41
 8004264:	d1c1      	bne.n	80041ea <_scanf_float+0x72>
 8004266:	2a01      	cmp	r2, #1
 8004268:	d1bf      	bne.n	80041ea <_scanf_float+0x72>
 800426a:	2202      	movs	r2, #2
 800426c:	e046      	b.n	80042fc <_scanf_float+0x184>
 800426e:	2b65      	cmp	r3, #101	; 0x65
 8004270:	d07a      	beq.n	8004368 <_scanf_float+0x1f0>
 8004272:	d818      	bhi.n	80042a6 <_scanf_float+0x12e>
 8004274:	2b54      	cmp	r3, #84	; 0x54
 8004276:	d066      	beq.n	8004346 <_scanf_float+0x1ce>
 8004278:	d811      	bhi.n	800429e <_scanf_float+0x126>
 800427a:	2b4e      	cmp	r3, #78	; 0x4e
 800427c:	d1b5      	bne.n	80041ea <_scanf_float+0x72>
 800427e:	2a00      	cmp	r2, #0
 8004280:	d146      	bne.n	8004310 <_scanf_float+0x198>
 8004282:	f1b9 0f00 	cmp.w	r9, #0
 8004286:	d145      	bne.n	8004314 <_scanf_float+0x19c>
 8004288:	6821      	ldr	r1, [r4, #0]
 800428a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800428e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004292:	d13f      	bne.n	8004314 <_scanf_float+0x19c>
 8004294:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004298:	6021      	str	r1, [r4, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	e02e      	b.n	80042fc <_scanf_float+0x184>
 800429e:	2b59      	cmp	r3, #89	; 0x59
 80042a0:	d01e      	beq.n	80042e0 <_scanf_float+0x168>
 80042a2:	2b61      	cmp	r3, #97	; 0x61
 80042a4:	e7de      	b.n	8004264 <_scanf_float+0xec>
 80042a6:	2b6e      	cmp	r3, #110	; 0x6e
 80042a8:	d0e9      	beq.n	800427e <_scanf_float+0x106>
 80042aa:	d815      	bhi.n	80042d8 <_scanf_float+0x160>
 80042ac:	2b66      	cmp	r3, #102	; 0x66
 80042ae:	d043      	beq.n	8004338 <_scanf_float+0x1c0>
 80042b0:	2b69      	cmp	r3, #105	; 0x69
 80042b2:	d19a      	bne.n	80041ea <_scanf_float+0x72>
 80042b4:	f1bb 0f00 	cmp.w	fp, #0
 80042b8:	d138      	bne.n	800432c <_scanf_float+0x1b4>
 80042ba:	f1b9 0f00 	cmp.w	r9, #0
 80042be:	d197      	bne.n	80041f0 <_scanf_float+0x78>
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80042c6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80042ca:	d195      	bne.n	80041f8 <_scanf_float+0x80>
 80042cc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80042d0:	6021      	str	r1, [r4, #0]
 80042d2:	f04f 0b01 	mov.w	fp, #1
 80042d6:	e011      	b.n	80042fc <_scanf_float+0x184>
 80042d8:	2b74      	cmp	r3, #116	; 0x74
 80042da:	d034      	beq.n	8004346 <_scanf_float+0x1ce>
 80042dc:	2b79      	cmp	r3, #121	; 0x79
 80042de:	d184      	bne.n	80041ea <_scanf_float+0x72>
 80042e0:	f1bb 0f07 	cmp.w	fp, #7
 80042e4:	d181      	bne.n	80041ea <_scanf_float+0x72>
 80042e6:	f04f 0b08 	mov.w	fp, #8
 80042ea:	e007      	b.n	80042fc <_scanf_float+0x184>
 80042ec:	eb12 0f0b 	cmn.w	r2, fp
 80042f0:	f47f af7b 	bne.w	80041ea <_scanf_float+0x72>
 80042f4:	6821      	ldr	r1, [r4, #0]
 80042f6:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80042fa:	6021      	str	r1, [r4, #0]
 80042fc:	702b      	strb	r3, [r5, #0]
 80042fe:	3501      	adds	r5, #1
 8004300:	e79a      	b.n	8004238 <_scanf_float+0xc0>
 8004302:	6821      	ldr	r1, [r4, #0]
 8004304:	0608      	lsls	r0, r1, #24
 8004306:	f57f af70 	bpl.w	80041ea <_scanf_float+0x72>
 800430a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800430e:	e7f4      	b.n	80042fa <_scanf_float+0x182>
 8004310:	2a02      	cmp	r2, #2
 8004312:	d047      	beq.n	80043a4 <_scanf_float+0x22c>
 8004314:	f1bb 0f01 	cmp.w	fp, #1
 8004318:	d003      	beq.n	8004322 <_scanf_float+0x1aa>
 800431a:	f1bb 0f04 	cmp.w	fp, #4
 800431e:	f47f af64 	bne.w	80041ea <_scanf_float+0x72>
 8004322:	f10b 0b01 	add.w	fp, fp, #1
 8004326:	fa5f fb8b 	uxtb.w	fp, fp
 800432a:	e7e7      	b.n	80042fc <_scanf_float+0x184>
 800432c:	f1bb 0f03 	cmp.w	fp, #3
 8004330:	d0f7      	beq.n	8004322 <_scanf_float+0x1aa>
 8004332:	f1bb 0f05 	cmp.w	fp, #5
 8004336:	e7f2      	b.n	800431e <_scanf_float+0x1a6>
 8004338:	f1bb 0f02 	cmp.w	fp, #2
 800433c:	f47f af55 	bne.w	80041ea <_scanf_float+0x72>
 8004340:	f04f 0b03 	mov.w	fp, #3
 8004344:	e7da      	b.n	80042fc <_scanf_float+0x184>
 8004346:	f1bb 0f06 	cmp.w	fp, #6
 800434a:	f47f af4e 	bne.w	80041ea <_scanf_float+0x72>
 800434e:	f04f 0b07 	mov.w	fp, #7
 8004352:	e7d3      	b.n	80042fc <_scanf_float+0x184>
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	0588      	lsls	r0, r1, #22
 8004358:	f57f af47 	bpl.w	80041ea <_scanf_float+0x72>
 800435c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004360:	6021      	str	r1, [r4, #0]
 8004362:	f8cd 9008 	str.w	r9, [sp, #8]
 8004366:	e7c9      	b.n	80042fc <_scanf_float+0x184>
 8004368:	6821      	ldr	r1, [r4, #0]
 800436a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800436e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004372:	d006      	beq.n	8004382 <_scanf_float+0x20a>
 8004374:	0548      	lsls	r0, r1, #21
 8004376:	f57f af38 	bpl.w	80041ea <_scanf_float+0x72>
 800437a:	f1b9 0f00 	cmp.w	r9, #0
 800437e:	f43f af3b 	beq.w	80041f8 <_scanf_float+0x80>
 8004382:	0588      	lsls	r0, r1, #22
 8004384:	bf58      	it	pl
 8004386:	9802      	ldrpl	r0, [sp, #8]
 8004388:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800438c:	bf58      	it	pl
 800438e:	eba9 0000 	subpl.w	r0, r9, r0
 8004392:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004396:	bf58      	it	pl
 8004398:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800439c:	6021      	str	r1, [r4, #0]
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	e7ab      	b.n	80042fc <_scanf_float+0x184>
 80043a4:	2203      	movs	r2, #3
 80043a6:	e7a9      	b.n	80042fc <_scanf_float+0x184>
 80043a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043ac:	4631      	mov	r1, r6
 80043ae:	4638      	mov	r0, r7
 80043b0:	9205      	str	r2, [sp, #20]
 80043b2:	4798      	blx	r3
 80043b4:	9a05      	ldr	r2, [sp, #20]
 80043b6:	2800      	cmp	r0, #0
 80043b8:	f43f af04 	beq.w	80041c4 <_scanf_float+0x4c>
 80043bc:	e715      	b.n	80041ea <_scanf_float+0x72>
 80043be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043c2:	4632      	mov	r2, r6
 80043c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043c8:	4638      	mov	r0, r7
 80043ca:	4798      	blx	r3
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	e715      	b.n	8004200 <_scanf_float+0x88>
 80043d4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d80a      	bhi.n	80043f2 <_scanf_float+0x27a>
 80043dc:	f1bb 0f02 	cmp.w	fp, #2
 80043e0:	d967      	bls.n	80044b2 <_scanf_float+0x33a>
 80043e2:	f1ab 0b03 	sub.w	fp, fp, #3
 80043e6:	fa5f fb8b 	uxtb.w	fp, fp
 80043ea:	eba5 0b0b 	sub.w	fp, r5, fp
 80043ee:	455d      	cmp	r5, fp
 80043f0:	d14a      	bne.n	8004488 <_scanf_float+0x310>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	05da      	lsls	r2, r3, #23
 80043f6:	d51f      	bpl.n	8004438 <_scanf_float+0x2c0>
 80043f8:	055b      	lsls	r3, r3, #21
 80043fa:	d467      	bmi.n	80044cc <_scanf_float+0x354>
 80043fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	2965      	cmp	r1, #101	; 0x65
 8004404:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004408:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	d00d      	beq.n	800442c <_scanf_float+0x2b4>
 8004410:	2945      	cmp	r1, #69	; 0x45
 8004412:	d00b      	beq.n	800442c <_scanf_float+0x2b4>
 8004414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004418:	4632      	mov	r2, r6
 800441a:	4638      	mov	r0, r7
 800441c:	4798      	blx	r3
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004424:	3b01      	subs	r3, #1
 8004426:	f1a5 0b02 	sub.w	fp, r5, #2
 800442a:	6123      	str	r3, [r4, #16]
 800442c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004430:	4632      	mov	r2, r6
 8004432:	4638      	mov	r0, r7
 8004434:	4798      	blx	r3
 8004436:	465d      	mov	r5, fp
 8004438:	6826      	ldr	r6, [r4, #0]
 800443a:	f016 0610 	ands.w	r6, r6, #16
 800443e:	d176      	bne.n	800452e <_scanf_float+0x3b6>
 8004440:	702e      	strb	r6, [r5, #0]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d141      	bne.n	80044d2 <_scanf_float+0x35a>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	eba9 0303 	sub.w	r3, r9, r3
 8004454:	425a      	negs	r2, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d148      	bne.n	80044ec <_scanf_float+0x374>
 800445a:	4641      	mov	r1, r8
 800445c:	2200      	movs	r2, #0
 800445e:	4638      	mov	r0, r7
 8004460:	f000 feb2 	bl	80051c8 <_strtod_r>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	4680      	mov	r8, r0
 8004468:	f015 0f02 	tst.w	r5, #2
 800446c:	4689      	mov	r9, r1
 800446e:	f8da 3000 	ldr.w	r3, [sl]
 8004472:	d046      	beq.n	8004502 <_scanf_float+0x38a>
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	f8ca 2000 	str.w	r2, [sl]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	e9c3 8900 	strd	r8, r9, [r3]
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60e3      	str	r3, [r4, #12]
 8004486:	e6bf      	b.n	8004208 <_scanf_float+0x90>
 8004488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800448c:	4632      	mov	r2, r6
 800448e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004492:	4638      	mov	r0, r7
 8004494:	4798      	blx	r3
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	6123      	str	r3, [r4, #16]
 800449c:	e7a7      	b.n	80043ee <_scanf_float+0x276>
 800449e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044a2:	4632      	mov	r2, r6
 80044a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80044a8:	4638      	mov	r0, r7
 80044aa:	4798      	blx	r3
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	4545      	cmp	r5, r8
 80044b4:	d8f3      	bhi.n	800449e <_scanf_float+0x326>
 80044b6:	e6a6      	b.n	8004206 <_scanf_float+0x8e>
 80044b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044bc:	4632      	mov	r2, r6
 80044be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80044c2:	4638      	mov	r0, r7
 80044c4:	4798      	blx	r3
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	4545      	cmp	r5, r8
 80044ce:	d8f3      	bhi.n	80044b8 <_scanf_float+0x340>
 80044d0:	e699      	b.n	8004206 <_scanf_float+0x8e>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0c0      	beq.n	800445a <_scanf_float+0x2e2>
 80044d8:	9904      	ldr	r1, [sp, #16]
 80044da:	230a      	movs	r3, #10
 80044dc:	4632      	mov	r2, r6
 80044de:	3101      	adds	r1, #1
 80044e0:	4638      	mov	r0, r7
 80044e2:	f000 fefd 	bl	80052e0 <_strtol_r>
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	9d04      	ldr	r5, [sp, #16]
 80044ea:	1ac2      	subs	r2, r0, r3
 80044ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80044f0:	429d      	cmp	r5, r3
 80044f2:	bf28      	it	cs
 80044f4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <_scanf_float+0x3bc>)
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f820 	bl	8004540 <siprintf>
 8004500:	e7ab      	b.n	800445a <_scanf_float+0x2e2>
 8004502:	1d1f      	adds	r7, r3, #4
 8004504:	f015 0504 	ands.w	r5, r5, #4
 8004508:	f8ca 7000 	str.w	r7, [sl]
 800450c:	d1b5      	bne.n	800447a <_scanf_float+0x302>
 800450e:	681f      	ldr	r7, [r3, #0]
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	f7fc fa7a 	bl	8000a0c <__aeabi_dcmpun>
 8004518:	b120      	cbz	r0, 8004524 <_scanf_float+0x3ac>
 800451a:	4628      	mov	r0, r5
 800451c:	f000 f80c 	bl	8004538 <nanf>
 8004520:	6038      	str	r0, [r7, #0]
 8004522:	e7ad      	b.n	8004480 <_scanf_float+0x308>
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fc face 	bl	8000ac8 <__aeabi_d2f>
 800452c:	e7f8      	b.n	8004520 <_scanf_float+0x3a8>
 800452e:	2600      	movs	r6, #0
 8004530:	e66a      	b.n	8004208 <_scanf_float+0x90>
 8004532:	bf00      	nop
 8004534:	080073f0 	.word	0x080073f0

08004538 <nanf>:
 8004538:	4800      	ldr	r0, [pc, #0]	; (800453c <nanf+0x4>)
 800453a:	4770      	bx	lr
 800453c:	7fc00000 	.word	0x7fc00000

08004540 <siprintf>:
 8004540:	b40e      	push	{r1, r2, r3}
 8004542:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004546:	b500      	push	{lr}
 8004548:	b09c      	sub	sp, #112	; 0x70
 800454a:	ab1d      	add	r3, sp, #116	; 0x74
 800454c:	9002      	str	r0, [sp, #8]
 800454e:	9006      	str	r0, [sp, #24]
 8004550:	9107      	str	r1, [sp, #28]
 8004552:	9104      	str	r1, [sp, #16]
 8004554:	4808      	ldr	r0, [pc, #32]	; (8004578 <siprintf+0x38>)
 8004556:	4909      	ldr	r1, [pc, #36]	; (800457c <siprintf+0x3c>)
 8004558:	f853 2b04 	ldr.w	r2, [r3], #4
 800455c:	9105      	str	r1, [sp, #20]
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	a902      	add	r1, sp, #8
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	f002 fd86 	bl	8007074 <_svfiprintf_r>
 8004568:	2200      	movs	r2, #0
 800456a:	9b02      	ldr	r3, [sp, #8]
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	b01c      	add	sp, #112	; 0x70
 8004570:	f85d eb04 	ldr.w	lr, [sp], #4
 8004574:	b003      	add	sp, #12
 8004576:	4770      	bx	lr
 8004578:	2000000c 	.word	0x2000000c
 800457c:	ffff0208 	.word	0xffff0208

08004580 <sulp>:
 8004580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004584:	460f      	mov	r7, r1
 8004586:	4690      	mov	r8, r2
 8004588:	f002 fb38 	bl	8006bfc <__ulp>
 800458c:	4604      	mov	r4, r0
 800458e:	460d      	mov	r5, r1
 8004590:	f1b8 0f00 	cmp.w	r8, #0
 8004594:	d011      	beq.n	80045ba <sulp+0x3a>
 8004596:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800459a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dd0b      	ble.n	80045ba <sulp+0x3a>
 80045a2:	2400      	movs	r4, #0
 80045a4:	051b      	lsls	r3, r3, #20
 80045a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80045aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	f7fb ff91 	bl	80004d8 <__aeabi_dmul>
 80045b6:	4604      	mov	r4, r0
 80045b8:	460d      	mov	r5, r1
 80045ba:	4620      	mov	r0, r4
 80045bc:	4629      	mov	r1, r5
 80045be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c2:	0000      	movs	r0, r0
 80045c4:	0000      	movs	r0, r0
	...

080045c8 <_strtod_l>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	461f      	mov	r7, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	b0a1      	sub	sp, #132	; 0x84
 80045d2:	4683      	mov	fp, r0
 80045d4:	4638      	mov	r0, r7
 80045d6:	460e      	mov	r6, r1
 80045d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80045da:	931c      	str	r3, [sp, #112]	; 0x70
 80045dc:	f001 ffff 	bl	80065de <__localeconv_l>
 80045e0:	4680      	mov	r8, r0
 80045e2:	6800      	ldr	r0, [r0, #0]
 80045e4:	f7fb fdb4 	bl	8000150 <strlen>
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	4604      	mov	r4, r0
 80045ee:	f04f 0a00 	mov.w	sl, #0
 80045f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80045f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	2a0d      	cmp	r2, #13
 80045fa:	d832      	bhi.n	8004662 <_strtod_l+0x9a>
 80045fc:	2a09      	cmp	r2, #9
 80045fe:	d236      	bcs.n	800466e <_strtod_l+0xa6>
 8004600:	2a00      	cmp	r2, #0
 8004602:	d03e      	beq.n	8004682 <_strtod_l+0xba>
 8004604:	2300      	movs	r3, #0
 8004606:	930d      	str	r3, [sp, #52]	; 0x34
 8004608:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800460a:	782b      	ldrb	r3, [r5, #0]
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	f040 80ac 	bne.w	800476a <_strtod_l+0x1a2>
 8004612:	786b      	ldrb	r3, [r5, #1]
 8004614:	2b58      	cmp	r3, #88	; 0x58
 8004616:	d001      	beq.n	800461c <_strtod_l+0x54>
 8004618:	2b78      	cmp	r3, #120	; 0x78
 800461a:	d167      	bne.n	80046ec <_strtod_l+0x124>
 800461c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800461e:	9702      	str	r7, [sp, #8]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	ab1c      	add	r3, sp, #112	; 0x70
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4a89      	ldr	r2, [pc, #548]	; (800484c <_strtod_l+0x284>)
 8004628:	ab1d      	add	r3, sp, #116	; 0x74
 800462a:	a91b      	add	r1, sp, #108	; 0x6c
 800462c:	4658      	mov	r0, fp
 800462e:	f001 fcfb 	bl	8006028 <__gethex>
 8004632:	f010 0407 	ands.w	r4, r0, #7
 8004636:	4606      	mov	r6, r0
 8004638:	d005      	beq.n	8004646 <_strtod_l+0x7e>
 800463a:	2c06      	cmp	r4, #6
 800463c:	d12b      	bne.n	8004696 <_strtod_l+0xce>
 800463e:	2300      	movs	r3, #0
 8004640:	3501      	adds	r5, #1
 8004642:	951b      	str	r5, [sp, #108]	; 0x6c
 8004644:	930d      	str	r3, [sp, #52]	; 0x34
 8004646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 85a6 	bne.w	800519a <_strtod_l+0xbd2>
 800464e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004650:	b1e3      	cbz	r3, 800468c <_strtod_l+0xc4>
 8004652:	464a      	mov	r2, r9
 8004654:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	b021      	add	sp, #132	; 0x84
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	2a2b      	cmp	r2, #43	; 0x2b
 8004664:	d015      	beq.n	8004692 <_strtod_l+0xca>
 8004666:	2a2d      	cmp	r2, #45	; 0x2d
 8004668:	d004      	beq.n	8004674 <_strtod_l+0xac>
 800466a:	2a20      	cmp	r2, #32
 800466c:	d1ca      	bne.n	8004604 <_strtod_l+0x3c>
 800466e:	3301      	adds	r3, #1
 8004670:	931b      	str	r3, [sp, #108]	; 0x6c
 8004672:	e7bf      	b.n	80045f4 <_strtod_l+0x2c>
 8004674:	2201      	movs	r2, #1
 8004676:	920d      	str	r2, [sp, #52]	; 0x34
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	921b      	str	r2, [sp, #108]	; 0x6c
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1c2      	bne.n	8004608 <_strtod_l+0x40>
 8004682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004684:	961b      	str	r6, [sp, #108]	; 0x6c
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 8585 	bne.w	8005196 <_strtod_l+0xbce>
 800468c:	464a      	mov	r2, r9
 800468e:	4653      	mov	r3, sl
 8004690:	e7e2      	b.n	8004658 <_strtod_l+0x90>
 8004692:	2200      	movs	r2, #0
 8004694:	e7ef      	b.n	8004676 <_strtod_l+0xae>
 8004696:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004698:	b13a      	cbz	r2, 80046aa <_strtod_l+0xe2>
 800469a:	2135      	movs	r1, #53	; 0x35
 800469c:	a81e      	add	r0, sp, #120	; 0x78
 800469e:	f002 fba0 	bl	8006de2 <__copybits>
 80046a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046a4:	4658      	mov	r0, fp
 80046a6:	f002 f812 	bl	80066ce <_Bfree>
 80046aa:	3c01      	subs	r4, #1
 80046ac:	2c04      	cmp	r4, #4
 80046ae:	d806      	bhi.n	80046be <_strtod_l+0xf6>
 80046b0:	e8df f004 	tbb	[pc, r4]
 80046b4:	1714030a 	.word	0x1714030a
 80046b8:	0a          	.byte	0x0a
 80046b9:	00          	.byte	0x00
 80046ba:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80046be:	0731      	lsls	r1, r6, #28
 80046c0:	d5c1      	bpl.n	8004646 <_strtod_l+0x7e>
 80046c2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80046c6:	e7be      	b.n	8004646 <_strtod_l+0x7e>
 80046c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80046ca:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80046ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80046d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046d6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80046da:	e7f0      	b.n	80046be <_strtod_l+0xf6>
 80046dc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004850 <_strtod_l+0x288>
 80046e0:	e7ed      	b.n	80046be <_strtod_l+0xf6>
 80046e2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80046e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80046ea:	e7e8      	b.n	80046be <_strtod_l+0xf6>
 80046ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d0f9      	beq.n	80046ec <_strtod_l+0x124>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0a4      	beq.n	8004646 <_strtod_l+0x7e>
 80046fc:	2301      	movs	r3, #1
 80046fe:	2500      	movs	r5, #0
 8004700:	220a      	movs	r2, #10
 8004702:	9307      	str	r3, [sp, #28]
 8004704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004706:	9506      	str	r5, [sp, #24]
 8004708:	9308      	str	r3, [sp, #32]
 800470a:	9504      	str	r5, [sp, #16]
 800470c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800470e:	7807      	ldrb	r7, [r0, #0]
 8004710:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004714:	b2d9      	uxtb	r1, r3
 8004716:	2909      	cmp	r1, #9
 8004718:	d929      	bls.n	800476e <_strtod_l+0x1a6>
 800471a:	4622      	mov	r2, r4
 800471c:	f8d8 1000 	ldr.w	r1, [r8]
 8004720:	f002 fdb0 	bl	8007284 <strncmp>
 8004724:	2800      	cmp	r0, #0
 8004726:	d031      	beq.n	800478c <_strtod_l+0x1c4>
 8004728:	2000      	movs	r0, #0
 800472a:	463b      	mov	r3, r7
 800472c:	4602      	mov	r2, r0
 800472e:	9c04      	ldr	r4, [sp, #16]
 8004730:	9005      	str	r0, [sp, #20]
 8004732:	2b65      	cmp	r3, #101	; 0x65
 8004734:	d001      	beq.n	800473a <_strtod_l+0x172>
 8004736:	2b45      	cmp	r3, #69	; 0x45
 8004738:	d114      	bne.n	8004764 <_strtod_l+0x19c>
 800473a:	b924      	cbnz	r4, 8004746 <_strtod_l+0x17e>
 800473c:	b910      	cbnz	r0, 8004744 <_strtod_l+0x17c>
 800473e:	9b07      	ldr	r3, [sp, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d09e      	beq.n	8004682 <_strtod_l+0xba>
 8004744:	2400      	movs	r4, #0
 8004746:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004748:	1c73      	adds	r3, r6, #1
 800474a:	931b      	str	r3, [sp, #108]	; 0x6c
 800474c:	7873      	ldrb	r3, [r6, #1]
 800474e:	2b2b      	cmp	r3, #43	; 0x2b
 8004750:	d078      	beq.n	8004844 <_strtod_l+0x27c>
 8004752:	2b2d      	cmp	r3, #45	; 0x2d
 8004754:	d070      	beq.n	8004838 <_strtod_l+0x270>
 8004756:	f04f 0c00 	mov.w	ip, #0
 800475a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800475e:	2f09      	cmp	r7, #9
 8004760:	d97c      	bls.n	800485c <_strtod_l+0x294>
 8004762:	961b      	str	r6, [sp, #108]	; 0x6c
 8004764:	f04f 0e00 	mov.w	lr, #0
 8004768:	e09a      	b.n	80048a0 <_strtod_l+0x2d8>
 800476a:	2300      	movs	r3, #0
 800476c:	e7c7      	b.n	80046fe <_strtod_l+0x136>
 800476e:	9904      	ldr	r1, [sp, #16]
 8004770:	3001      	adds	r0, #1
 8004772:	2908      	cmp	r1, #8
 8004774:	bfd7      	itett	le
 8004776:	9906      	ldrle	r1, [sp, #24]
 8004778:	fb02 3505 	mlagt	r5, r2, r5, r3
 800477c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004780:	9306      	strle	r3, [sp, #24]
 8004782:	9b04      	ldr	r3, [sp, #16]
 8004784:	901b      	str	r0, [sp, #108]	; 0x6c
 8004786:	3301      	adds	r3, #1
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	e7bf      	b.n	800470c <_strtod_l+0x144>
 800478c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800478e:	191a      	adds	r2, r3, r4
 8004790:	921b      	str	r2, [sp, #108]	; 0x6c
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	5d1b      	ldrb	r3, [r3, r4]
 8004796:	2a00      	cmp	r2, #0
 8004798:	d037      	beq.n	800480a <_strtod_l+0x242>
 800479a:	4602      	mov	r2, r0
 800479c:	9c04      	ldr	r4, [sp, #16]
 800479e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80047a2:	2909      	cmp	r1, #9
 80047a4:	d913      	bls.n	80047ce <_strtod_l+0x206>
 80047a6:	2101      	movs	r1, #1
 80047a8:	9105      	str	r1, [sp, #20]
 80047aa:	e7c2      	b.n	8004732 <_strtod_l+0x16a>
 80047ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047ae:	3001      	adds	r0, #1
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d0f8      	beq.n	80047ac <_strtod_l+0x1e4>
 80047ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80047be:	2a08      	cmp	r2, #8
 80047c0:	f200 84f0 	bhi.w	80051a4 <_strtod_l+0xbdc>
 80047c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80047c6:	9208      	str	r2, [sp, #32]
 80047c8:	4602      	mov	r2, r0
 80047ca:	2000      	movs	r0, #0
 80047cc:	4604      	mov	r4, r0
 80047ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80047d2:	f100 0101 	add.w	r1, r0, #1
 80047d6:	d012      	beq.n	80047fe <_strtod_l+0x236>
 80047d8:	440a      	add	r2, r1
 80047da:	270a      	movs	r7, #10
 80047dc:	4621      	mov	r1, r4
 80047de:	eb00 0c04 	add.w	ip, r0, r4
 80047e2:	458c      	cmp	ip, r1
 80047e4:	d113      	bne.n	800480e <_strtod_l+0x246>
 80047e6:	1821      	adds	r1, r4, r0
 80047e8:	2908      	cmp	r1, #8
 80047ea:	f104 0401 	add.w	r4, r4, #1
 80047ee:	4404      	add	r4, r0
 80047f0:	dc19      	bgt.n	8004826 <_strtod_l+0x25e>
 80047f2:	210a      	movs	r1, #10
 80047f4:	9b06      	ldr	r3, [sp, #24]
 80047f6:	fb01 e303 	mla	r3, r1, r3, lr
 80047fa:	9306      	str	r3, [sp, #24]
 80047fc:	2100      	movs	r1, #0
 80047fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004800:	1c58      	adds	r0, r3, #1
 8004802:	901b      	str	r0, [sp, #108]	; 0x6c
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	4608      	mov	r0, r1
 8004808:	e7c9      	b.n	800479e <_strtod_l+0x1d6>
 800480a:	9804      	ldr	r0, [sp, #16]
 800480c:	e7d3      	b.n	80047b6 <_strtod_l+0x1ee>
 800480e:	2908      	cmp	r1, #8
 8004810:	f101 0101 	add.w	r1, r1, #1
 8004814:	dc03      	bgt.n	800481e <_strtod_l+0x256>
 8004816:	9b06      	ldr	r3, [sp, #24]
 8004818:	437b      	muls	r3, r7
 800481a:	9306      	str	r3, [sp, #24]
 800481c:	e7e1      	b.n	80047e2 <_strtod_l+0x21a>
 800481e:	2910      	cmp	r1, #16
 8004820:	bfd8      	it	le
 8004822:	437d      	mulle	r5, r7
 8004824:	e7dd      	b.n	80047e2 <_strtod_l+0x21a>
 8004826:	2c10      	cmp	r4, #16
 8004828:	bfdc      	itt	le
 800482a:	210a      	movle	r1, #10
 800482c:	fb01 e505 	mlale	r5, r1, r5, lr
 8004830:	e7e4      	b.n	80047fc <_strtod_l+0x234>
 8004832:	2301      	movs	r3, #1
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	e781      	b.n	800473c <_strtod_l+0x174>
 8004838:	f04f 0c01 	mov.w	ip, #1
 800483c:	1cb3      	adds	r3, r6, #2
 800483e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004840:	78b3      	ldrb	r3, [r6, #2]
 8004842:	e78a      	b.n	800475a <_strtod_l+0x192>
 8004844:	f04f 0c00 	mov.w	ip, #0
 8004848:	e7f8      	b.n	800483c <_strtod_l+0x274>
 800484a:	bf00      	nop
 800484c:	080073f8 	.word	0x080073f8
 8004850:	7ff00000 	.word	0x7ff00000
 8004854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004856:	1c5f      	adds	r7, r3, #1
 8004858:	971b      	str	r7, [sp, #108]	; 0x6c
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	d0f9      	beq.n	8004854 <_strtod_l+0x28c>
 8004860:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004864:	2f08      	cmp	r7, #8
 8004866:	f63f af7d 	bhi.w	8004764 <_strtod_l+0x19c>
 800486a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800486e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004874:	1c5f      	adds	r7, r3, #1
 8004876:	971b      	str	r7, [sp, #108]	; 0x6c
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800487e:	f1b8 0f09 	cmp.w	r8, #9
 8004882:	d937      	bls.n	80048f4 <_strtod_l+0x32c>
 8004884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004886:	1a7f      	subs	r7, r7, r1
 8004888:	2f08      	cmp	r7, #8
 800488a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800488e:	dc37      	bgt.n	8004900 <_strtod_l+0x338>
 8004890:	45be      	cmp	lr, r7
 8004892:	bfa8      	it	ge
 8004894:	46be      	movge	lr, r7
 8004896:	f1bc 0f00 	cmp.w	ip, #0
 800489a:	d001      	beq.n	80048a0 <_strtod_l+0x2d8>
 800489c:	f1ce 0e00 	rsb	lr, lr, #0
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	d151      	bne.n	8004948 <_strtod_l+0x380>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f47f aece 	bne.w	8004646 <_strtod_l+0x7e>
 80048aa:	9a07      	ldr	r2, [sp, #28]
 80048ac:	2a00      	cmp	r2, #0
 80048ae:	f47f aeca 	bne.w	8004646 <_strtod_l+0x7e>
 80048b2:	9a05      	ldr	r2, [sp, #20]
 80048b4:	2a00      	cmp	r2, #0
 80048b6:	f47f aee4 	bne.w	8004682 <_strtod_l+0xba>
 80048ba:	2b4e      	cmp	r3, #78	; 0x4e
 80048bc:	d027      	beq.n	800490e <_strtod_l+0x346>
 80048be:	dc21      	bgt.n	8004904 <_strtod_l+0x33c>
 80048c0:	2b49      	cmp	r3, #73	; 0x49
 80048c2:	f47f aede 	bne.w	8004682 <_strtod_l+0xba>
 80048c6:	49a4      	ldr	r1, [pc, #656]	; (8004b58 <_strtod_l+0x590>)
 80048c8:	a81b      	add	r0, sp, #108	; 0x6c
 80048ca:	f001 fde1 	bl	8006490 <__match>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f43f aed7 	beq.w	8004682 <_strtod_l+0xba>
 80048d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048d6:	49a1      	ldr	r1, [pc, #644]	; (8004b5c <_strtod_l+0x594>)
 80048d8:	3b01      	subs	r3, #1
 80048da:	a81b      	add	r0, sp, #108	; 0x6c
 80048dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80048de:	f001 fdd7 	bl	8006490 <__match>
 80048e2:	b910      	cbnz	r0, 80048ea <_strtod_l+0x322>
 80048e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048e6:	3301      	adds	r3, #1
 80048e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80048ea:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004b70 <_strtod_l+0x5a8>
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	e6a8      	b.n	8004646 <_strtod_l+0x7e>
 80048f4:	210a      	movs	r1, #10
 80048f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80048fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80048fe:	e7b8      	b.n	8004872 <_strtod_l+0x2aa>
 8004900:	46be      	mov	lr, r7
 8004902:	e7c8      	b.n	8004896 <_strtod_l+0x2ce>
 8004904:	2b69      	cmp	r3, #105	; 0x69
 8004906:	d0de      	beq.n	80048c6 <_strtod_l+0x2fe>
 8004908:	2b6e      	cmp	r3, #110	; 0x6e
 800490a:	f47f aeba 	bne.w	8004682 <_strtod_l+0xba>
 800490e:	4994      	ldr	r1, [pc, #592]	; (8004b60 <_strtod_l+0x598>)
 8004910:	a81b      	add	r0, sp, #108	; 0x6c
 8004912:	f001 fdbd 	bl	8006490 <__match>
 8004916:	2800      	cmp	r0, #0
 8004918:	f43f aeb3 	beq.w	8004682 <_strtod_l+0xba>
 800491c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b28      	cmp	r3, #40	; 0x28
 8004922:	d10e      	bne.n	8004942 <_strtod_l+0x37a>
 8004924:	aa1e      	add	r2, sp, #120	; 0x78
 8004926:	498f      	ldr	r1, [pc, #572]	; (8004b64 <_strtod_l+0x59c>)
 8004928:	a81b      	add	r0, sp, #108	; 0x6c
 800492a:	f001 fdc5 	bl	80064b8 <__hexnan>
 800492e:	2805      	cmp	r0, #5
 8004930:	d107      	bne.n	8004942 <_strtod_l+0x37a>
 8004932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004934:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004938:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800493c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004940:	e681      	b.n	8004646 <_strtod_l+0x7e>
 8004942:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004b78 <_strtod_l+0x5b0>
 8004946:	e7d2      	b.n	80048ee <_strtod_l+0x326>
 8004948:	ebae 0302 	sub.w	r3, lr, r2
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	9806      	ldr	r0, [sp, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf08      	it	eq
 8004956:	4623      	moveq	r3, r4
 8004958:	2c10      	cmp	r4, #16
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	46a0      	mov	r8, r4
 800495e:	bfa8      	it	ge
 8004960:	f04f 0810 	movge.w	r8, #16
 8004964:	f7fb fd3e 	bl	80003e4 <__aeabi_ui2d>
 8004968:	2c09      	cmp	r4, #9
 800496a:	4681      	mov	r9, r0
 800496c:	468a      	mov	sl, r1
 800496e:	dc13      	bgt.n	8004998 <_strtod_l+0x3d0>
 8004970:	9b07      	ldr	r3, [sp, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f43f ae67 	beq.w	8004646 <_strtod_l+0x7e>
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	dd7e      	ble.n	8004a7a <_strtod_l+0x4b2>
 800497c:	2b16      	cmp	r3, #22
 800497e:	dc65      	bgt.n	8004a4c <_strtod_l+0x484>
 8004980:	4a79      	ldr	r2, [pc, #484]	; (8004b68 <_strtod_l+0x5a0>)
 8004982:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004986:	464a      	mov	r2, r9
 8004988:	e9de 0100 	ldrd	r0, r1, [lr]
 800498c:	4653      	mov	r3, sl
 800498e:	f7fb fda3 	bl	80004d8 <__aeabi_dmul>
 8004992:	4681      	mov	r9, r0
 8004994:	468a      	mov	sl, r1
 8004996:	e656      	b.n	8004646 <_strtod_l+0x7e>
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <_strtod_l+0x5a0>)
 800499a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800499e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80049a2:	f7fb fd99 	bl	80004d8 <__aeabi_dmul>
 80049a6:	4606      	mov	r6, r0
 80049a8:	4628      	mov	r0, r5
 80049aa:	460f      	mov	r7, r1
 80049ac:	f7fb fd1a 	bl	80003e4 <__aeabi_ui2d>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4630      	mov	r0, r6
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fb fbd8 	bl	800016c <__adddf3>
 80049bc:	2c0f      	cmp	r4, #15
 80049be:	4681      	mov	r9, r0
 80049c0:	468a      	mov	sl, r1
 80049c2:	ddd5      	ble.n	8004970 <_strtod_l+0x3a8>
 80049c4:	9b07      	ldr	r3, [sp, #28]
 80049c6:	eba4 0808 	sub.w	r8, r4, r8
 80049ca:	4498      	add	r8, r3
 80049cc:	f1b8 0f00 	cmp.w	r8, #0
 80049d0:	f340 809a 	ble.w	8004b08 <_strtod_l+0x540>
 80049d4:	f018 030f 	ands.w	r3, r8, #15
 80049d8:	d00a      	beq.n	80049f0 <_strtod_l+0x428>
 80049da:	4963      	ldr	r1, [pc, #396]	; (8004b68 <_strtod_l+0x5a0>)
 80049dc:	464a      	mov	r2, r9
 80049de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e6:	4653      	mov	r3, sl
 80049e8:	f7fb fd76 	bl	80004d8 <__aeabi_dmul>
 80049ec:	4681      	mov	r9, r0
 80049ee:	468a      	mov	sl, r1
 80049f0:	f038 080f 	bics.w	r8, r8, #15
 80049f4:	d077      	beq.n	8004ae6 <_strtod_l+0x51e>
 80049f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80049fa:	dd4b      	ble.n	8004a94 <_strtod_l+0x4cc>
 80049fc:	f04f 0800 	mov.w	r8, #0
 8004a00:	f8cd 8010 	str.w	r8, [sp, #16]
 8004a04:	f8cd 8020 	str.w	r8, [sp, #32]
 8004a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a0c:	2322      	movs	r3, #34	; 0x22
 8004a0e:	f04f 0900 	mov.w	r9, #0
 8004a12:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004b70 <_strtod_l+0x5a8>
 8004a16:	f8cb 3000 	str.w	r3, [fp]
 8004a1a:	9b08      	ldr	r3, [sp, #32]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f43f ae12 	beq.w	8004646 <_strtod_l+0x7e>
 8004a22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a24:	4658      	mov	r0, fp
 8004a26:	f001 fe52 	bl	80066ce <_Bfree>
 8004a2a:	9906      	ldr	r1, [sp, #24]
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f001 fe4e 	bl	80066ce <_Bfree>
 8004a32:	9904      	ldr	r1, [sp, #16]
 8004a34:	4658      	mov	r0, fp
 8004a36:	f001 fe4a 	bl	80066ce <_Bfree>
 8004a3a:	9908      	ldr	r1, [sp, #32]
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	f001 fe46 	bl	80066ce <_Bfree>
 8004a42:	4641      	mov	r1, r8
 8004a44:	4658      	mov	r0, fp
 8004a46:	f001 fe42 	bl	80066ce <_Bfree>
 8004a4a:	e5fc      	b.n	8004646 <_strtod_l+0x7e>
 8004a4c:	9a07      	ldr	r2, [sp, #28]
 8004a4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a52:	4293      	cmp	r3, r2
 8004a54:	dbb6      	blt.n	80049c4 <_strtod_l+0x3fc>
 8004a56:	4d44      	ldr	r5, [pc, #272]	; (8004b68 <_strtod_l+0x5a0>)
 8004a58:	f1c4 040f 	rsb	r4, r4, #15
 8004a5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a60:	464a      	mov	r2, r9
 8004a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a66:	4653      	mov	r3, sl
 8004a68:	f7fb fd36 	bl	80004d8 <__aeabi_dmul>
 8004a6c:	9b07      	ldr	r3, [sp, #28]
 8004a6e:	1b1c      	subs	r4, r3, r4
 8004a70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a78:	e789      	b.n	800498e <_strtod_l+0x3c6>
 8004a7a:	f113 0f16 	cmn.w	r3, #22
 8004a7e:	dba1      	blt.n	80049c4 <_strtod_l+0x3fc>
 8004a80:	4a39      	ldr	r2, [pc, #228]	; (8004b68 <_strtod_l+0x5a0>)
 8004a82:	4648      	mov	r0, r9
 8004a84:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004a88:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	f7fb fe4d 	bl	800072c <__aeabi_ddiv>
 8004a92:	e77e      	b.n	8004992 <_strtod_l+0x3ca>
 8004a94:	2300      	movs	r3, #0
 8004a96:	4648      	mov	r0, r9
 8004a98:	4651      	mov	r1, sl
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	4e33      	ldr	r6, [pc, #204]	; (8004b6c <_strtod_l+0x5a4>)
 8004a9e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004aa2:	f1b8 0f01 	cmp.w	r8, #1
 8004aa6:	dc21      	bgt.n	8004aec <_strtod_l+0x524>
 8004aa8:	b10b      	cbz	r3, 8004aae <_strtod_l+0x4e6>
 8004aaa:	4681      	mov	r9, r0
 8004aac:	468a      	mov	sl, r1
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <_strtod_l+0x5a4>)
 8004ab0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004ab4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004ab8:	464a      	mov	r2, r9
 8004aba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004abe:	4653      	mov	r3, sl
 8004ac0:	f7fb fd0a 	bl	80004d8 <__aeabi_dmul>
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <_strtod_l+0x5a8>)
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	400b      	ands	r3, r1
 8004aca:	492a      	ldr	r1, [pc, #168]	; (8004b74 <_strtod_l+0x5ac>)
 8004acc:	4681      	mov	r9, r0
 8004ace:	428b      	cmp	r3, r1
 8004ad0:	d894      	bhi.n	80049fc <_strtod_l+0x434>
 8004ad2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ad6:	428b      	cmp	r3, r1
 8004ad8:	bf86      	itte	hi
 8004ada:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8004ade:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004b7c <_strtod_l+0x5b4>
 8004ae2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	e07b      	b.n	8004be4 <_strtod_l+0x61c>
 8004aec:	f018 0f01 	tst.w	r8, #1
 8004af0:	d006      	beq.n	8004b00 <_strtod_l+0x538>
 8004af2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fced 	bl	80004d8 <__aeabi_dmul>
 8004afe:	2301      	movs	r3, #1
 8004b00:	3501      	adds	r5, #1
 8004b02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004b06:	e7cc      	b.n	8004aa2 <_strtod_l+0x4da>
 8004b08:	d0ed      	beq.n	8004ae6 <_strtod_l+0x51e>
 8004b0a:	f1c8 0800 	rsb	r8, r8, #0
 8004b0e:	f018 020f 	ands.w	r2, r8, #15
 8004b12:	d00a      	beq.n	8004b2a <_strtod_l+0x562>
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <_strtod_l+0x5a0>)
 8004b16:	4648      	mov	r0, r9
 8004b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fe03 	bl	800072c <__aeabi_ddiv>
 8004b26:	4681      	mov	r9, r0
 8004b28:	468a      	mov	sl, r1
 8004b2a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004b2e:	d0da      	beq.n	8004ae6 <_strtod_l+0x51e>
 8004b30:	f1b8 0f1f 	cmp.w	r8, #31
 8004b34:	dd24      	ble.n	8004b80 <_strtod_l+0x5b8>
 8004b36:	f04f 0800 	mov.w	r8, #0
 8004b3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004b3e:	f8cd 8020 	str.w	r8, [sp, #32]
 8004b42:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b46:	2322      	movs	r3, #34	; 0x22
 8004b48:	f04f 0900 	mov.w	r9, #0
 8004b4c:	f04f 0a00 	mov.w	sl, #0
 8004b50:	f8cb 3000 	str.w	r3, [fp]
 8004b54:	e761      	b.n	8004a1a <_strtod_l+0x452>
 8004b56:	bf00      	nop
 8004b58:	080073c1 	.word	0x080073c1
 8004b5c:	0800744b 	.word	0x0800744b
 8004b60:	080073c9 	.word	0x080073c9
 8004b64:	0800740c 	.word	0x0800740c
 8004b68:	08007488 	.word	0x08007488
 8004b6c:	08007460 	.word	0x08007460
 8004b70:	7ff00000 	.word	0x7ff00000
 8004b74:	7ca00000 	.word	0x7ca00000
 8004b78:	fff80000 	.word	0xfff80000
 8004b7c:	7fefffff 	.word	0x7fefffff
 8004b80:	f018 0310 	ands.w	r3, r8, #16
 8004b84:	bf18      	it	ne
 8004b86:	236a      	movne	r3, #106	; 0x6a
 8004b88:	4648      	mov	r0, r9
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4da1      	ldr	r5, [pc, #644]	; (8004e18 <_strtod_l+0x850>)
 8004b92:	f1b8 0f00 	cmp.w	r8, #0
 8004b96:	f300 8113 	bgt.w	8004dc0 <_strtod_l+0x7f8>
 8004b9a:	b10b      	cbz	r3, 8004ba0 <_strtod_l+0x5d8>
 8004b9c:	4681      	mov	r9, r0
 8004b9e:	468a      	mov	sl, r1
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	b1bb      	cbz	r3, 8004bd4 <_strtod_l+0x60c>
 8004ba4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004ba8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	4651      	mov	r1, sl
 8004bb0:	dd10      	ble.n	8004bd4 <_strtod_l+0x60c>
 8004bb2:	2b1f      	cmp	r3, #31
 8004bb4:	f340 8110 	ble.w	8004dd8 <_strtod_l+0x810>
 8004bb8:	2b34      	cmp	r3, #52	; 0x34
 8004bba:	bfd8      	it	le
 8004bbc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004bc0:	f04f 0900 	mov.w	r9, #0
 8004bc4:	bfcf      	iteee	gt
 8004bc6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004bca:	3b20      	suble	r3, #32
 8004bcc:	fa02 f303 	lslle.w	r3, r2, r3
 8004bd0:	ea03 0a01 	andle.w	sl, r3, r1
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4648      	mov	r0, r9
 8004bda:	4651      	mov	r1, sl
 8004bdc:	f7fb fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d1a8      	bne.n	8004b36 <_strtod_l+0x56e>
 8004be4:	9b06      	ldr	r3, [sp, #24]
 8004be6:	9a04      	ldr	r2, [sp, #16]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	9908      	ldr	r1, [sp, #32]
 8004bec:	4623      	mov	r3, r4
 8004bee:	4658      	mov	r0, fp
 8004bf0:	f001 fdbf 	bl	8006772 <__s2b>
 8004bf4:	9008      	str	r0, [sp, #32]
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f af00 	beq.w	80049fc <_strtod_l+0x434>
 8004bfc:	9a07      	ldr	r2, [sp, #28]
 8004bfe:	9b07      	ldr	r3, [sp, #28]
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	f1c3 0300 	rsb	r3, r3, #0
 8004c06:	bfa8      	it	ge
 8004c08:	2300      	movge	r3, #0
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8004c10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004c14:	9316      	str	r3, [sp, #88]	; 0x58
 8004c16:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c1a:	9b08      	ldr	r3, [sp, #32]
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	f001 fd21 	bl	8006666 <_Balloc>
 8004c24:	9006      	str	r0, [sp, #24]
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f43f aef0 	beq.w	8004a0c <_strtod_l+0x444>
 8004c2c:	9b08      	ldr	r3, [sp, #32]
 8004c2e:	300c      	adds	r0, #12
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	f103 010c 	add.w	r1, r3, #12
 8004c36:	3202      	adds	r2, #2
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	f001 fd09 	bl	8006650 <memcpy>
 8004c3e:	ab1e      	add	r3, sp, #120	; 0x78
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	ab1d      	add	r3, sp, #116	; 0x74
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	464a      	mov	r2, r9
 8004c48:	4653      	mov	r3, sl
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004c50:	f002 f84a 	bl	8006ce8 <__d2b>
 8004c54:	901c      	str	r0, [sp, #112]	; 0x70
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f43f aed8 	beq.w	8004a0c <_strtod_l+0x444>
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4658      	mov	r0, fp
 8004c60:	f001 fe13 	bl	800688a <__i2b>
 8004c64:	9004      	str	r0, [sp, #16]
 8004c66:	4603      	mov	r3, r0
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f43f aecf 	beq.w	8004a0c <_strtod_l+0x444>
 8004c6e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004c70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	bfab      	itete	ge
 8004c76:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004c78:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004c7a:	18ee      	addge	r6, r5, r3
 8004c7c:	1b5c      	sublt	r4, r3, r5
 8004c7e:	9b05      	ldr	r3, [sp, #20]
 8004c80:	bfa8      	it	ge
 8004c82:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004c84:	eba5 0503 	sub.w	r5, r5, r3
 8004c88:	4415      	add	r5, r2
 8004c8a:	4b64      	ldr	r3, [pc, #400]	; (8004e1c <_strtod_l+0x854>)
 8004c8c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004c90:	bfb8      	it	lt
 8004c92:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004c94:	429d      	cmp	r5, r3
 8004c96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c9a:	f280 80af 	bge.w	8004dfc <_strtod_l+0x834>
 8004c9e:	1b5b      	subs	r3, r3, r5
 8004ca0:	2b1f      	cmp	r3, #31
 8004ca2:	eba2 0203 	sub.w	r2, r2, r3
 8004ca6:	f04f 0701 	mov.w	r7, #1
 8004caa:	f300 809c 	bgt.w	8004de6 <_strtod_l+0x81e>
 8004cae:	2500      	movs	r5, #0
 8004cb0:	fa07 f303 	lsl.w	r3, r7, r3
 8004cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb6:	18b7      	adds	r7, r6, r2
 8004cb8:	9b05      	ldr	r3, [sp, #20]
 8004cba:	42be      	cmp	r6, r7
 8004cbc:	4414      	add	r4, r2
 8004cbe:	441c      	add	r4, r3
 8004cc0:	4633      	mov	r3, r6
 8004cc2:	bfa8      	it	ge
 8004cc4:	463b      	movge	r3, r7
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	bfa8      	it	ge
 8004cca:	4623      	movge	r3, r4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfc2      	ittt	gt
 8004cd0:	1aff      	subgt	r7, r7, r3
 8004cd2:	1ae4      	subgt	r4, r4, r3
 8004cd4:	1af6      	subgt	r6, r6, r3
 8004cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cd8:	b1bb      	cbz	r3, 8004d0a <_strtod_l+0x742>
 8004cda:	461a      	mov	r2, r3
 8004cdc:	9904      	ldr	r1, [sp, #16]
 8004cde:	4658      	mov	r0, fp
 8004ce0:	f001 fe72 	bl	80069c8 <__pow5mult>
 8004ce4:	9004      	str	r0, [sp, #16]
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f43f ae90 	beq.w	8004a0c <_strtod_l+0x444>
 8004cec:	4601      	mov	r1, r0
 8004cee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004cf0:	4658      	mov	r0, fp
 8004cf2:	f001 fdd3 	bl	800689c <__multiply>
 8004cf6:	9009      	str	r0, [sp, #36]	; 0x24
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	f43f ae87 	beq.w	8004a0c <_strtod_l+0x444>
 8004cfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d00:	4658      	mov	r0, fp
 8004d02:	f001 fce4 	bl	80066ce <_Bfree>
 8004d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d08:	931c      	str	r3, [sp, #112]	; 0x70
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	dc7a      	bgt.n	8004e04 <_strtod_l+0x83c>
 8004d0e:	9b07      	ldr	r3, [sp, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	dd08      	ble.n	8004d26 <_strtod_l+0x75e>
 8004d14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d16:	9906      	ldr	r1, [sp, #24]
 8004d18:	4658      	mov	r0, fp
 8004d1a:	f001 fe55 	bl	80069c8 <__pow5mult>
 8004d1e:	9006      	str	r0, [sp, #24]
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f43f ae73 	beq.w	8004a0c <_strtod_l+0x444>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	dd08      	ble.n	8004d3c <_strtod_l+0x774>
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	9906      	ldr	r1, [sp, #24]
 8004d2e:	4658      	mov	r0, fp
 8004d30:	f001 fe98 	bl	8006a64 <__lshift>
 8004d34:	9006      	str	r0, [sp, #24]
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f43f ae68 	beq.w	8004a0c <_strtod_l+0x444>
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	dd08      	ble.n	8004d52 <_strtod_l+0x78a>
 8004d40:	4632      	mov	r2, r6
 8004d42:	9904      	ldr	r1, [sp, #16]
 8004d44:	4658      	mov	r0, fp
 8004d46:	f001 fe8d 	bl	8006a64 <__lshift>
 8004d4a:	9004      	str	r0, [sp, #16]
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f ae5d 	beq.w	8004a0c <_strtod_l+0x444>
 8004d52:	9a06      	ldr	r2, [sp, #24]
 8004d54:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d56:	4658      	mov	r0, fp
 8004d58:	f001 fef2 	bl	8006b40 <__mdiff>
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f43f ae54 	beq.w	8004a0c <_strtod_l+0x444>
 8004d64:	2400      	movs	r4, #0
 8004d66:	68c3      	ldr	r3, [r0, #12]
 8004d68:	9904      	ldr	r1, [sp, #16]
 8004d6a:	60c4      	str	r4, [r0, #12]
 8004d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d6e:	f001 fecd 	bl	8006b0c <__mcmp>
 8004d72:	42a0      	cmp	r0, r4
 8004d74:	da54      	bge.n	8004e20 <_strtod_l+0x858>
 8004d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d78:	b9f3      	cbnz	r3, 8004db8 <_strtod_l+0x7f0>
 8004d7a:	f1b9 0f00 	cmp.w	r9, #0
 8004d7e:	d11b      	bne.n	8004db8 <_strtod_l+0x7f0>
 8004d80:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004d84:	b9c3      	cbnz	r3, 8004db8 <_strtod_l+0x7f0>
 8004d86:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004d8a:	0d1b      	lsrs	r3, r3, #20
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d92:	d911      	bls.n	8004db8 <_strtod_l+0x7f0>
 8004d94:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004d98:	b91b      	cbnz	r3, 8004da2 <_strtod_l+0x7da>
 8004d9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	dd0a      	ble.n	8004db8 <_strtod_l+0x7f0>
 8004da2:	4641      	mov	r1, r8
 8004da4:	2201      	movs	r2, #1
 8004da6:	4658      	mov	r0, fp
 8004da8:	f001 fe5c 	bl	8006a64 <__lshift>
 8004dac:	9904      	ldr	r1, [sp, #16]
 8004dae:	4680      	mov	r8, r0
 8004db0:	f001 feac 	bl	8006b0c <__mcmp>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	dc68      	bgt.n	8004e8a <_strtod_l+0x8c2>
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d172      	bne.n	8004ea4 <_strtod_l+0x8dc>
 8004dbe:	e630      	b.n	8004a22 <_strtod_l+0x45a>
 8004dc0:	f018 0f01 	tst.w	r8, #1
 8004dc4:	d004      	beq.n	8004dd0 <_strtod_l+0x808>
 8004dc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dca:	f7fb fb85 	bl	80004d8 <__aeabi_dmul>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004dd4:	3508      	adds	r5, #8
 8004dd6:	e6dc      	b.n	8004b92 <_strtod_l+0x5ca>
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	ea03 0909 	and.w	r9, r3, r9
 8004de4:	e6f6      	b.n	8004bd4 <_strtod_l+0x60c>
 8004de6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004dea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004dee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004df2:	35e2      	adds	r5, #226	; 0xe2
 8004df4:	fa07 f505 	lsl.w	r5, r7, r5
 8004df8:	970f      	str	r7, [sp, #60]	; 0x3c
 8004dfa:	e75c      	b.n	8004cb6 <_strtod_l+0x6ee>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	2500      	movs	r5, #0
 8004e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e02:	e758      	b.n	8004cb6 <_strtod_l+0x6ee>
 8004e04:	463a      	mov	r2, r7
 8004e06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e08:	4658      	mov	r0, fp
 8004e0a:	f001 fe2b 	bl	8006a64 <__lshift>
 8004e0e:	901c      	str	r0, [sp, #112]	; 0x70
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f47f af7c 	bne.w	8004d0e <_strtod_l+0x746>
 8004e16:	e5f9      	b.n	8004a0c <_strtod_l+0x444>
 8004e18:	08007420 	.word	0x08007420
 8004e1c:	fffffc02 	.word	0xfffffc02
 8004e20:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004e24:	f040 8089 	bne.w	8004f3a <_strtod_l+0x972>
 8004e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e2a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004e2e:	b342      	cbz	r2, 8004e82 <_strtod_l+0x8ba>
 8004e30:	4aaf      	ldr	r2, [pc, #700]	; (80050f0 <_strtod_l+0xb28>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d156      	bne.n	8004ee4 <_strtod_l+0x91c>
 8004e36:	9b05      	ldr	r3, [sp, #20]
 8004e38:	4648      	mov	r0, r9
 8004e3a:	b1eb      	cbz	r3, 8004e78 <_strtod_l+0x8b0>
 8004e3c:	4653      	mov	r3, sl
 8004e3e:	4aad      	ldr	r2, [pc, #692]	; (80050f4 <_strtod_l+0xb2c>)
 8004e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e44:	401a      	ands	r2, r3
 8004e46:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004e4a:	d818      	bhi.n	8004e7e <_strtod_l+0x8b6>
 8004e4c:	0d12      	lsrs	r2, r2, #20
 8004e4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	4298      	cmp	r0, r3
 8004e58:	d144      	bne.n	8004ee4 <_strtod_l+0x91c>
 8004e5a:	4ba7      	ldr	r3, [pc, #668]	; (80050f8 <_strtod_l+0xb30>)
 8004e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d102      	bne.n	8004e68 <_strtod_l+0x8a0>
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f add2 	beq.w	8004a0c <_strtod_l+0x444>
 8004e68:	4ba2      	ldr	r3, [pc, #648]	; (80050f4 <_strtod_l+0xb2c>)
 8004e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e6c:	f04f 0900 	mov.w	r9, #0
 8004e70:	401a      	ands	r2, r3
 8004e72:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004e76:	e79f      	b.n	8004db8 <_strtod_l+0x7f0>
 8004e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e7c:	e7eb      	b.n	8004e56 <_strtod_l+0x88e>
 8004e7e:	460b      	mov	r3, r1
 8004e80:	e7e9      	b.n	8004e56 <_strtod_l+0x88e>
 8004e82:	bb7b      	cbnz	r3, 8004ee4 <_strtod_l+0x91c>
 8004e84:	f1b9 0f00 	cmp.w	r9, #0
 8004e88:	d12c      	bne.n	8004ee4 <_strtod_l+0x91c>
 8004e8a:	9905      	ldr	r1, [sp, #20]
 8004e8c:	4653      	mov	r3, sl
 8004e8e:	4a99      	ldr	r2, [pc, #612]	; (80050f4 <_strtod_l+0xb2c>)
 8004e90:	b1f1      	cbz	r1, 8004ed0 <_strtod_l+0x908>
 8004e92:	ea02 010a 	and.w	r1, r2, sl
 8004e96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004e9a:	dc19      	bgt.n	8004ed0 <_strtod_l+0x908>
 8004e9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004ea0:	f77f ae51 	ble.w	8004b46 <_strtod_l+0x57e>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	4a95      	ldr	r2, [pc, #596]	; (80050fc <_strtod_l+0xb34>)
 8004ea8:	4648      	mov	r0, r9
 8004eaa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004eae:	4651      	mov	r1, sl
 8004eb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004eb4:	f7fb fb10 	bl	80004d8 <__aeabi_dmul>
 8004eb8:	4681      	mov	r9, r0
 8004eba:	468a      	mov	sl, r1
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	f47f adb0 	bne.w	8004a22 <_strtod_l+0x45a>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	f47f adad 	bne.w	8004a22 <_strtod_l+0x45a>
 8004ec8:	2322      	movs	r3, #34	; 0x22
 8004eca:	f8cb 3000 	str.w	r3, [fp]
 8004ece:	e5a8      	b.n	8004a22 <_strtod_l+0x45a>
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004ed6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004eda:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004ede:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004ee2:	e769      	b.n	8004db8 <_strtod_l+0x7f0>
 8004ee4:	b19d      	cbz	r5, 8004f0e <_strtod_l+0x946>
 8004ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee8:	421d      	tst	r5, r3
 8004eea:	f43f af65 	beq.w	8004db8 <_strtod_l+0x7f0>
 8004eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ef0:	9a05      	ldr	r2, [sp, #20]
 8004ef2:	4648      	mov	r0, r9
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	b173      	cbz	r3, 8004f16 <_strtod_l+0x94e>
 8004ef8:	f7ff fb42 	bl	8004580 <sulp>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f04:	f7fb f932 	bl	800016c <__adddf3>
 8004f08:	4681      	mov	r9, r0
 8004f0a:	468a      	mov	sl, r1
 8004f0c:	e754      	b.n	8004db8 <_strtod_l+0x7f0>
 8004f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f10:	ea13 0f09 	tst.w	r3, r9
 8004f14:	e7e9      	b.n	8004eea <_strtod_l+0x922>
 8004f16:	f7ff fb33 	bl	8004580 <sulp>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f22:	f7fb f921 	bl	8000168 <__aeabi_dsub>
 8004f26:	2200      	movs	r2, #0
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	468a      	mov	sl, r1
 8004f2e:	f7fb fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f47f ae07 	bne.w	8004b46 <_strtod_l+0x57e>
 8004f38:	e73e      	b.n	8004db8 <_strtod_l+0x7f0>
 8004f3a:	9904      	ldr	r1, [sp, #16]
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f001 ff22 	bl	8006d86 <__ratio>
 8004f42:	2200      	movs	r2, #0
 8004f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460f      	mov	r7, r1
 8004f4c:	f7fb fd40 	bl	80009d0 <__aeabi_dcmple>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d075      	beq.n	8005040 <_strtod_l+0xa78>
 8004f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d047      	beq.n	8004fea <_strtod_l+0xa22>
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	4f68      	ldr	r7, [pc, #416]	; (8005100 <_strtod_l+0xb38>)
 8004f5e:	4d68      	ldr	r5, [pc, #416]	; (8005100 <_strtod_l+0xb38>)
 8004f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f66:	0d1b      	lsrs	r3, r3, #20
 8004f68:	051b      	lsls	r3, r3, #20
 8004f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <_strtod_l+0xb3c>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f040 80cf 	bne.w	8005114 <_strtod_l+0xb4c>
 8004f76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f7a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	4648      	mov	r0, r9
 8004f82:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004f86:	4651      	mov	r1, sl
 8004f88:	f001 fe38 	bl	8006bfc <__ulp>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4630      	mov	r0, r6
 8004f92:	4639      	mov	r1, r7
 8004f94:	f7fb faa0 	bl	80004d8 <__aeabi_dmul>
 8004f98:	464a      	mov	r2, r9
 8004f9a:	4653      	mov	r3, sl
 8004f9c:	f7fb f8e6 	bl	800016c <__adddf3>
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4954      	ldr	r1, [pc, #336]	; (80050f4 <_strtod_l+0xb2c>)
 8004fa4:	4a58      	ldr	r2, [pc, #352]	; (8005108 <_strtod_l+0xb40>)
 8004fa6:	4019      	ands	r1, r3
 8004fa8:	4291      	cmp	r1, r2
 8004faa:	4681      	mov	r9, r0
 8004fac:	d95e      	bls.n	800506c <_strtod_l+0xaa4>
 8004fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <_strtod_l+0x9f8>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f43f ad26 	beq.w	8004a0c <_strtod_l+0x444>
 8004fc0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004fc4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80050f8 <_strtod_l+0xb30>
 8004fc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004fca:	4658      	mov	r0, fp
 8004fcc:	f001 fb7f 	bl	80066ce <_Bfree>
 8004fd0:	9906      	ldr	r1, [sp, #24]
 8004fd2:	4658      	mov	r0, fp
 8004fd4:	f001 fb7b 	bl	80066ce <_Bfree>
 8004fd8:	9904      	ldr	r1, [sp, #16]
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f001 fb77 	bl	80066ce <_Bfree>
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f001 fb73 	bl	80066ce <_Bfree>
 8004fe8:	e617      	b.n	8004c1a <_strtod_l+0x652>
 8004fea:	f1b9 0f00 	cmp.w	r9, #0
 8004fee:	d119      	bne.n	8005024 <_strtod_l+0xa5c>
 8004ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff6:	b9e3      	cbnz	r3, 8005032 <_strtod_l+0xa6a>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4b41      	ldr	r3, [pc, #260]	; (8005100 <_strtod_l+0xb38>)
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4639      	mov	r1, r7
 8005000:	f7fb fcdc 	bl	80009bc <__aeabi_dcmplt>
 8005004:	b9c8      	cbnz	r0, 800503a <_strtod_l+0xa72>
 8005006:	2200      	movs	r2, #0
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <_strtod_l+0xb44>)
 800500a:	4630      	mov	r0, r6
 800500c:	4639      	mov	r1, r7
 800500e:	f7fb fa63 	bl	80004d8 <__aeabi_dmul>
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800501a:	9418      	str	r4, [sp, #96]	; 0x60
 800501c:	9319      	str	r3, [sp, #100]	; 0x64
 800501e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005022:	e79d      	b.n	8004f60 <_strtod_l+0x998>
 8005024:	f1b9 0f01 	cmp.w	r9, #1
 8005028:	d103      	bne.n	8005032 <_strtod_l+0xa6a>
 800502a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	f43f ad8a 	beq.w	8004b46 <_strtod_l+0x57e>
 8005032:	2600      	movs	r6, #0
 8005034:	4f36      	ldr	r7, [pc, #216]	; (8005110 <_strtod_l+0xb48>)
 8005036:	2400      	movs	r4, #0
 8005038:	e791      	b.n	8004f5e <_strtod_l+0x996>
 800503a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800503c:	4d33      	ldr	r5, [pc, #204]	; (800510c <_strtod_l+0xb44>)
 800503e:	e7ea      	b.n	8005016 <_strtod_l+0xa4e>
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <_strtod_l+0xb44>)
 8005042:	2200      	movs	r2, #0
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb fa46 	bl	80004d8 <__aeabi_dmul>
 800504c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	b933      	cbnz	r3, 8005062 <_strtod_l+0xa9a>
 8005054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005058:	9010      	str	r0, [sp, #64]	; 0x40
 800505a:	9311      	str	r3, [sp, #68]	; 0x44
 800505c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005060:	e77e      	b.n	8004f60 <_strtod_l+0x998>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800506a:	e7f7      	b.n	800505c <_strtod_l+0xa94>
 800506c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005070:	9b05      	ldr	r3, [sp, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1a8      	bne.n	8004fc8 <_strtod_l+0xa00>
 8005076:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800507a:	0d1b      	lsrs	r3, r3, #20
 800507c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800507e:	051b      	lsls	r3, r3, #20
 8005080:	429a      	cmp	r2, r3
 8005082:	4656      	mov	r6, sl
 8005084:	d1a0      	bne.n	8004fc8 <_strtod_l+0xa00>
 8005086:	4629      	mov	r1, r5
 8005088:	4620      	mov	r0, r4
 800508a:	f7fb fcd5 	bl	8000a38 <__aeabi_d2iz>
 800508e:	f7fb f9b9 	bl	8000404 <__aeabi_i2d>
 8005092:	460b      	mov	r3, r1
 8005094:	4602      	mov	r2, r0
 8005096:	4629      	mov	r1, r5
 8005098:	4620      	mov	r0, r4
 800509a:	f7fb f865 	bl	8000168 <__aeabi_dsub>
 800509e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050a0:	4604      	mov	r4, r0
 80050a2:	460d      	mov	r5, r1
 80050a4:	b933      	cbnz	r3, 80050b4 <_strtod_l+0xaec>
 80050a6:	f1b9 0f00 	cmp.w	r9, #0
 80050aa:	d103      	bne.n	80050b4 <_strtod_l+0xaec>
 80050ac:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d06a      	beq.n	800518a <_strtod_l+0xbc2>
 80050b4:	a30a      	add	r3, pc, #40	; (adr r3, 80050e0 <_strtod_l+0xb18>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb fc7d 	bl	80009bc <__aeabi_dcmplt>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	f47f acad 	bne.w	8004a22 <_strtod_l+0x45a>
 80050c8:	a307      	add	r3, pc, #28	; (adr r3, 80050e8 <_strtod_l+0xb20>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	4620      	mov	r0, r4
 80050d0:	4629      	mov	r1, r5
 80050d2:	f7fb fc91 	bl	80009f8 <__aeabi_dcmpgt>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f af76 	beq.w	8004fc8 <_strtod_l+0xa00>
 80050dc:	e4a1      	b.n	8004a22 <_strtod_l+0x45a>
 80050de:	bf00      	nop
 80050e0:	94a03595 	.word	0x94a03595
 80050e4:	3fdfffff 	.word	0x3fdfffff
 80050e8:	35afe535 	.word	0x35afe535
 80050ec:	3fe00000 	.word	0x3fe00000
 80050f0:	000fffff 	.word	0x000fffff
 80050f4:	7ff00000 	.word	0x7ff00000
 80050f8:	7fefffff 	.word	0x7fefffff
 80050fc:	39500000 	.word	0x39500000
 8005100:	3ff00000 	.word	0x3ff00000
 8005104:	7fe00000 	.word	0x7fe00000
 8005108:	7c9fffff 	.word	0x7c9fffff
 800510c:	3fe00000 	.word	0x3fe00000
 8005110:	bff00000 	.word	0xbff00000
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	b313      	cbz	r3, 800515e <_strtod_l+0xb96>
 8005118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800511a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800511e:	d81e      	bhi.n	800515e <_strtod_l+0xb96>
 8005120:	a325      	add	r3, pc, #148	; (adr r3, 80051b8 <_strtod_l+0xbf0>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	4620      	mov	r0, r4
 8005128:	4629      	mov	r1, r5
 800512a:	f7fb fc51 	bl	80009d0 <__aeabi_dcmple>
 800512e:	b190      	cbz	r0, 8005156 <_strtod_l+0xb8e>
 8005130:	4629      	mov	r1, r5
 8005132:	4620      	mov	r0, r4
 8005134:	f7fb fca8 	bl	8000a88 <__aeabi_d2uiz>
 8005138:	2800      	cmp	r0, #0
 800513a:	bf08      	it	eq
 800513c:	2001      	moveq	r0, #1
 800513e:	f7fb f951 	bl	80003e4 <__aeabi_ui2d>
 8005142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	b9d3      	cbnz	r3, 8005180 <_strtod_l+0xbb8>
 800514a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800514e:	9012      	str	r0, [sp, #72]	; 0x48
 8005150:	9313      	str	r3, [sp, #76]	; 0x4c
 8005152:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005158:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800515c:	1a9f      	subs	r7, r3, r2
 800515e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005162:	f001 fd4b 	bl	8006bfc <__ulp>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4630      	mov	r0, r6
 800516c:	4639      	mov	r1, r7
 800516e:	f7fb f9b3 	bl	80004d8 <__aeabi_dmul>
 8005172:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005176:	f7fa fff9 	bl	800016c <__adddf3>
 800517a:	4681      	mov	r9, r0
 800517c:	468a      	mov	sl, r1
 800517e:	e777      	b.n	8005070 <_strtod_l+0xaa8>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005188:	e7e3      	b.n	8005152 <_strtod_l+0xb8a>
 800518a:	a30d      	add	r3, pc, #52	; (adr r3, 80051c0 <_strtod_l+0xbf8>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb fc14 	bl	80009bc <__aeabi_dcmplt>
 8005194:	e79f      	b.n	80050d6 <_strtod_l+0xb0e>
 8005196:	2300      	movs	r3, #0
 8005198:	930d      	str	r3, [sp, #52]	; 0x34
 800519a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800519c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	f7ff ba55 	b.w	800464e <_strtod_l+0x86>
 80051a4:	2b65      	cmp	r3, #101	; 0x65
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f43f ab42 	beq.w	8004832 <_strtod_l+0x26a>
 80051ae:	2101      	movs	r1, #1
 80051b0:	4614      	mov	r4, r2
 80051b2:	9105      	str	r1, [sp, #20]
 80051b4:	f7ff babf 	b.w	8004736 <_strtod_l+0x16e>
 80051b8:	ffc00000 	.word	0xffc00000
 80051bc:	41dfffff 	.word	0x41dfffff
 80051c0:	94a03595 	.word	0x94a03595
 80051c4:	3fcfffff 	.word	0x3fcfffff

080051c8 <_strtod_r>:
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <_strtod_r+0x18>)
 80051ca:	b410      	push	{r4}
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4c05      	ldr	r4, [pc, #20]	; (80051e4 <_strtod_r+0x1c>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf08      	it	eq
 80051d6:	4623      	moveq	r3, r4
 80051d8:	bc10      	pop	{r4}
 80051da:	f7ff b9f5 	b.w	80045c8 <_strtod_l>
 80051de:	bf00      	nop
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	20000070 	.word	0x20000070

080051e8 <_strtol_l.isra.0>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4680      	mov	r8, r0
 80051ee:	4689      	mov	r9, r1
 80051f0:	4692      	mov	sl, r2
 80051f2:	461e      	mov	r6, r3
 80051f4:	460f      	mov	r7, r1
 80051f6:	463d      	mov	r5, r7
 80051f8:	9808      	ldr	r0, [sp, #32]
 80051fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051fe:	f001 f9eb 	bl	80065d8 <__locale_ctype_ptr_l>
 8005202:	4420      	add	r0, r4
 8005204:	7843      	ldrb	r3, [r0, #1]
 8005206:	f013 0308 	ands.w	r3, r3, #8
 800520a:	d132      	bne.n	8005272 <_strtol_l.isra.0+0x8a>
 800520c:	2c2d      	cmp	r4, #45	; 0x2d
 800520e:	d132      	bne.n	8005276 <_strtol_l.isra.0+0x8e>
 8005210:	2201      	movs	r2, #1
 8005212:	787c      	ldrb	r4, [r7, #1]
 8005214:	1cbd      	adds	r5, r7, #2
 8005216:	2e00      	cmp	r6, #0
 8005218:	d05d      	beq.n	80052d6 <_strtol_l.isra.0+0xee>
 800521a:	2e10      	cmp	r6, #16
 800521c:	d109      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 800521e:	2c30      	cmp	r4, #48	; 0x30
 8005220:	d107      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 8005222:	782b      	ldrb	r3, [r5, #0]
 8005224:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005228:	2b58      	cmp	r3, #88	; 0x58
 800522a:	d14f      	bne.n	80052cc <_strtol_l.isra.0+0xe4>
 800522c:	2610      	movs	r6, #16
 800522e:	786c      	ldrb	r4, [r5, #1]
 8005230:	3502      	adds	r5, #2
 8005232:	2a00      	cmp	r2, #0
 8005234:	bf14      	ite	ne
 8005236:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800523a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800523e:	2700      	movs	r7, #0
 8005240:	fbb1 fcf6 	udiv	ip, r1, r6
 8005244:	4638      	mov	r0, r7
 8005246:	fb06 1e1c 	mls	lr, r6, ip, r1
 800524a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800524e:	2b09      	cmp	r3, #9
 8005250:	d817      	bhi.n	8005282 <_strtol_l.isra.0+0x9a>
 8005252:	461c      	mov	r4, r3
 8005254:	42a6      	cmp	r6, r4
 8005256:	dd23      	ble.n	80052a0 <_strtol_l.isra.0+0xb8>
 8005258:	1c7b      	adds	r3, r7, #1
 800525a:	d007      	beq.n	800526c <_strtol_l.isra.0+0x84>
 800525c:	4584      	cmp	ip, r0
 800525e:	d31c      	bcc.n	800529a <_strtol_l.isra.0+0xb2>
 8005260:	d101      	bne.n	8005266 <_strtol_l.isra.0+0x7e>
 8005262:	45a6      	cmp	lr, r4
 8005264:	db19      	blt.n	800529a <_strtol_l.isra.0+0xb2>
 8005266:	2701      	movs	r7, #1
 8005268:	fb00 4006 	mla	r0, r0, r6, r4
 800526c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005270:	e7eb      	b.n	800524a <_strtol_l.isra.0+0x62>
 8005272:	462f      	mov	r7, r5
 8005274:	e7bf      	b.n	80051f6 <_strtol_l.isra.0+0xe>
 8005276:	2c2b      	cmp	r4, #43	; 0x2b
 8005278:	bf04      	itt	eq
 800527a:	1cbd      	addeq	r5, r7, #2
 800527c:	787c      	ldrbeq	r4, [r7, #1]
 800527e:	461a      	mov	r2, r3
 8005280:	e7c9      	b.n	8005216 <_strtol_l.isra.0+0x2e>
 8005282:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005286:	2b19      	cmp	r3, #25
 8005288:	d801      	bhi.n	800528e <_strtol_l.isra.0+0xa6>
 800528a:	3c37      	subs	r4, #55	; 0x37
 800528c:	e7e2      	b.n	8005254 <_strtol_l.isra.0+0x6c>
 800528e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005292:	2b19      	cmp	r3, #25
 8005294:	d804      	bhi.n	80052a0 <_strtol_l.isra.0+0xb8>
 8005296:	3c57      	subs	r4, #87	; 0x57
 8005298:	e7dc      	b.n	8005254 <_strtol_l.isra.0+0x6c>
 800529a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800529e:	e7e5      	b.n	800526c <_strtol_l.isra.0+0x84>
 80052a0:	1c7b      	adds	r3, r7, #1
 80052a2:	d108      	bne.n	80052b6 <_strtol_l.isra.0+0xce>
 80052a4:	2322      	movs	r3, #34	; 0x22
 80052a6:	4608      	mov	r0, r1
 80052a8:	f8c8 3000 	str.w	r3, [r8]
 80052ac:	f1ba 0f00 	cmp.w	sl, #0
 80052b0:	d107      	bne.n	80052c2 <_strtol_l.isra.0+0xda>
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	b102      	cbz	r2, 80052ba <_strtol_l.isra.0+0xd2>
 80052b8:	4240      	negs	r0, r0
 80052ba:	f1ba 0f00 	cmp.w	sl, #0
 80052be:	d0f8      	beq.n	80052b2 <_strtol_l.isra.0+0xca>
 80052c0:	b10f      	cbz	r7, 80052c6 <_strtol_l.isra.0+0xde>
 80052c2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80052c6:	f8ca 9000 	str.w	r9, [sl]
 80052ca:	e7f2      	b.n	80052b2 <_strtol_l.isra.0+0xca>
 80052cc:	2430      	movs	r4, #48	; 0x30
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d1af      	bne.n	8005232 <_strtol_l.isra.0+0x4a>
 80052d2:	2608      	movs	r6, #8
 80052d4:	e7ad      	b.n	8005232 <_strtol_l.isra.0+0x4a>
 80052d6:	2c30      	cmp	r4, #48	; 0x30
 80052d8:	d0a3      	beq.n	8005222 <_strtol_l.isra.0+0x3a>
 80052da:	260a      	movs	r6, #10
 80052dc:	e7a9      	b.n	8005232 <_strtol_l.isra.0+0x4a>
	...

080052e0 <_strtol_r>:
 80052e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e2:	4c06      	ldr	r4, [pc, #24]	; (80052fc <_strtol_r+0x1c>)
 80052e4:	4d06      	ldr	r5, [pc, #24]	; (8005300 <_strtol_r+0x20>)
 80052e6:	6824      	ldr	r4, [r4, #0]
 80052e8:	6a24      	ldr	r4, [r4, #32]
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	bf08      	it	eq
 80052ee:	462c      	moveq	r4, r5
 80052f0:	9400      	str	r4, [sp, #0]
 80052f2:	f7ff ff79 	bl	80051e8 <_strtol_l.isra.0>
 80052f6:	b003      	add	sp, #12
 80052f8:	bd30      	pop	{r4, r5, pc}
 80052fa:	bf00      	nop
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	20000070 	.word	0x20000070

08005304 <quorem>:
 8005304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	6903      	ldr	r3, [r0, #16]
 800530a:	690c      	ldr	r4, [r1, #16]
 800530c:	4680      	mov	r8, r0
 800530e:	42a3      	cmp	r3, r4
 8005310:	f2c0 8084 	blt.w	800541c <quorem+0x118>
 8005314:	3c01      	subs	r4, #1
 8005316:	f101 0714 	add.w	r7, r1, #20
 800531a:	f100 0614 	add.w	r6, r0, #20
 800531e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005322:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005326:	3501      	adds	r5, #1
 8005328:	fbb0 f5f5 	udiv	r5, r0, r5
 800532c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005330:	eb06 030c 	add.w	r3, r6, ip
 8005334:	eb07 090c 	add.w	r9, r7, ip
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	b39d      	cbz	r5, 80053a4 <quorem+0xa0>
 800533c:	f04f 0a00 	mov.w	sl, #0
 8005340:	4638      	mov	r0, r7
 8005342:	46b6      	mov	lr, r6
 8005344:	46d3      	mov	fp, sl
 8005346:	f850 2b04 	ldr.w	r2, [r0], #4
 800534a:	b293      	uxth	r3, r2
 800534c:	fb05 a303 	mla	r3, r5, r3, sl
 8005350:	0c12      	lsrs	r2, r2, #16
 8005352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005356:	fb05 a202 	mla	r2, r5, r2, sl
 800535a:	b29b      	uxth	r3, r3
 800535c:	ebab 0303 	sub.w	r3, fp, r3
 8005360:	f8de b000 	ldr.w	fp, [lr]
 8005364:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005368:	fa1f fb8b 	uxth.w	fp, fp
 800536c:	445b      	add	r3, fp
 800536e:	fa1f fb82 	uxth.w	fp, r2
 8005372:	f8de 2000 	ldr.w	r2, [lr]
 8005376:	4581      	cmp	r9, r0
 8005378:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800537c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005386:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800538a:	f84e 3b04 	str.w	r3, [lr], #4
 800538e:	d2da      	bcs.n	8005346 <quorem+0x42>
 8005390:	f856 300c 	ldr.w	r3, [r6, ip]
 8005394:	b933      	cbnz	r3, 80053a4 <quorem+0xa0>
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	3b04      	subs	r3, #4
 800539a:	429e      	cmp	r6, r3
 800539c:	461a      	mov	r2, r3
 800539e:	d331      	bcc.n	8005404 <quorem+0x100>
 80053a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80053a4:	4640      	mov	r0, r8
 80053a6:	f001 fbb1 	bl	8006b0c <__mcmp>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	db26      	blt.n	80053fc <quorem+0xf8>
 80053ae:	4630      	mov	r0, r6
 80053b0:	f04f 0c00 	mov.w	ip, #0
 80053b4:	3501      	adds	r5, #1
 80053b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80053ba:	f8d0 e000 	ldr.w	lr, [r0]
 80053be:	b28b      	uxth	r3, r1
 80053c0:	ebac 0303 	sub.w	r3, ip, r3
 80053c4:	fa1f f28e 	uxth.w	r2, lr
 80053c8:	4413      	add	r3, r2
 80053ca:	0c0a      	lsrs	r2, r1, #16
 80053cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053da:	45b9      	cmp	r9, r7
 80053dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053e0:	f840 3b04 	str.w	r3, [r0], #4
 80053e4:	d2e7      	bcs.n	80053b6 <quorem+0xb2>
 80053e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053ee:	b92a      	cbnz	r2, 80053fc <quorem+0xf8>
 80053f0:	3b04      	subs	r3, #4
 80053f2:	429e      	cmp	r6, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	d30b      	bcc.n	8005410 <quorem+0x10c>
 80053f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80053fc:	4628      	mov	r0, r5
 80053fe:	b003      	add	sp, #12
 8005400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	3b04      	subs	r3, #4
 8005408:	2a00      	cmp	r2, #0
 800540a:	d1c9      	bne.n	80053a0 <quorem+0x9c>
 800540c:	3c01      	subs	r4, #1
 800540e:	e7c4      	b.n	800539a <quorem+0x96>
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	3b04      	subs	r3, #4
 8005414:	2a00      	cmp	r2, #0
 8005416:	d1ef      	bne.n	80053f8 <quorem+0xf4>
 8005418:	3c01      	subs	r4, #1
 800541a:	e7ea      	b.n	80053f2 <quorem+0xee>
 800541c:	2000      	movs	r0, #0
 800541e:	e7ee      	b.n	80053fe <quorem+0xfa>

08005420 <_dtoa_r>:
 8005420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	461f      	mov	r7, r3
 8005428:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800542a:	b095      	sub	sp, #84	; 0x54
 800542c:	4604      	mov	r4, r0
 800542e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005432:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005436:	b93d      	cbnz	r5, 8005448 <_dtoa_r+0x28>
 8005438:	2010      	movs	r0, #16
 800543a:	f001 f8e1 	bl	8006600 <malloc>
 800543e:	6260      	str	r0, [r4, #36]	; 0x24
 8005440:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005444:	6005      	str	r5, [r0, #0]
 8005446:	60c5      	str	r5, [r0, #12]
 8005448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	b151      	cbz	r1, 8005464 <_dtoa_r+0x44>
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	2301      	movs	r3, #1
 8005452:	4093      	lsls	r3, r2
 8005454:	604a      	str	r2, [r1, #4]
 8005456:	608b      	str	r3, [r1, #8]
 8005458:	4620      	mov	r0, r4
 800545a:	f001 f938 	bl	80066ce <_Bfree>
 800545e:	2200      	movs	r2, #0
 8005460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	1e3b      	subs	r3, r7, #0
 8005466:	bfaf      	iteee	ge
 8005468:	2300      	movge	r3, #0
 800546a:	2201      	movlt	r2, #1
 800546c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005470:	9303      	strlt	r3, [sp, #12]
 8005472:	bfac      	ite	ge
 8005474:	f8c8 3000 	strge.w	r3, [r8]
 8005478:	f8c8 2000 	strlt.w	r2, [r8]
 800547c:	4bae      	ldr	r3, [pc, #696]	; (8005738 <_dtoa_r+0x318>)
 800547e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005482:	ea33 0308 	bics.w	r3, r3, r8
 8005486:	d11b      	bne.n	80054c0 <_dtoa_r+0xa0>
 8005488:	f242 730f 	movw	r3, #9999	; 0x270f
 800548c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	9b02      	ldr	r3, [sp, #8]
 8005492:	b923      	cbnz	r3, 800549e <_dtoa_r+0x7e>
 8005494:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005498:	2800      	cmp	r0, #0
 800549a:	f000 8545 	beq.w	8005f28 <_dtoa_r+0xb08>
 800549e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054a0:	b953      	cbnz	r3, 80054b8 <_dtoa_r+0x98>
 80054a2:	4ba6      	ldr	r3, [pc, #664]	; (800573c <_dtoa_r+0x31c>)
 80054a4:	e021      	b.n	80054ea <_dtoa_r+0xca>
 80054a6:	4ba6      	ldr	r3, [pc, #664]	; (8005740 <_dtoa_r+0x320>)
 80054a8:	9306      	str	r3, [sp, #24]
 80054aa:	3308      	adds	r3, #8
 80054ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	9806      	ldr	r0, [sp, #24]
 80054b2:	b015      	add	sp, #84	; 0x54
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b8:	4ba0      	ldr	r3, [pc, #640]	; (800573c <_dtoa_r+0x31c>)
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	3303      	adds	r3, #3
 80054be:	e7f5      	b.n	80054ac <_dtoa_r+0x8c>
 80054c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2300      	movs	r3, #0
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f7fb fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80054d0:	4682      	mov	sl, r0
 80054d2:	b160      	cbz	r0, 80054ee <_dtoa_r+0xce>
 80054d4:	2301      	movs	r3, #1
 80054d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8520 	beq.w	8005f22 <_dtoa_r+0xb02>
 80054e2:	4b98      	ldr	r3, [pc, #608]	; (8005744 <_dtoa_r+0x324>)
 80054e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	9306      	str	r3, [sp, #24]
 80054ec:	e7e0      	b.n	80054b0 <_dtoa_r+0x90>
 80054ee:	ab12      	add	r3, sp, #72	; 0x48
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	ab13      	add	r3, sp, #76	; 0x4c
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	4632      	mov	r2, r6
 80054f8:	463b      	mov	r3, r7
 80054fa:	4620      	mov	r0, r4
 80054fc:	f001 fbf4 	bl	8006ce8 <__d2b>
 8005500:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005504:	4683      	mov	fp, r0
 8005506:	2d00      	cmp	r5, #0
 8005508:	d07d      	beq.n	8005606 <_dtoa_r+0x1e6>
 800550a:	46b0      	mov	r8, r6
 800550c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005510:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005514:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005518:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800551c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005520:	2200      	movs	r2, #0
 8005522:	4b89      	ldr	r3, [pc, #548]	; (8005748 <_dtoa_r+0x328>)
 8005524:	4640      	mov	r0, r8
 8005526:	4649      	mov	r1, r9
 8005528:	f7fa fe1e 	bl	8000168 <__aeabi_dsub>
 800552c:	a37c      	add	r3, pc, #496	; (adr r3, 8005720 <_dtoa_r+0x300>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa ffd1 	bl	80004d8 <__aeabi_dmul>
 8005536:	a37c      	add	r3, pc, #496	; (adr r3, 8005728 <_dtoa_r+0x308>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fa fe16 	bl	800016c <__adddf3>
 8005540:	4606      	mov	r6, r0
 8005542:	4628      	mov	r0, r5
 8005544:	460f      	mov	r7, r1
 8005546:	f7fa ff5d 	bl	8000404 <__aeabi_i2d>
 800554a:	a379      	add	r3, pc, #484	; (adr r3, 8005730 <_dtoa_r+0x310>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa ffc2 	bl	80004d8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fa fe06 	bl	800016c <__adddf3>
 8005560:	4606      	mov	r6, r0
 8005562:	460f      	mov	r7, r1
 8005564:	f7fb fa68 	bl	8000a38 <__aeabi_d2iz>
 8005568:	2200      	movs	r2, #0
 800556a:	4682      	mov	sl, r0
 800556c:	2300      	movs	r3, #0
 800556e:	4630      	mov	r0, r6
 8005570:	4639      	mov	r1, r7
 8005572:	f7fb fa23 	bl	80009bc <__aeabi_dcmplt>
 8005576:	b148      	cbz	r0, 800558c <_dtoa_r+0x16c>
 8005578:	4650      	mov	r0, sl
 800557a:	f7fa ff43 	bl	8000404 <__aeabi_i2d>
 800557e:	4632      	mov	r2, r6
 8005580:	463b      	mov	r3, r7
 8005582:	f7fb fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8005586:	b908      	cbnz	r0, 800558c <_dtoa_r+0x16c>
 8005588:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800558c:	f1ba 0f16 	cmp.w	sl, #22
 8005590:	d85a      	bhi.n	8005648 <_dtoa_r+0x228>
 8005592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005596:	496d      	ldr	r1, [pc, #436]	; (800574c <_dtoa_r+0x32c>)
 8005598:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800559c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a0:	f7fb fa2a 	bl	80009f8 <__aeabi_dcmpgt>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d051      	beq.n	800564c <_dtoa_r+0x22c>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80055ae:	930d      	str	r3, [sp, #52]	; 0x34
 80055b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b2:	1b5d      	subs	r5, r3, r5
 80055b4:	1e6b      	subs	r3, r5, #1
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	bf43      	ittte	mi
 80055ba:	2300      	movmi	r3, #0
 80055bc:	f1c5 0901 	rsbmi	r9, r5, #1
 80055c0:	9307      	strmi	r3, [sp, #28]
 80055c2:	f04f 0900 	movpl.w	r9, #0
 80055c6:	f1ba 0f00 	cmp.w	sl, #0
 80055ca:	db41      	blt.n	8005650 <_dtoa_r+0x230>
 80055cc:	9b07      	ldr	r3, [sp, #28]
 80055ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80055d2:	4453      	add	r3, sl
 80055d4:	9307      	str	r3, [sp, #28]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9308      	str	r3, [sp, #32]
 80055da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055dc:	2b09      	cmp	r3, #9
 80055de:	f200 808f 	bhi.w	8005700 <_dtoa_r+0x2e0>
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	bfc4      	itt	gt
 80055e6:	3b04      	subgt	r3, #4
 80055e8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80055ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055ec:	bfc8      	it	gt
 80055ee:	2500      	movgt	r5, #0
 80055f0:	f1a3 0302 	sub.w	r3, r3, #2
 80055f4:	bfd8      	it	le
 80055f6:	2501      	movle	r5, #1
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	f200 808d 	bhi.w	8005718 <_dtoa_r+0x2f8>
 80055fe:	e8df f003 	tbb	[pc, r3]
 8005602:	7d7b      	.short	0x7d7b
 8005604:	6f2f      	.short	0x6f2f
 8005606:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800560a:	441d      	add	r5, r3
 800560c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005610:	2820      	cmp	r0, #32
 8005612:	dd13      	ble.n	800563c <_dtoa_r+0x21c>
 8005614:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	fa08 f800 	lsl.w	r8, r8, r0
 800561e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005622:	fa23 f000 	lsr.w	r0, r3, r0
 8005626:	ea48 0000 	orr.w	r0, r8, r0
 800562a:	f7fa fedb 	bl	80003e4 <__aeabi_ui2d>
 800562e:	2301      	movs	r3, #1
 8005630:	4680      	mov	r8, r0
 8005632:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005636:	3d01      	subs	r5, #1
 8005638:	9310      	str	r3, [sp, #64]	; 0x40
 800563a:	e771      	b.n	8005520 <_dtoa_r+0x100>
 800563c:	9b02      	ldr	r3, [sp, #8]
 800563e:	f1c0 0020 	rsb	r0, r0, #32
 8005642:	fa03 f000 	lsl.w	r0, r3, r0
 8005646:	e7f0      	b.n	800562a <_dtoa_r+0x20a>
 8005648:	2301      	movs	r3, #1
 800564a:	e7b0      	b.n	80055ae <_dtoa_r+0x18e>
 800564c:	900d      	str	r0, [sp, #52]	; 0x34
 800564e:	e7af      	b.n	80055b0 <_dtoa_r+0x190>
 8005650:	f1ca 0300 	rsb	r3, sl, #0
 8005654:	9308      	str	r3, [sp, #32]
 8005656:	2300      	movs	r3, #0
 8005658:	eba9 090a 	sub.w	r9, r9, sl
 800565c:	930c      	str	r3, [sp, #48]	; 0x30
 800565e:	e7bc      	b.n	80055da <_dtoa_r+0x1ba>
 8005660:	2301      	movs	r3, #1
 8005662:	9309      	str	r3, [sp, #36]	; 0x24
 8005664:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd74      	ble.n	8005754 <_dtoa_r+0x334>
 800566a:	4698      	mov	r8, r3
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	2200      	movs	r2, #0
 8005670:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005672:	6072      	str	r2, [r6, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	f102 0014 	add.w	r0, r2, #20
 800567a:	4298      	cmp	r0, r3
 800567c:	6871      	ldr	r1, [r6, #4]
 800567e:	d96e      	bls.n	800575e <_dtoa_r+0x33e>
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fff0 	bl	8006666 <_Balloc>
 8005686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005688:	6030      	str	r0, [r6, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b8 0f0e 	cmp.w	r8, #14
 8005690:	9306      	str	r3, [sp, #24]
 8005692:	f200 80ed 	bhi.w	8005870 <_dtoa_r+0x450>
 8005696:	2d00      	cmp	r5, #0
 8005698:	f000 80ea 	beq.w	8005870 <_dtoa_r+0x450>
 800569c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056a0:	f1ba 0f00 	cmp.w	sl, #0
 80056a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80056a8:	dd77      	ble.n	800579a <_dtoa_r+0x37a>
 80056aa:	4a28      	ldr	r2, [pc, #160]	; (800574c <_dtoa_r+0x32c>)
 80056ac:	f00a 030f 	and.w	r3, sl, #15
 80056b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80056b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056b8:	06f0      	lsls	r0, r6, #27
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056c2:	d568      	bpl.n	8005796 <_dtoa_r+0x376>
 80056c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <_dtoa_r+0x330>)
 80056ca:	2503      	movs	r5, #3
 80056cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056d0:	f7fb f82c 	bl	800072c <__aeabi_ddiv>
 80056d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d8:	f006 060f 	and.w	r6, r6, #15
 80056dc:	4f1c      	ldr	r7, [pc, #112]	; (8005750 <_dtoa_r+0x330>)
 80056de:	e04f      	b.n	8005780 <_dtoa_r+0x360>
 80056e0:	2301      	movs	r3, #1
 80056e2:	9309      	str	r3, [sp, #36]	; 0x24
 80056e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056e6:	4453      	add	r3, sl
 80056e8:	f103 0801 	add.w	r8, r3, #1
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	4643      	mov	r3, r8
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bfb8      	it	lt
 80056f4:	2301      	movlt	r3, #1
 80056f6:	e7ba      	b.n	800566e <_dtoa_r+0x24e>
 80056f8:	2300      	movs	r3, #0
 80056fa:	e7b2      	b.n	8005662 <_dtoa_r+0x242>
 80056fc:	2300      	movs	r3, #0
 80056fe:	e7f0      	b.n	80056e2 <_dtoa_r+0x2c2>
 8005700:	2501      	movs	r5, #1
 8005702:	2300      	movs	r3, #0
 8005704:	9509      	str	r5, [sp, #36]	; 0x24
 8005706:	931e      	str	r3, [sp, #120]	; 0x78
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570c:	2200      	movs	r2, #0
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	4698      	mov	r8, r3
 8005712:	2312      	movs	r3, #18
 8005714:	921f      	str	r2, [sp, #124]	; 0x7c
 8005716:	e7aa      	b.n	800566e <_dtoa_r+0x24e>
 8005718:	2301      	movs	r3, #1
 800571a:	9309      	str	r3, [sp, #36]	; 0x24
 800571c:	e7f4      	b.n	8005708 <_dtoa_r+0x2e8>
 800571e:	bf00      	nop
 8005720:	636f4361 	.word	0x636f4361
 8005724:	3fd287a7 	.word	0x3fd287a7
 8005728:	8b60c8b3 	.word	0x8b60c8b3
 800572c:	3fc68a28 	.word	0x3fc68a28
 8005730:	509f79fb 	.word	0x509f79fb
 8005734:	3fd34413 	.word	0x3fd34413
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	08007451 	.word	0x08007451
 8005740:	08007448 	.word	0x08007448
 8005744:	080073cd 	.word	0x080073cd
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	08007488 	.word	0x08007488
 8005750:	08007460 	.word	0x08007460
 8005754:	2301      	movs	r3, #1
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	4698      	mov	r8, r3
 800575a:	461a      	mov	r2, r3
 800575c:	e7da      	b.n	8005714 <_dtoa_r+0x2f4>
 800575e:	3101      	adds	r1, #1
 8005760:	6071      	str	r1, [r6, #4]
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	e787      	b.n	8005676 <_dtoa_r+0x256>
 8005766:	07f1      	lsls	r1, r6, #31
 8005768:	d508      	bpl.n	800577c <_dtoa_r+0x35c>
 800576a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800576e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005772:	f7fa feb1 	bl	80004d8 <__aeabi_dmul>
 8005776:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800577a:	3501      	adds	r5, #1
 800577c:	1076      	asrs	r6, r6, #1
 800577e:	3708      	adds	r7, #8
 8005780:	2e00      	cmp	r6, #0
 8005782:	d1f0      	bne.n	8005766 <_dtoa_r+0x346>
 8005784:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800578c:	f7fa ffce 	bl	800072c <__aeabi_ddiv>
 8005790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005794:	e01b      	b.n	80057ce <_dtoa_r+0x3ae>
 8005796:	2502      	movs	r5, #2
 8005798:	e7a0      	b.n	80056dc <_dtoa_r+0x2bc>
 800579a:	f000 80a4 	beq.w	80058e6 <_dtoa_r+0x4c6>
 800579e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057a2:	f1ca 0600 	rsb	r6, sl, #0
 80057a6:	4ba0      	ldr	r3, [pc, #640]	; (8005a28 <_dtoa_r+0x608>)
 80057a8:	f006 020f 	and.w	r2, r6, #15
 80057ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa fe90 	bl	80004d8 <__aeabi_dmul>
 80057b8:	2502      	movs	r5, #2
 80057ba:	2300      	movs	r3, #0
 80057bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c0:	4f9a      	ldr	r7, [pc, #616]	; (8005a2c <_dtoa_r+0x60c>)
 80057c2:	1136      	asrs	r6, r6, #4
 80057c4:	2e00      	cmp	r6, #0
 80057c6:	f040 8083 	bne.w	80058d0 <_dtoa_r+0x4b0>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e0      	bne.n	8005790 <_dtoa_r+0x370>
 80057ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 808a 	beq.w	80058ea <_dtoa_r+0x4ca>
 80057d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057e2:	2200      	movs	r2, #0
 80057e4:	4b92      	ldr	r3, [pc, #584]	; (8005a30 <_dtoa_r+0x610>)
 80057e6:	f7fb f8e9 	bl	80009bc <__aeabi_dcmplt>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d07d      	beq.n	80058ea <_dtoa_r+0x4ca>
 80057ee:	f1b8 0f00 	cmp.w	r8, #0
 80057f2:	d07a      	beq.n	80058ea <_dtoa_r+0x4ca>
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd36      	ble.n	8005868 <_dtoa_r+0x448>
 80057fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057fe:	2200      	movs	r2, #0
 8005800:	4b8c      	ldr	r3, [pc, #560]	; (8005a34 <_dtoa_r+0x614>)
 8005802:	f7fa fe69 	bl	80004d8 <__aeabi_dmul>
 8005806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800580a:	9e04      	ldr	r6, [sp, #16]
 800580c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005810:	3501      	adds	r5, #1
 8005812:	4628      	mov	r0, r5
 8005814:	f7fa fdf6 	bl	8000404 <__aeabi_i2d>
 8005818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581c:	f7fa fe5c 	bl	80004d8 <__aeabi_dmul>
 8005820:	2200      	movs	r2, #0
 8005822:	4b85      	ldr	r3, [pc, #532]	; (8005a38 <_dtoa_r+0x618>)
 8005824:	f7fa fca2 	bl	800016c <__adddf3>
 8005828:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800582c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005830:	950b      	str	r5, [sp, #44]	; 0x2c
 8005832:	2e00      	cmp	r6, #0
 8005834:	d15c      	bne.n	80058f0 <_dtoa_r+0x4d0>
 8005836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	4b7f      	ldr	r3, [pc, #508]	; (8005a3c <_dtoa_r+0x61c>)
 800583e:	f7fa fc93 	bl	8000168 <__aeabi_dsub>
 8005842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005844:	462b      	mov	r3, r5
 8005846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800584a:	f7fb f8d5 	bl	80009f8 <__aeabi_dcmpgt>
 800584e:	2800      	cmp	r0, #0
 8005850:	f040 8281 	bne.w	8005d56 <_dtoa_r+0x936>
 8005854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800585a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800585e:	f7fb f8ad 	bl	80009bc <__aeabi_dcmplt>
 8005862:	2800      	cmp	r0, #0
 8005864:	f040 8275 	bne.w	8005d52 <_dtoa_r+0x932>
 8005868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800586c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005872:	2b00      	cmp	r3, #0
 8005874:	f2c0 814b 	blt.w	8005b0e <_dtoa_r+0x6ee>
 8005878:	f1ba 0f0e 	cmp.w	sl, #14
 800587c:	f300 8147 	bgt.w	8005b0e <_dtoa_r+0x6ee>
 8005880:	4b69      	ldr	r3, [pc, #420]	; (8005a28 <_dtoa_r+0x608>)
 8005882:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800588e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005890:	2b00      	cmp	r3, #0
 8005892:	f280 80d7 	bge.w	8005a44 <_dtoa_r+0x624>
 8005896:	f1b8 0f00 	cmp.w	r8, #0
 800589a:	f300 80d3 	bgt.w	8005a44 <_dtoa_r+0x624>
 800589e:	f040 8257 	bne.w	8005d50 <_dtoa_r+0x930>
 80058a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a6:	2200      	movs	r2, #0
 80058a8:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <_dtoa_r+0x61c>)
 80058aa:	f7fa fe15 	bl	80004d8 <__aeabi_dmul>
 80058ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b2:	f7fb f897 	bl	80009e4 <__aeabi_dcmpge>
 80058b6:	4646      	mov	r6, r8
 80058b8:	4647      	mov	r7, r8
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 822d 	bne.w	8005d1a <_dtoa_r+0x8fa>
 80058c0:	9b06      	ldr	r3, [sp, #24]
 80058c2:	9a06      	ldr	r2, [sp, #24]
 80058c4:	1c5d      	adds	r5, r3, #1
 80058c6:	2331      	movs	r3, #49	; 0x31
 80058c8:	f10a 0a01 	add.w	sl, sl, #1
 80058cc:	7013      	strb	r3, [r2, #0]
 80058ce:	e228      	b.n	8005d22 <_dtoa_r+0x902>
 80058d0:	07f2      	lsls	r2, r6, #31
 80058d2:	d505      	bpl.n	80058e0 <_dtoa_r+0x4c0>
 80058d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d8:	f7fa fdfe 	bl	80004d8 <__aeabi_dmul>
 80058dc:	2301      	movs	r3, #1
 80058de:	3501      	adds	r5, #1
 80058e0:	1076      	asrs	r6, r6, #1
 80058e2:	3708      	adds	r7, #8
 80058e4:	e76e      	b.n	80057c4 <_dtoa_r+0x3a4>
 80058e6:	2502      	movs	r5, #2
 80058e8:	e771      	b.n	80057ce <_dtoa_r+0x3ae>
 80058ea:	4657      	mov	r7, sl
 80058ec:	4646      	mov	r6, r8
 80058ee:	e790      	b.n	8005812 <_dtoa_r+0x3f2>
 80058f0:	4b4d      	ldr	r3, [pc, #308]	; (8005a28 <_dtoa_r+0x608>)
 80058f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d048      	beq.n	8005992 <_dtoa_r+0x572>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	2000      	movs	r0, #0
 8005906:	494e      	ldr	r1, [pc, #312]	; (8005a40 <_dtoa_r+0x620>)
 8005908:	f7fa ff10 	bl	800072c <__aeabi_ddiv>
 800590c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005910:	f7fa fc2a 	bl	8000168 <__aeabi_dsub>
 8005914:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005918:	9d06      	ldr	r5, [sp, #24]
 800591a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800591e:	f7fb f88b 	bl	8000a38 <__aeabi_d2iz>
 8005922:	9011      	str	r0, [sp, #68]	; 0x44
 8005924:	f7fa fd6e 	bl	8000404 <__aeabi_i2d>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005930:	f7fa fc1a 	bl	8000168 <__aeabi_dsub>
 8005934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800593a:	3330      	adds	r3, #48	; 0x30
 800593c:	f805 3b01 	strb.w	r3, [r5], #1
 8005940:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005944:	f7fb f83a 	bl	80009bc <__aeabi_dcmplt>
 8005948:	2800      	cmp	r0, #0
 800594a:	d163      	bne.n	8005a14 <_dtoa_r+0x5f4>
 800594c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005950:	2000      	movs	r0, #0
 8005952:	4937      	ldr	r1, [pc, #220]	; (8005a30 <_dtoa_r+0x610>)
 8005954:	f7fa fc08 	bl	8000168 <__aeabi_dsub>
 8005958:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800595c:	f7fb f82e 	bl	80009bc <__aeabi_dcmplt>
 8005960:	2800      	cmp	r0, #0
 8005962:	f040 80b5 	bne.w	8005ad0 <_dtoa_r+0x6b0>
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	1aeb      	subs	r3, r5, r3
 800596a:	429e      	cmp	r6, r3
 800596c:	f77f af7c 	ble.w	8005868 <_dtoa_r+0x448>
 8005970:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005974:	2200      	movs	r2, #0
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <_dtoa_r+0x614>)
 8005978:	f7fa fdae 	bl	80004d8 <__aeabi_dmul>
 800597c:	2200      	movs	r2, #0
 800597e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <_dtoa_r+0x614>)
 8005988:	f7fa fda6 	bl	80004d8 <__aeabi_dmul>
 800598c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005990:	e7c3      	b.n	800591a <_dtoa_r+0x4fa>
 8005992:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005996:	f7fa fd9f 	bl	80004d8 <__aeabi_dmul>
 800599a:	9b06      	ldr	r3, [sp, #24]
 800599c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059a0:	199d      	adds	r5, r3, r6
 80059a2:	461e      	mov	r6, r3
 80059a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a8:	f7fb f846 	bl	8000a38 <__aeabi_d2iz>
 80059ac:	9011      	str	r0, [sp, #68]	; 0x44
 80059ae:	f7fa fd29 	bl	8000404 <__aeabi_i2d>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ba:	f7fa fbd5 	bl	8000168 <__aeabi_dsub>
 80059be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059c4:	3330      	adds	r3, #48	; 0x30
 80059c6:	f806 3b01 	strb.w	r3, [r6], #1
 80059ca:	42ae      	cmp	r6, r5
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	d124      	bne.n	8005a1c <_dtoa_r+0x5fc>
 80059d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <_dtoa_r+0x620>)
 80059d8:	f7fa fbc8 	bl	800016c <__adddf3>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e4:	f7fb f808 	bl	80009f8 <__aeabi_dcmpgt>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d171      	bne.n	8005ad0 <_dtoa_r+0x6b0>
 80059ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059f0:	2000      	movs	r0, #0
 80059f2:	4913      	ldr	r1, [pc, #76]	; (8005a40 <_dtoa_r+0x620>)
 80059f4:	f7fa fbb8 	bl	8000168 <__aeabi_dsub>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a00:	f7fa ffdc 	bl	80009bc <__aeabi_dcmplt>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f43f af2f 	beq.w	8005868 <_dtoa_r+0x448>
 8005a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a0e:	1e6a      	subs	r2, r5, #1
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d001      	beq.n	8005a18 <_dtoa_r+0x5f8>
 8005a14:	46ba      	mov	sl, r7
 8005a16:	e04a      	b.n	8005aae <_dtoa_r+0x68e>
 8005a18:	4615      	mov	r5, r2
 8005a1a:	e7f6      	b.n	8005a0a <_dtoa_r+0x5ea>
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <_dtoa_r+0x614>)
 8005a1e:	f7fa fd5b 	bl	80004d8 <__aeabi_dmul>
 8005a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a26:	e7bd      	b.n	80059a4 <_dtoa_r+0x584>
 8005a28:	08007488 	.word	0x08007488
 8005a2c:	08007460 	.word	0x08007460
 8005a30:	3ff00000 	.word	0x3ff00000
 8005a34:	40240000 	.word	0x40240000
 8005a38:	401c0000 	.word	0x401c0000
 8005a3c:	40140000 	.word	0x40140000
 8005a40:	3fe00000 	.word	0x3fe00000
 8005a44:	9d06      	ldr	r5, [sp, #24]
 8005a46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fe6b 	bl	800072c <__aeabi_ddiv>
 8005a56:	f7fa ffef 	bl	8000a38 <__aeabi_d2iz>
 8005a5a:	4681      	mov	r9, r0
 8005a5c:	f7fa fcd2 	bl	8000404 <__aeabi_i2d>
 8005a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a64:	f7fa fd38 	bl	80004d8 <__aeabi_dmul>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa fb7a 	bl	8000168 <__aeabi_dsub>
 8005a74:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a78:	f805 6b01 	strb.w	r6, [r5], #1
 8005a7c:	9e06      	ldr	r6, [sp, #24]
 8005a7e:	4602      	mov	r2, r0
 8005a80:	1bae      	subs	r6, r5, r6
 8005a82:	45b0      	cmp	r8, r6
 8005a84:	460b      	mov	r3, r1
 8005a86:	d135      	bne.n	8005af4 <_dtoa_r+0x6d4>
 8005a88:	f7fa fb70 	bl	800016c <__adddf3>
 8005a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	f7fa ffb0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a98:	b9c8      	cbnz	r0, 8005ace <_dtoa_r+0x6ae>
 8005a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa6:	b110      	cbz	r0, 8005aae <_dtoa_r+0x68e>
 8005aa8:	f019 0f01 	tst.w	r9, #1
 8005aac:	d10f      	bne.n	8005ace <_dtoa_r+0x6ae>
 8005aae:	4659      	mov	r1, fp
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 fe0c 	bl	80066ce <_Bfree>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005aba:	702b      	strb	r3, [r5, #0]
 8005abc:	f10a 0301 	add.w	r3, sl, #1
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f43f acf3 	beq.w	80054b0 <_dtoa_r+0x90>
 8005aca:	601d      	str	r5, [r3, #0]
 8005acc:	e4f0      	b.n	80054b0 <_dtoa_r+0x90>
 8005ace:	4657      	mov	r7, sl
 8005ad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ad4:	1e6b      	subs	r3, r5, #1
 8005ad6:	2a39      	cmp	r2, #57	; 0x39
 8005ad8:	d106      	bne.n	8005ae8 <_dtoa_r+0x6c8>
 8005ada:	9a06      	ldr	r2, [sp, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <_dtoa_r+0x6d0>
 8005ae0:	2330      	movs	r3, #48	; 0x30
 8005ae2:	7013      	strb	r3, [r2, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	3201      	adds	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e791      	b.n	8005a14 <_dtoa_r+0x5f4>
 8005af0:	461d      	mov	r5, r3
 8005af2:	e7ed      	b.n	8005ad0 <_dtoa_r+0x6b0>
 8005af4:	2200      	movs	r2, #0
 8005af6:	4b99      	ldr	r3, [pc, #612]	; (8005d5c <_dtoa_r+0x93c>)
 8005af8:	f7fa fcee 	bl	80004d8 <__aeabi_dmul>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	4606      	mov	r6, r0
 8005b02:	460f      	mov	r7, r1
 8005b04:	f7fa ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d09e      	beq.n	8005a4a <_dtoa_r+0x62a>
 8005b0c:	e7cf      	b.n	8005aae <_dtoa_r+0x68e>
 8005b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b10:	2a00      	cmp	r2, #0
 8005b12:	f000 8088 	beq.w	8005c26 <_dtoa_r+0x806>
 8005b16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b18:	2a01      	cmp	r2, #1
 8005b1a:	dc6d      	bgt.n	8005bf8 <_dtoa_r+0x7d8>
 8005b1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d066      	beq.n	8005bf0 <_dtoa_r+0x7d0>
 8005b22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b26:	464d      	mov	r5, r9
 8005b28:	9e08      	ldr	r6, [sp, #32]
 8005b2a:	9a07      	ldr	r2, [sp, #28]
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	441a      	add	r2, r3
 8005b30:	4620      	mov	r0, r4
 8005b32:	4499      	add	r9, r3
 8005b34:	9207      	str	r2, [sp, #28]
 8005b36:	f000 fea8 	bl	800688a <__i2b>
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	dd0b      	ble.n	8005b58 <_dtoa_r+0x738>
 8005b40:	9b07      	ldr	r3, [sp, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd08      	ble.n	8005b58 <_dtoa_r+0x738>
 8005b46:	42ab      	cmp	r3, r5
 8005b48:	bfa8      	it	ge
 8005b4a:	462b      	movge	r3, r5
 8005b4c:	9a07      	ldr	r2, [sp, #28]
 8005b4e:	eba9 0903 	sub.w	r9, r9, r3
 8005b52:	1aed      	subs	r5, r5, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	b1eb      	cbz	r3, 8005b98 <_dtoa_r+0x778>
 8005b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d065      	beq.n	8005c2e <_dtoa_r+0x80e>
 8005b62:	b18e      	cbz	r6, 8005b88 <_dtoa_r+0x768>
 8005b64:	4639      	mov	r1, r7
 8005b66:	4632      	mov	r2, r6
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 ff2d 	bl	80069c8 <__pow5mult>
 8005b6e:	465a      	mov	r2, fp
 8005b70:	4601      	mov	r1, r0
 8005b72:	4607      	mov	r7, r0
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fe91 	bl	800689c <__multiply>
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 fda5 	bl	80066ce <_Bfree>
 8005b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b86:	469b      	mov	fp, r3
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	1b9a      	subs	r2, r3, r6
 8005b8c:	d004      	beq.n	8005b98 <_dtoa_r+0x778>
 8005b8e:	4659      	mov	r1, fp
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 ff19 	bl	80069c8 <__pow5mult>
 8005b96:	4683      	mov	fp, r0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fe75 	bl	800688a <__i2b>
 8005ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 81c6 	beq.w	8005f36 <_dtoa_r+0xb16>
 8005baa:	461a      	mov	r2, r3
 8005bac:	4601      	mov	r1, r0
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 ff0a 	bl	80069c8 <__pow5mult>
 8005bb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	dc3e      	bgt.n	8005c3a <_dtoa_r+0x81a>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d137      	bne.n	8005c32 <_dtoa_r+0x812>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d134      	bne.n	8005c36 <_dtoa_r+0x816>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd2:	0d1b      	lsrs	r3, r3, #20
 8005bd4:	051b      	lsls	r3, r3, #20
 8005bd6:	b12b      	cbz	r3, 8005be4 <_dtoa_r+0x7c4>
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	f109 0901 	add.w	r9, r9, #1
 8005bde:	3301      	adds	r3, #1
 8005be0:	9307      	str	r3, [sp, #28]
 8005be2:	2301      	movs	r3, #1
 8005be4:	9308      	str	r3, [sp, #32]
 8005be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d128      	bne.n	8005c3e <_dtoa_r+0x81e>
 8005bec:	2001      	movs	r0, #1
 8005bee:	e02e      	b.n	8005c4e <_dtoa_r+0x82e>
 8005bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bf6:	e796      	b.n	8005b26 <_dtoa_r+0x706>
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005bfe:	42b3      	cmp	r3, r6
 8005c00:	bfb7      	itett	lt
 8005c02:	9b08      	ldrlt	r3, [sp, #32]
 8005c04:	1b9e      	subge	r6, r3, r6
 8005c06:	1af2      	sublt	r2, r6, r3
 8005c08:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005c0a:	bfbf      	itttt	lt
 8005c0c:	9608      	strlt	r6, [sp, #32]
 8005c0e:	189b      	addlt	r3, r3, r2
 8005c10:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005c12:	2600      	movlt	r6, #0
 8005c14:	f1b8 0f00 	cmp.w	r8, #0
 8005c18:	bfb9      	ittee	lt
 8005c1a:	eba9 0508 	sublt.w	r5, r9, r8
 8005c1e:	2300      	movlt	r3, #0
 8005c20:	464d      	movge	r5, r9
 8005c22:	4643      	movge	r3, r8
 8005c24:	e781      	b.n	8005b2a <_dtoa_r+0x70a>
 8005c26:	9e08      	ldr	r6, [sp, #32]
 8005c28:	464d      	mov	r5, r9
 8005c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c2c:	e786      	b.n	8005b3c <_dtoa_r+0x71c>
 8005c2e:	9a08      	ldr	r2, [sp, #32]
 8005c30:	e7ad      	b.n	8005b8e <_dtoa_r+0x76e>
 8005c32:	2300      	movs	r3, #0
 8005c34:	e7d6      	b.n	8005be4 <_dtoa_r+0x7c4>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	e7d4      	b.n	8005be4 <_dtoa_r+0x7c4>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9308      	str	r3, [sp, #32]
 8005c3e:	6933      	ldr	r3, [r6, #16]
 8005c40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c44:	6918      	ldr	r0, [r3, #16]
 8005c46:	f000 fdd2 	bl	80067ee <__hi0bits>
 8005c4a:	f1c0 0020 	rsb	r0, r0, #32
 8005c4e:	9b07      	ldr	r3, [sp, #28]
 8005c50:	4418      	add	r0, r3
 8005c52:	f010 001f 	ands.w	r0, r0, #31
 8005c56:	d047      	beq.n	8005ce8 <_dtoa_r+0x8c8>
 8005c58:	f1c0 0320 	rsb	r3, r0, #32
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	dd3b      	ble.n	8005cd8 <_dtoa_r+0x8b8>
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	f1c0 001c 	rsb	r0, r0, #28
 8005c66:	4481      	add	r9, r0
 8005c68:	4405      	add	r5, r0
 8005c6a:	4403      	add	r3, r0
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	f1b9 0f00 	cmp.w	r9, #0
 8005c72:	dd05      	ble.n	8005c80 <_dtoa_r+0x860>
 8005c74:	4659      	mov	r1, fp
 8005c76:	464a      	mov	r2, r9
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fef3 	bl	8006a64 <__lshift>
 8005c7e:	4683      	mov	fp, r0
 8005c80:	9b07      	ldr	r3, [sp, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd05      	ble.n	8005c92 <_dtoa_r+0x872>
 8005c86:	4631      	mov	r1, r6
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 feea 	bl	8006a64 <__lshift>
 8005c90:	4606      	mov	r6, r0
 8005c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c94:	b353      	cbz	r3, 8005cec <_dtoa_r+0x8cc>
 8005c96:	4631      	mov	r1, r6
 8005c98:	4658      	mov	r0, fp
 8005c9a:	f000 ff37 	bl	8006b0c <__mcmp>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	da24      	bge.n	8005cec <_dtoa_r+0x8cc>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fd27 	bl	80066fc <__multadd>
 8005cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cb4:	4683      	mov	fp, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8144 	beq.w	8005f44 <_dtoa_r+0xb24>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	220a      	movs	r2, #10
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 fd1a 	bl	80066fc <__multadd>
 8005cc8:	9b04      	ldr	r3, [sp, #16]
 8005cca:	4607      	mov	r7, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dc4d      	bgt.n	8005d6c <_dtoa_r+0x94c>
 8005cd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	dd4a      	ble.n	8005d6c <_dtoa_r+0x94c>
 8005cd6:	e011      	b.n	8005cfc <_dtoa_r+0x8dc>
 8005cd8:	d0c9      	beq.n	8005c6e <_dtoa_r+0x84e>
 8005cda:	9a07      	ldr	r2, [sp, #28]
 8005cdc:	331c      	adds	r3, #28
 8005cde:	441a      	add	r2, r3
 8005ce0:	4499      	add	r9, r3
 8005ce2:	441d      	add	r5, r3
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	e7c1      	b.n	8005c6c <_dtoa_r+0x84c>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	e7f6      	b.n	8005cda <_dtoa_r+0x8ba>
 8005cec:	f1b8 0f00 	cmp.w	r8, #0
 8005cf0:	dc36      	bgt.n	8005d60 <_dtoa_r+0x940>
 8005cf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	dd33      	ble.n	8005d60 <_dtoa_r+0x940>
 8005cf8:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cfc:	9b04      	ldr	r3, [sp, #16]
 8005cfe:	b963      	cbnz	r3, 8005d1a <_dtoa_r+0x8fa>
 8005d00:	4631      	mov	r1, r6
 8005d02:	2205      	movs	r2, #5
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fcf9 	bl	80066fc <__multadd>
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	4658      	mov	r0, fp
 8005d10:	f000 fefc 	bl	8006b0c <__mcmp>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f73f add3 	bgt.w	80058c0 <_dtoa_r+0x4a0>
 8005d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d1c:	9d06      	ldr	r5, [sp, #24]
 8005d1e:	ea6f 0a03 	mvn.w	sl, r3
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	4631      	mov	r1, r6
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fcd0 	bl	80066ce <_Bfree>
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	f43f aebd 	beq.w	8005aae <_dtoa_r+0x68e>
 8005d34:	f1b9 0f00 	cmp.w	r9, #0
 8005d38:	d005      	beq.n	8005d46 <_dtoa_r+0x926>
 8005d3a:	45b9      	cmp	r9, r7
 8005d3c:	d003      	beq.n	8005d46 <_dtoa_r+0x926>
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fcc4 	bl	80066ce <_Bfree>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fcc0 	bl	80066ce <_Bfree>
 8005d4e:	e6ae      	b.n	8005aae <_dtoa_r+0x68e>
 8005d50:	2600      	movs	r6, #0
 8005d52:	4637      	mov	r7, r6
 8005d54:	e7e1      	b.n	8005d1a <_dtoa_r+0x8fa>
 8005d56:	46ba      	mov	sl, r7
 8005d58:	4637      	mov	r7, r6
 8005d5a:	e5b1      	b.n	80058c0 <_dtoa_r+0x4a0>
 8005d5c:	40240000 	.word	0x40240000
 8005d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d62:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80f3 	beq.w	8005f52 <_dtoa_r+0xb32>
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	dd05      	ble.n	8005d7c <_dtoa_r+0x95c>
 8005d70:	4639      	mov	r1, r7
 8005d72:	462a      	mov	r2, r5
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fe75 	bl	8006a64 <__lshift>
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d04c      	beq.n	8005e1c <_dtoa_r+0x9fc>
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fc6e 	bl	8006666 <_Balloc>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	f107 010c 	add.w	r1, r7, #12
 8005d92:	3202      	adds	r2, #2
 8005d94:	0092      	lsls	r2, r2, #2
 8005d96:	300c      	adds	r0, #12
 8005d98:	f000 fc5a 	bl	8006650 <memcpy>
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fe5f 	bl	8006a64 <__lshift>
 8005da6:	46b9      	mov	r9, r7
 8005da8:	4607      	mov	r7, r0
 8005daa:	9b06      	ldr	r3, [sp, #24]
 8005dac:	9307      	str	r3, [sp, #28]
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	9308      	str	r3, [sp, #32]
 8005db6:	4631      	mov	r1, r6
 8005db8:	4658      	mov	r0, fp
 8005dba:	f7ff faa3 	bl	8005304 <quorem>
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005dc6:	4658      	mov	r0, fp
 8005dc8:	f000 fea0 	bl	8006b0c <__mcmp>
 8005dcc:	463a      	mov	r2, r7
 8005dce:	9002      	str	r0, [sp, #8]
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 feb4 	bl	8006b40 <__mdiff>
 8005dd8:	68c3      	ldr	r3, [r0, #12]
 8005dda:	4602      	mov	r2, r0
 8005ddc:	bb03      	cbnz	r3, 8005e20 <_dtoa_r+0xa00>
 8005dde:	4601      	mov	r1, r0
 8005de0:	9009      	str	r0, [sp, #36]	; 0x24
 8005de2:	4658      	mov	r0, fp
 8005de4:	f000 fe92 	bl	8006b0c <__mcmp>
 8005de8:	4603      	mov	r3, r0
 8005dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dec:	4611      	mov	r1, r2
 8005dee:	4620      	mov	r0, r4
 8005df0:	9309      	str	r3, [sp, #36]	; 0x24
 8005df2:	f000 fc6c 	bl	80066ce <_Bfree>
 8005df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df8:	b9a3      	cbnz	r3, 8005e24 <_dtoa_r+0xa04>
 8005dfa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dfc:	b992      	cbnz	r2, 8005e24 <_dtoa_r+0xa04>
 8005dfe:	9a08      	ldr	r2, [sp, #32]
 8005e00:	b982      	cbnz	r2, 8005e24 <_dtoa_r+0xa04>
 8005e02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e06:	d029      	beq.n	8005e5c <_dtoa_r+0xa3c>
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd01      	ble.n	8005e12 <_dtoa_r+0x9f2>
 8005e0e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	1c5d      	adds	r5, r3, #1
 8005e16:	f883 8000 	strb.w	r8, [r3]
 8005e1a:	e784      	b.n	8005d26 <_dtoa_r+0x906>
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	e7c2      	b.n	8005da6 <_dtoa_r+0x986>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e7e3      	b.n	8005dec <_dtoa_r+0x9cc>
 8005e24:	9a02      	ldr	r2, [sp, #8]
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	db04      	blt.n	8005e34 <_dtoa_r+0xa14>
 8005e2a:	d123      	bne.n	8005e74 <_dtoa_r+0xa54>
 8005e2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e2e:	bb0a      	cbnz	r2, 8005e74 <_dtoa_r+0xa54>
 8005e30:	9a08      	ldr	r2, [sp, #32]
 8005e32:	b9fa      	cbnz	r2, 8005e74 <_dtoa_r+0xa54>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	ddec      	ble.n	8005e12 <_dtoa_r+0x9f2>
 8005e38:	4659      	mov	r1, fp
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fe11 	bl	8006a64 <__lshift>
 8005e42:	4631      	mov	r1, r6
 8005e44:	4683      	mov	fp, r0
 8005e46:	f000 fe61 	bl	8006b0c <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	dc03      	bgt.n	8005e56 <_dtoa_r+0xa36>
 8005e4e:	d1e0      	bne.n	8005e12 <_dtoa_r+0x9f2>
 8005e50:	f018 0f01 	tst.w	r8, #1
 8005e54:	d0dd      	beq.n	8005e12 <_dtoa_r+0x9f2>
 8005e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e5a:	d1d8      	bne.n	8005e0e <_dtoa_r+0x9ee>
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	9a07      	ldr	r2, [sp, #28]
 8005e60:	1c5d      	adds	r5, r3, #1
 8005e62:	2339      	movs	r3, #57	; 0x39
 8005e64:	7013      	strb	r3, [r2, #0]
 8005e66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e6a:	1e6a      	subs	r2, r5, #1
 8005e6c:	2b39      	cmp	r3, #57	; 0x39
 8005e6e:	d04d      	beq.n	8005f0c <_dtoa_r+0xaec>
 8005e70:	3301      	adds	r3, #1
 8005e72:	e052      	b.n	8005f1a <_dtoa_r+0xafa>
 8005e74:	9a07      	ldr	r2, [sp, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f102 0501 	add.w	r5, r2, #1
 8005e7c:	dd06      	ble.n	8005e8c <_dtoa_r+0xa6c>
 8005e7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e82:	d0eb      	beq.n	8005e5c <_dtoa_r+0xa3c>
 8005e84:	f108 0801 	add.w	r8, r8, #1
 8005e88:	9b07      	ldr	r3, [sp, #28]
 8005e8a:	e7c4      	b.n	8005e16 <_dtoa_r+0x9f6>
 8005e8c:	9b06      	ldr	r3, [sp, #24]
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	1aeb      	subs	r3, r5, r3
 8005e92:	4293      	cmp	r3, r2
 8005e94:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e98:	d021      	beq.n	8005ede <_dtoa_r+0xabe>
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fc2b 	bl	80066fc <__multadd>
 8005ea6:	45b9      	cmp	r9, r7
 8005ea8:	4683      	mov	fp, r0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	f04f 020a 	mov.w	r2, #10
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	d105      	bne.n	8005ec4 <_dtoa_r+0xaa4>
 8005eb8:	f000 fc20 	bl	80066fc <__multadd>
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	9507      	str	r5, [sp, #28]
 8005ec2:	e778      	b.n	8005db6 <_dtoa_r+0x996>
 8005ec4:	f000 fc1a 	bl	80066fc <__multadd>
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4681      	mov	r9, r0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	220a      	movs	r2, #10
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fc13 	bl	80066fc <__multadd>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	e7f2      	b.n	8005ec0 <_dtoa_r+0xaa0>
 8005eda:	f04f 0900 	mov.w	r9, #0
 8005ede:	4659      	mov	r1, fp
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fdbe 	bl	8006a64 <__lshift>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4683      	mov	fp, r0
 8005eec:	f000 fe0e 	bl	8006b0c <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dcb8      	bgt.n	8005e66 <_dtoa_r+0xa46>
 8005ef4:	d102      	bne.n	8005efc <_dtoa_r+0xadc>
 8005ef6:	f018 0f01 	tst.w	r8, #1
 8005efa:	d1b4      	bne.n	8005e66 <_dtoa_r+0xa46>
 8005efc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f00:	1e6a      	subs	r2, r5, #1
 8005f02:	2b30      	cmp	r3, #48	; 0x30
 8005f04:	f47f af0f 	bne.w	8005d26 <_dtoa_r+0x906>
 8005f08:	4615      	mov	r5, r2
 8005f0a:	e7f7      	b.n	8005efc <_dtoa_r+0xadc>
 8005f0c:	9b06      	ldr	r3, [sp, #24]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d105      	bne.n	8005f1e <_dtoa_r+0xafe>
 8005f12:	2331      	movs	r3, #49	; 0x31
 8005f14:	9a06      	ldr	r2, [sp, #24]
 8005f16:	f10a 0a01 	add.w	sl, sl, #1
 8005f1a:	7013      	strb	r3, [r2, #0]
 8005f1c:	e703      	b.n	8005d26 <_dtoa_r+0x906>
 8005f1e:	4615      	mov	r5, r2
 8005f20:	e7a1      	b.n	8005e66 <_dtoa_r+0xa46>
 8005f22:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <_dtoa_r+0xb60>)
 8005f24:	f7ff bae1 	b.w	80054ea <_dtoa_r+0xca>
 8005f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f47f aabb 	bne.w	80054a6 <_dtoa_r+0x86>
 8005f30:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <_dtoa_r+0xb64>)
 8005f32:	f7ff bada 	b.w	80054ea <_dtoa_r+0xca>
 8005f36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	f77f ae3f 	ble.w	8005bbc <_dtoa_r+0x79c>
 8005f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f40:	9308      	str	r3, [sp, #32]
 8005f42:	e653      	b.n	8005bec <_dtoa_r+0x7cc>
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dc03      	bgt.n	8005f52 <_dtoa_r+0xb32>
 8005f4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f73f aed5 	bgt.w	8005cfc <_dtoa_r+0x8dc>
 8005f52:	9d06      	ldr	r5, [sp, #24]
 8005f54:	4631      	mov	r1, r6
 8005f56:	4658      	mov	r0, fp
 8005f58:	f7ff f9d4 	bl	8005304 <quorem>
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f62:	f805 8b01 	strb.w	r8, [r5], #1
 8005f66:	9a04      	ldr	r2, [sp, #16]
 8005f68:	1aeb      	subs	r3, r5, r3
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	ddb5      	ble.n	8005eda <_dtoa_r+0xaba>
 8005f6e:	4659      	mov	r1, fp
 8005f70:	2300      	movs	r3, #0
 8005f72:	220a      	movs	r2, #10
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 fbc1 	bl	80066fc <__multadd>
 8005f7a:	4683      	mov	fp, r0
 8005f7c:	e7ea      	b.n	8005f54 <_dtoa_r+0xb34>
 8005f7e:	bf00      	nop
 8005f80:	080073cc 	.word	0x080073cc
 8005f84:	08007448 	.word	0x08007448

08005f88 <rshift>:
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	6906      	ldr	r6, [r0, #16]
 8005f8c:	114b      	asrs	r3, r1, #5
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	f100 0414 	add.w	r4, r0, #20
 8005f94:	dd31      	ble.n	8005ffa <rshift+0x72>
 8005f96:	f011 011f 	ands.w	r1, r1, #31
 8005f9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005f9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005fa2:	d108      	bne.n	8005fb6 <rshift+0x2e>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	42b2      	cmp	r2, r6
 8005fa8:	460b      	mov	r3, r1
 8005faa:	d211      	bcs.n	8005fd0 <rshift+0x48>
 8005fac:	f852 3b04 	ldr.w	r3, [r2], #4
 8005fb0:	f841 3b04 	str.w	r3, [r1], #4
 8005fb4:	e7f7      	b.n	8005fa6 <rshift+0x1e>
 8005fb6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005fba:	4623      	mov	r3, r4
 8005fbc:	f1c1 0c20 	rsb	ip, r1, #32
 8005fc0:	40cd      	lsrs	r5, r1
 8005fc2:	3204      	adds	r2, #4
 8005fc4:	42b2      	cmp	r2, r6
 8005fc6:	4617      	mov	r7, r2
 8005fc8:	d30d      	bcc.n	8005fe6 <rshift+0x5e>
 8005fca:	601d      	str	r5, [r3, #0]
 8005fcc:	b105      	cbz	r5, 8005fd0 <rshift+0x48>
 8005fce:	3304      	adds	r3, #4
 8005fd0:	42a3      	cmp	r3, r4
 8005fd2:	eba3 0204 	sub.w	r2, r3, r4
 8005fd6:	bf08      	it	eq
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005fde:	6102      	str	r2, [r0, #16]
 8005fe0:	bf08      	it	eq
 8005fe2:	6143      	streq	r3, [r0, #20]
 8005fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe6:	683f      	ldr	r7, [r7, #0]
 8005fe8:	fa07 f70c 	lsl.w	r7, r7, ip
 8005fec:	433d      	orrs	r5, r7
 8005fee:	f843 5b04 	str.w	r5, [r3], #4
 8005ff2:	f852 5b04 	ldr.w	r5, [r2], #4
 8005ff6:	40cd      	lsrs	r5, r1
 8005ff8:	e7e4      	b.n	8005fc4 <rshift+0x3c>
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	e7e8      	b.n	8005fd0 <rshift+0x48>

08005ffe <__hexdig_fun>:
 8005ffe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006002:	2b09      	cmp	r3, #9
 8006004:	d802      	bhi.n	800600c <__hexdig_fun+0xe>
 8006006:	3820      	subs	r0, #32
 8006008:	b2c0      	uxtb	r0, r0
 800600a:	4770      	bx	lr
 800600c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006010:	2b05      	cmp	r3, #5
 8006012:	d801      	bhi.n	8006018 <__hexdig_fun+0x1a>
 8006014:	3847      	subs	r0, #71	; 0x47
 8006016:	e7f7      	b.n	8006008 <__hexdig_fun+0xa>
 8006018:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800601c:	2b05      	cmp	r3, #5
 800601e:	d801      	bhi.n	8006024 <__hexdig_fun+0x26>
 8006020:	3827      	subs	r0, #39	; 0x27
 8006022:	e7f1      	b.n	8006008 <__hexdig_fun+0xa>
 8006024:	2000      	movs	r0, #0
 8006026:	4770      	bx	lr

08006028 <__gethex>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	b08b      	sub	sp, #44	; 0x2c
 800602e:	9002      	str	r0, [sp, #8]
 8006030:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006032:	468a      	mov	sl, r1
 8006034:	4690      	mov	r8, r2
 8006036:	9306      	str	r3, [sp, #24]
 8006038:	f000 fad1 	bl	80065de <__localeconv_l>
 800603c:	6803      	ldr	r3, [r0, #0]
 800603e:	f04f 0b00 	mov.w	fp, #0
 8006042:	4618      	mov	r0, r3
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	f7fa f883 	bl	8000150 <strlen>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	9001      	str	r0, [sp, #4]
 800604e:	4403      	add	r3, r0
 8006050:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006054:	9307      	str	r3, [sp, #28]
 8006056:	f8da 3000 	ldr.w	r3, [sl]
 800605a:	3302      	adds	r3, #2
 800605c:	461f      	mov	r7, r3
 800605e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006062:	2830      	cmp	r0, #48	; 0x30
 8006064:	d06c      	beq.n	8006140 <__gethex+0x118>
 8006066:	f7ff ffca 	bl	8005ffe <__hexdig_fun>
 800606a:	4604      	mov	r4, r0
 800606c:	2800      	cmp	r0, #0
 800606e:	d16a      	bne.n	8006146 <__gethex+0x11e>
 8006070:	9a01      	ldr	r2, [sp, #4]
 8006072:	9903      	ldr	r1, [sp, #12]
 8006074:	4638      	mov	r0, r7
 8006076:	f001 f905 	bl	8007284 <strncmp>
 800607a:	2800      	cmp	r0, #0
 800607c:	d166      	bne.n	800614c <__gethex+0x124>
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	5cf8      	ldrb	r0, [r7, r3]
 8006082:	18fe      	adds	r6, r7, r3
 8006084:	f7ff ffbb 	bl	8005ffe <__hexdig_fun>
 8006088:	2800      	cmp	r0, #0
 800608a:	d062      	beq.n	8006152 <__gethex+0x12a>
 800608c:	4633      	mov	r3, r6
 800608e:	7818      	ldrb	r0, [r3, #0]
 8006090:	461f      	mov	r7, r3
 8006092:	2830      	cmp	r0, #48	; 0x30
 8006094:	f103 0301 	add.w	r3, r3, #1
 8006098:	d0f9      	beq.n	800608e <__gethex+0x66>
 800609a:	f7ff ffb0 	bl	8005ffe <__hexdig_fun>
 800609e:	fab0 f580 	clz	r5, r0
 80060a2:	4634      	mov	r4, r6
 80060a4:	f04f 0b01 	mov.w	fp, #1
 80060a8:	096d      	lsrs	r5, r5, #5
 80060aa:	463a      	mov	r2, r7
 80060ac:	4616      	mov	r6, r2
 80060ae:	7830      	ldrb	r0, [r6, #0]
 80060b0:	3201      	adds	r2, #1
 80060b2:	f7ff ffa4 	bl	8005ffe <__hexdig_fun>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d1f8      	bne.n	80060ac <__gethex+0x84>
 80060ba:	9a01      	ldr	r2, [sp, #4]
 80060bc:	9903      	ldr	r1, [sp, #12]
 80060be:	4630      	mov	r0, r6
 80060c0:	f001 f8e0 	bl	8007284 <strncmp>
 80060c4:	b950      	cbnz	r0, 80060dc <__gethex+0xb4>
 80060c6:	b954      	cbnz	r4, 80060de <__gethex+0xb6>
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	18f4      	adds	r4, r6, r3
 80060cc:	4622      	mov	r2, r4
 80060ce:	4616      	mov	r6, r2
 80060d0:	7830      	ldrb	r0, [r6, #0]
 80060d2:	3201      	adds	r2, #1
 80060d4:	f7ff ff93 	bl	8005ffe <__hexdig_fun>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d1f8      	bne.n	80060ce <__gethex+0xa6>
 80060dc:	b10c      	cbz	r4, 80060e2 <__gethex+0xba>
 80060de:	1ba4      	subs	r4, r4, r6
 80060e0:	00a4      	lsls	r4, r4, #2
 80060e2:	7833      	ldrb	r3, [r6, #0]
 80060e4:	2b50      	cmp	r3, #80	; 0x50
 80060e6:	d001      	beq.n	80060ec <__gethex+0xc4>
 80060e8:	2b70      	cmp	r3, #112	; 0x70
 80060ea:	d140      	bne.n	800616e <__gethex+0x146>
 80060ec:	7873      	ldrb	r3, [r6, #1]
 80060ee:	2b2b      	cmp	r3, #43	; 0x2b
 80060f0:	d031      	beq.n	8006156 <__gethex+0x12e>
 80060f2:	2b2d      	cmp	r3, #45	; 0x2d
 80060f4:	d033      	beq.n	800615e <__gethex+0x136>
 80060f6:	f04f 0900 	mov.w	r9, #0
 80060fa:	1c71      	adds	r1, r6, #1
 80060fc:	7808      	ldrb	r0, [r1, #0]
 80060fe:	f7ff ff7e 	bl	8005ffe <__hexdig_fun>
 8006102:	1e43      	subs	r3, r0, #1
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b18      	cmp	r3, #24
 8006108:	d831      	bhi.n	800616e <__gethex+0x146>
 800610a:	f1a0 0210 	sub.w	r2, r0, #16
 800610e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006112:	f7ff ff74 	bl	8005ffe <__hexdig_fun>
 8006116:	1e43      	subs	r3, r0, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b18      	cmp	r3, #24
 800611c:	d922      	bls.n	8006164 <__gethex+0x13c>
 800611e:	f1b9 0f00 	cmp.w	r9, #0
 8006122:	d000      	beq.n	8006126 <__gethex+0xfe>
 8006124:	4252      	negs	r2, r2
 8006126:	4414      	add	r4, r2
 8006128:	f8ca 1000 	str.w	r1, [sl]
 800612c:	b30d      	cbz	r5, 8006172 <__gethex+0x14a>
 800612e:	f1bb 0f00 	cmp.w	fp, #0
 8006132:	bf0c      	ite	eq
 8006134:	2706      	moveq	r7, #6
 8006136:	2700      	movne	r7, #0
 8006138:	4638      	mov	r0, r7
 800613a:	b00b      	add	sp, #44	; 0x2c
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	f10b 0b01 	add.w	fp, fp, #1
 8006144:	e78a      	b.n	800605c <__gethex+0x34>
 8006146:	2500      	movs	r5, #0
 8006148:	462c      	mov	r4, r5
 800614a:	e7ae      	b.n	80060aa <__gethex+0x82>
 800614c:	463e      	mov	r6, r7
 800614e:	2501      	movs	r5, #1
 8006150:	e7c7      	b.n	80060e2 <__gethex+0xba>
 8006152:	4604      	mov	r4, r0
 8006154:	e7fb      	b.n	800614e <__gethex+0x126>
 8006156:	f04f 0900 	mov.w	r9, #0
 800615a:	1cb1      	adds	r1, r6, #2
 800615c:	e7ce      	b.n	80060fc <__gethex+0xd4>
 800615e:	f04f 0901 	mov.w	r9, #1
 8006162:	e7fa      	b.n	800615a <__gethex+0x132>
 8006164:	230a      	movs	r3, #10
 8006166:	fb03 0202 	mla	r2, r3, r2, r0
 800616a:	3a10      	subs	r2, #16
 800616c:	e7cf      	b.n	800610e <__gethex+0xe6>
 800616e:	4631      	mov	r1, r6
 8006170:	e7da      	b.n	8006128 <__gethex+0x100>
 8006172:	4629      	mov	r1, r5
 8006174:	1bf3      	subs	r3, r6, r7
 8006176:	3b01      	subs	r3, #1
 8006178:	2b07      	cmp	r3, #7
 800617a:	dc49      	bgt.n	8006210 <__gethex+0x1e8>
 800617c:	9802      	ldr	r0, [sp, #8]
 800617e:	f000 fa72 	bl	8006666 <_Balloc>
 8006182:	f04f 0b00 	mov.w	fp, #0
 8006186:	4605      	mov	r5, r0
 8006188:	46da      	mov	sl, fp
 800618a:	9b01      	ldr	r3, [sp, #4]
 800618c:	f100 0914 	add.w	r9, r0, #20
 8006190:	f1c3 0301 	rsb	r3, r3, #1
 8006194:	f8cd 9010 	str.w	r9, [sp, #16]
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	42b7      	cmp	r7, r6
 800619c:	d33b      	bcc.n	8006216 <__gethex+0x1ee>
 800619e:	9804      	ldr	r0, [sp, #16]
 80061a0:	f840 ab04 	str.w	sl, [r0], #4
 80061a4:	eba0 0009 	sub.w	r0, r0, r9
 80061a8:	1080      	asrs	r0, r0, #2
 80061aa:	6128      	str	r0, [r5, #16]
 80061ac:	0147      	lsls	r7, r0, #5
 80061ae:	4650      	mov	r0, sl
 80061b0:	f000 fb1d 	bl	80067ee <__hi0bits>
 80061b4:	f8d8 6000 	ldr.w	r6, [r8]
 80061b8:	1a3f      	subs	r7, r7, r0
 80061ba:	42b7      	cmp	r7, r6
 80061bc:	dd64      	ble.n	8006288 <__gethex+0x260>
 80061be:	1bbf      	subs	r7, r7, r6
 80061c0:	4639      	mov	r1, r7
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 fe27 	bl	8006e16 <__any_on>
 80061c8:	4682      	mov	sl, r0
 80061ca:	b178      	cbz	r0, 80061ec <__gethex+0x1c4>
 80061cc:	f04f 0a01 	mov.w	sl, #1
 80061d0:	1e7b      	subs	r3, r7, #1
 80061d2:	1159      	asrs	r1, r3, #5
 80061d4:	f003 021f 	and.w	r2, r3, #31
 80061d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80061dc:	fa0a f202 	lsl.w	r2, sl, r2
 80061e0:	420a      	tst	r2, r1
 80061e2:	d003      	beq.n	80061ec <__gethex+0x1c4>
 80061e4:	4553      	cmp	r3, sl
 80061e6:	dc46      	bgt.n	8006276 <__gethex+0x24e>
 80061e8:	f04f 0a02 	mov.w	sl, #2
 80061ec:	4639      	mov	r1, r7
 80061ee:	4628      	mov	r0, r5
 80061f0:	f7ff feca 	bl	8005f88 <rshift>
 80061f4:	443c      	add	r4, r7
 80061f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	da52      	bge.n	80062a4 <__gethex+0x27c>
 80061fe:	4629      	mov	r1, r5
 8006200:	9802      	ldr	r0, [sp, #8]
 8006202:	f000 fa64 	bl	80066ce <_Bfree>
 8006206:	2300      	movs	r3, #0
 8006208:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800620a:	27a3      	movs	r7, #163	; 0xa3
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e793      	b.n	8006138 <__gethex+0x110>
 8006210:	3101      	adds	r1, #1
 8006212:	105b      	asrs	r3, r3, #1
 8006214:	e7b0      	b.n	8006178 <__gethex+0x150>
 8006216:	1e73      	subs	r3, r6, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	9a07      	ldr	r2, [sp, #28]
 800621c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006220:	4293      	cmp	r3, r2
 8006222:	d018      	beq.n	8006256 <__gethex+0x22e>
 8006224:	f1bb 0f20 	cmp.w	fp, #32
 8006228:	d107      	bne.n	800623a <__gethex+0x212>
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	f8c3 a000 	str.w	sl, [r3]
 8006230:	f04f 0a00 	mov.w	sl, #0
 8006234:	46d3      	mov	fp, sl
 8006236:	3304      	adds	r3, #4
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800623e:	f7ff fede 	bl	8005ffe <__hexdig_fun>
 8006242:	f000 000f 	and.w	r0, r0, #15
 8006246:	fa00 f00b 	lsl.w	r0, r0, fp
 800624a:	ea4a 0a00 	orr.w	sl, sl, r0
 800624e:	f10b 0b04 	add.w	fp, fp, #4
 8006252:	9b05      	ldr	r3, [sp, #20]
 8006254:	e00d      	b.n	8006272 <__gethex+0x24a>
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	9a08      	ldr	r2, [sp, #32]
 800625a:	4413      	add	r3, r2
 800625c:	42bb      	cmp	r3, r7
 800625e:	d3e1      	bcc.n	8006224 <__gethex+0x1fc>
 8006260:	4618      	mov	r0, r3
 8006262:	9a01      	ldr	r2, [sp, #4]
 8006264:	9903      	ldr	r1, [sp, #12]
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	f001 f80c 	bl	8007284 <strncmp>
 800626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626e:	2800      	cmp	r0, #0
 8006270:	d1d8      	bne.n	8006224 <__gethex+0x1fc>
 8006272:	461e      	mov	r6, r3
 8006274:	e791      	b.n	800619a <__gethex+0x172>
 8006276:	1eb9      	subs	r1, r7, #2
 8006278:	4628      	mov	r0, r5
 800627a:	f000 fdcc 	bl	8006e16 <__any_on>
 800627e:	2800      	cmp	r0, #0
 8006280:	d0b2      	beq.n	80061e8 <__gethex+0x1c0>
 8006282:	f04f 0a03 	mov.w	sl, #3
 8006286:	e7b1      	b.n	80061ec <__gethex+0x1c4>
 8006288:	da09      	bge.n	800629e <__gethex+0x276>
 800628a:	1bf7      	subs	r7, r6, r7
 800628c:	4629      	mov	r1, r5
 800628e:	463a      	mov	r2, r7
 8006290:	9802      	ldr	r0, [sp, #8]
 8006292:	f000 fbe7 	bl	8006a64 <__lshift>
 8006296:	4605      	mov	r5, r0
 8006298:	1be4      	subs	r4, r4, r7
 800629a:	f100 0914 	add.w	r9, r0, #20
 800629e:	f04f 0a00 	mov.w	sl, #0
 80062a2:	e7a8      	b.n	80061f6 <__gethex+0x1ce>
 80062a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	dd6b      	ble.n	8006384 <__gethex+0x35c>
 80062ac:	1b04      	subs	r4, r0, r4
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	dc2e      	bgt.n	8006310 <__gethex+0x2e8>
 80062b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d022      	beq.n	8006300 <__gethex+0x2d8>
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d024      	beq.n	8006308 <__gethex+0x2e0>
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d115      	bne.n	80062ee <__gethex+0x2c6>
 80062c2:	42a6      	cmp	r6, r4
 80062c4:	d113      	bne.n	80062ee <__gethex+0x2c6>
 80062c6:	2e01      	cmp	r6, #1
 80062c8:	dc0b      	bgt.n	80062e2 <__gethex+0x2ba>
 80062ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80062ce:	9a06      	ldr	r2, [sp, #24]
 80062d0:	2762      	movs	r7, #98	; 0x62
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	2301      	movs	r3, #1
 80062d6:	612b      	str	r3, [r5, #16]
 80062d8:	f8c9 3000 	str.w	r3, [r9]
 80062dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062de:	601d      	str	r5, [r3, #0]
 80062e0:	e72a      	b.n	8006138 <__gethex+0x110>
 80062e2:	1e71      	subs	r1, r6, #1
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 fd96 	bl	8006e16 <__any_on>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1ed      	bne.n	80062ca <__gethex+0x2a2>
 80062ee:	4629      	mov	r1, r5
 80062f0:	9802      	ldr	r0, [sp, #8]
 80062f2:	f000 f9ec 	bl	80066ce <_Bfree>
 80062f6:	2300      	movs	r3, #0
 80062f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062fa:	2750      	movs	r7, #80	; 0x50
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e71b      	b.n	8006138 <__gethex+0x110>
 8006300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0e1      	beq.n	80062ca <__gethex+0x2a2>
 8006306:	e7f2      	b.n	80062ee <__gethex+0x2c6>
 8006308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1dd      	bne.n	80062ca <__gethex+0x2a2>
 800630e:	e7ee      	b.n	80062ee <__gethex+0x2c6>
 8006310:	1e67      	subs	r7, r4, #1
 8006312:	f1ba 0f00 	cmp.w	sl, #0
 8006316:	d132      	bne.n	800637e <__gethex+0x356>
 8006318:	b127      	cbz	r7, 8006324 <__gethex+0x2fc>
 800631a:	4639      	mov	r1, r7
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fd7a 	bl	8006e16 <__any_on>
 8006322:	4682      	mov	sl, r0
 8006324:	2301      	movs	r3, #1
 8006326:	117a      	asrs	r2, r7, #5
 8006328:	f007 071f 	and.w	r7, r7, #31
 800632c:	fa03 f707 	lsl.w	r7, r3, r7
 8006330:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006334:	4621      	mov	r1, r4
 8006336:	421f      	tst	r7, r3
 8006338:	f04f 0702 	mov.w	r7, #2
 800633c:	4628      	mov	r0, r5
 800633e:	bf18      	it	ne
 8006340:	f04a 0a02 	orrne.w	sl, sl, #2
 8006344:	1b36      	subs	r6, r6, r4
 8006346:	f7ff fe1f 	bl	8005f88 <rshift>
 800634a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800634e:	f1ba 0f00 	cmp.w	sl, #0
 8006352:	d048      	beq.n	80063e6 <__gethex+0x3be>
 8006354:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d015      	beq.n	8006388 <__gethex+0x360>
 800635c:	2b03      	cmp	r3, #3
 800635e:	d017      	beq.n	8006390 <__gethex+0x368>
 8006360:	2b01      	cmp	r3, #1
 8006362:	d109      	bne.n	8006378 <__gethex+0x350>
 8006364:	f01a 0f02 	tst.w	sl, #2
 8006368:	d006      	beq.n	8006378 <__gethex+0x350>
 800636a:	f8d9 3000 	ldr.w	r3, [r9]
 800636e:	ea4a 0a03 	orr.w	sl, sl, r3
 8006372:	f01a 0f01 	tst.w	sl, #1
 8006376:	d10e      	bne.n	8006396 <__gethex+0x36e>
 8006378:	f047 0710 	orr.w	r7, r7, #16
 800637c:	e033      	b.n	80063e6 <__gethex+0x3be>
 800637e:	f04f 0a01 	mov.w	sl, #1
 8006382:	e7cf      	b.n	8006324 <__gethex+0x2fc>
 8006384:	2701      	movs	r7, #1
 8006386:	e7e2      	b.n	800634e <__gethex+0x326>
 8006388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800638a:	f1c3 0301 	rsb	r3, r3, #1
 800638e:	9315      	str	r3, [sp, #84]	; 0x54
 8006390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <__gethex+0x350>
 8006396:	f04f 0c00 	mov.w	ip, #0
 800639a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800639e:	f105 0314 	add.w	r3, r5, #20
 80063a2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80063a6:	eb03 010a 	add.w	r1, r3, sl
 80063aa:	4618      	mov	r0, r3
 80063ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80063b4:	d01c      	beq.n	80063f0 <__gethex+0x3c8>
 80063b6:	3201      	adds	r2, #1
 80063b8:	6002      	str	r2, [r0, #0]
 80063ba:	2f02      	cmp	r7, #2
 80063bc:	f105 0314 	add.w	r3, r5, #20
 80063c0:	d138      	bne.n	8006434 <__gethex+0x40c>
 80063c2:	f8d8 2000 	ldr.w	r2, [r8]
 80063c6:	3a01      	subs	r2, #1
 80063c8:	42b2      	cmp	r2, r6
 80063ca:	d10a      	bne.n	80063e2 <__gethex+0x3ba>
 80063cc:	2201      	movs	r2, #1
 80063ce:	1171      	asrs	r1, r6, #5
 80063d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063d4:	f006 061f 	and.w	r6, r6, #31
 80063d8:	fa02 f606 	lsl.w	r6, r2, r6
 80063dc:	421e      	tst	r6, r3
 80063de:	bf18      	it	ne
 80063e0:	4617      	movne	r7, r2
 80063e2:	f047 0720 	orr.w	r7, r7, #32
 80063e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063e8:	601d      	str	r5, [r3, #0]
 80063ea:	9b06      	ldr	r3, [sp, #24]
 80063ec:	601c      	str	r4, [r3, #0]
 80063ee:	e6a3      	b.n	8006138 <__gethex+0x110>
 80063f0:	4299      	cmp	r1, r3
 80063f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80063f6:	d8d8      	bhi.n	80063aa <__gethex+0x382>
 80063f8:	68ab      	ldr	r3, [r5, #8]
 80063fa:	4599      	cmp	r9, r3
 80063fc:	db12      	blt.n	8006424 <__gethex+0x3fc>
 80063fe:	6869      	ldr	r1, [r5, #4]
 8006400:	9802      	ldr	r0, [sp, #8]
 8006402:	3101      	adds	r1, #1
 8006404:	f000 f92f 	bl	8006666 <_Balloc>
 8006408:	4683      	mov	fp, r0
 800640a:	692a      	ldr	r2, [r5, #16]
 800640c:	f105 010c 	add.w	r1, r5, #12
 8006410:	3202      	adds	r2, #2
 8006412:	0092      	lsls	r2, r2, #2
 8006414:	300c      	adds	r0, #12
 8006416:	f000 f91b 	bl	8006650 <memcpy>
 800641a:	4629      	mov	r1, r5
 800641c:	9802      	ldr	r0, [sp, #8]
 800641e:	f000 f956 	bl	80066ce <_Bfree>
 8006422:	465d      	mov	r5, fp
 8006424:	692b      	ldr	r3, [r5, #16]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	612a      	str	r2, [r5, #16]
 800642a:	2201      	movs	r2, #1
 800642c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006430:	615a      	str	r2, [r3, #20]
 8006432:	e7c2      	b.n	80063ba <__gethex+0x392>
 8006434:	692a      	ldr	r2, [r5, #16]
 8006436:	454a      	cmp	r2, r9
 8006438:	dd0b      	ble.n	8006452 <__gethex+0x42a>
 800643a:	2101      	movs	r1, #1
 800643c:	4628      	mov	r0, r5
 800643e:	f7ff fda3 	bl	8005f88 <rshift>
 8006442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006446:	3401      	adds	r4, #1
 8006448:	42a3      	cmp	r3, r4
 800644a:	f6ff aed8 	blt.w	80061fe <__gethex+0x1d6>
 800644e:	2701      	movs	r7, #1
 8006450:	e7c7      	b.n	80063e2 <__gethex+0x3ba>
 8006452:	f016 061f 	ands.w	r6, r6, #31
 8006456:	d0fa      	beq.n	800644e <__gethex+0x426>
 8006458:	449a      	add	sl, r3
 800645a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800645e:	f000 f9c6 	bl	80067ee <__hi0bits>
 8006462:	f1c6 0620 	rsb	r6, r6, #32
 8006466:	42b0      	cmp	r0, r6
 8006468:	dbe7      	blt.n	800643a <__gethex+0x412>
 800646a:	e7f0      	b.n	800644e <__gethex+0x426>

0800646c <L_shift>:
 800646c:	f1c2 0208 	rsb	r2, r2, #8
 8006470:	0092      	lsls	r2, r2, #2
 8006472:	b570      	push	{r4, r5, r6, lr}
 8006474:	f1c2 0620 	rsb	r6, r2, #32
 8006478:	6843      	ldr	r3, [r0, #4]
 800647a:	6804      	ldr	r4, [r0, #0]
 800647c:	fa03 f506 	lsl.w	r5, r3, r6
 8006480:	432c      	orrs	r4, r5
 8006482:	40d3      	lsrs	r3, r2
 8006484:	6004      	str	r4, [r0, #0]
 8006486:	f840 3f04 	str.w	r3, [r0, #4]!
 800648a:	4288      	cmp	r0, r1
 800648c:	d3f4      	bcc.n	8006478 <L_shift+0xc>
 800648e:	bd70      	pop	{r4, r5, r6, pc}

08006490 <__match>:
 8006490:	b530      	push	{r4, r5, lr}
 8006492:	6803      	ldr	r3, [r0, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649a:	b914      	cbnz	r4, 80064a2 <__match+0x12>
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	2001      	movs	r0, #1
 80064a0:	bd30      	pop	{r4, r5, pc}
 80064a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80064aa:	2d19      	cmp	r5, #25
 80064ac:	bf98      	it	ls
 80064ae:	3220      	addls	r2, #32
 80064b0:	42a2      	cmp	r2, r4
 80064b2:	d0f0      	beq.n	8006496 <__match+0x6>
 80064b4:	2000      	movs	r0, #0
 80064b6:	e7f3      	b.n	80064a0 <__match+0x10>

080064b8 <__hexnan>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	2500      	movs	r5, #0
 80064be:	680b      	ldr	r3, [r1, #0]
 80064c0:	4682      	mov	sl, r0
 80064c2:	115f      	asrs	r7, r3, #5
 80064c4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80064c8:	f013 031f 	ands.w	r3, r3, #31
 80064cc:	bf18      	it	ne
 80064ce:	3704      	addne	r7, #4
 80064d0:	1f3e      	subs	r6, r7, #4
 80064d2:	4690      	mov	r8, r2
 80064d4:	46b1      	mov	r9, r6
 80064d6:	4634      	mov	r4, r6
 80064d8:	46ab      	mov	fp, r5
 80064da:	b087      	sub	sp, #28
 80064dc:	6801      	ldr	r1, [r0, #0]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	f847 5c04 	str.w	r5, [r7, #-4]
 80064e4:	9502      	str	r5, [sp, #8]
 80064e6:	784a      	ldrb	r2, [r1, #1]
 80064e8:	1c4b      	adds	r3, r1, #1
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	b342      	cbz	r2, 8006540 <__hexnan+0x88>
 80064ee:	4610      	mov	r0, r2
 80064f0:	9105      	str	r1, [sp, #20]
 80064f2:	9204      	str	r2, [sp, #16]
 80064f4:	f7ff fd83 	bl	8005ffe <__hexdig_fun>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d143      	bne.n	8006584 <__hexnan+0xcc>
 80064fc:	9a04      	ldr	r2, [sp, #16]
 80064fe:	9905      	ldr	r1, [sp, #20]
 8006500:	2a20      	cmp	r2, #32
 8006502:	d818      	bhi.n	8006536 <__hexnan+0x7e>
 8006504:	9b02      	ldr	r3, [sp, #8]
 8006506:	459b      	cmp	fp, r3
 8006508:	dd13      	ble.n	8006532 <__hexnan+0x7a>
 800650a:	454c      	cmp	r4, r9
 800650c:	d206      	bcs.n	800651c <__hexnan+0x64>
 800650e:	2d07      	cmp	r5, #7
 8006510:	dc04      	bgt.n	800651c <__hexnan+0x64>
 8006512:	462a      	mov	r2, r5
 8006514:	4649      	mov	r1, r9
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff ffa8 	bl	800646c <L_shift>
 800651c:	4544      	cmp	r4, r8
 800651e:	d944      	bls.n	80065aa <__hexnan+0xf2>
 8006520:	2300      	movs	r3, #0
 8006522:	f1a4 0904 	sub.w	r9, r4, #4
 8006526:	f844 3c04 	str.w	r3, [r4, #-4]
 800652a:	461d      	mov	r5, r3
 800652c:	464c      	mov	r4, r9
 800652e:	f8cd b008 	str.w	fp, [sp, #8]
 8006532:	9903      	ldr	r1, [sp, #12]
 8006534:	e7d7      	b.n	80064e6 <__hexnan+0x2e>
 8006536:	2a29      	cmp	r2, #41	; 0x29
 8006538:	d14a      	bne.n	80065d0 <__hexnan+0x118>
 800653a:	3102      	adds	r1, #2
 800653c:	f8ca 1000 	str.w	r1, [sl]
 8006540:	f1bb 0f00 	cmp.w	fp, #0
 8006544:	d044      	beq.n	80065d0 <__hexnan+0x118>
 8006546:	454c      	cmp	r4, r9
 8006548:	d206      	bcs.n	8006558 <__hexnan+0xa0>
 800654a:	2d07      	cmp	r5, #7
 800654c:	dc04      	bgt.n	8006558 <__hexnan+0xa0>
 800654e:	462a      	mov	r2, r5
 8006550:	4649      	mov	r1, r9
 8006552:	4620      	mov	r0, r4
 8006554:	f7ff ff8a 	bl	800646c <L_shift>
 8006558:	4544      	cmp	r4, r8
 800655a:	d928      	bls.n	80065ae <__hexnan+0xf6>
 800655c:	4643      	mov	r3, r8
 800655e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006562:	42a6      	cmp	r6, r4
 8006564:	f843 2b04 	str.w	r2, [r3], #4
 8006568:	d2f9      	bcs.n	800655e <__hexnan+0xa6>
 800656a:	2200      	movs	r2, #0
 800656c:	f843 2b04 	str.w	r2, [r3], #4
 8006570:	429e      	cmp	r6, r3
 8006572:	d2fb      	bcs.n	800656c <__hexnan+0xb4>
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	b91b      	cbnz	r3, 8006580 <__hexnan+0xc8>
 8006578:	4546      	cmp	r6, r8
 800657a:	d127      	bne.n	80065cc <__hexnan+0x114>
 800657c:	2301      	movs	r3, #1
 800657e:	6033      	str	r3, [r6, #0]
 8006580:	2005      	movs	r0, #5
 8006582:	e026      	b.n	80065d2 <__hexnan+0x11a>
 8006584:	3501      	adds	r5, #1
 8006586:	2d08      	cmp	r5, #8
 8006588:	f10b 0b01 	add.w	fp, fp, #1
 800658c:	dd06      	ble.n	800659c <__hexnan+0xe4>
 800658e:	4544      	cmp	r4, r8
 8006590:	d9cf      	bls.n	8006532 <__hexnan+0x7a>
 8006592:	2300      	movs	r3, #0
 8006594:	2501      	movs	r5, #1
 8006596:	f844 3c04 	str.w	r3, [r4, #-4]
 800659a:	3c04      	subs	r4, #4
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	f000 000f 	and.w	r0, r0, #15
 80065a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80065a6:	6020      	str	r0, [r4, #0]
 80065a8:	e7c3      	b.n	8006532 <__hexnan+0x7a>
 80065aa:	2508      	movs	r5, #8
 80065ac:	e7c1      	b.n	8006532 <__hexnan+0x7a>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0df      	beq.n	8006574 <__hexnan+0xbc>
 80065b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b8:	f1c3 0320 	rsb	r3, r3, #32
 80065bc:	fa22 f303 	lsr.w	r3, r2, r3
 80065c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80065c4:	401a      	ands	r2, r3
 80065c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80065ca:	e7d3      	b.n	8006574 <__hexnan+0xbc>
 80065cc:	3e04      	subs	r6, #4
 80065ce:	e7d1      	b.n	8006574 <__hexnan+0xbc>
 80065d0:	2004      	movs	r0, #4
 80065d2:	b007      	add	sp, #28
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065d8 <__locale_ctype_ptr_l>:
 80065d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80065dc:	4770      	bx	lr

080065de <__localeconv_l>:
 80065de:	30f0      	adds	r0, #240	; 0xf0
 80065e0:	4770      	bx	lr
	...

080065e4 <_localeconv_r>:
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <_localeconv_r+0x14>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a18      	ldr	r0, [r3, #32]
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <_localeconv_r+0x18>)
 80065ec:	2800      	cmp	r0, #0
 80065ee:	bf08      	it	eq
 80065f0:	4618      	moveq	r0, r3
 80065f2:	30f0      	adds	r0, #240	; 0xf0
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2000000c 	.word	0x2000000c
 80065fc:	20000070 	.word	0x20000070

08006600 <malloc>:
 8006600:	4b02      	ldr	r3, [pc, #8]	; (800660c <malloc+0xc>)
 8006602:	4601      	mov	r1, r0
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f000 bc81 	b.w	8006f0c <_malloc_r>
 800660a:	bf00      	nop
 800660c:	2000000c 	.word	0x2000000c

08006610 <__ascii_mbtowc>:
 8006610:	b082      	sub	sp, #8
 8006612:	b901      	cbnz	r1, 8006616 <__ascii_mbtowc+0x6>
 8006614:	a901      	add	r1, sp, #4
 8006616:	b142      	cbz	r2, 800662a <__ascii_mbtowc+0x1a>
 8006618:	b14b      	cbz	r3, 800662e <__ascii_mbtowc+0x1e>
 800661a:	7813      	ldrb	r3, [r2, #0]
 800661c:	600b      	str	r3, [r1, #0]
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	1c10      	adds	r0, r2, #0
 8006622:	bf18      	it	ne
 8006624:	2001      	movne	r0, #1
 8006626:	b002      	add	sp, #8
 8006628:	4770      	bx	lr
 800662a:	4610      	mov	r0, r2
 800662c:	e7fb      	b.n	8006626 <__ascii_mbtowc+0x16>
 800662e:	f06f 0001 	mvn.w	r0, #1
 8006632:	e7f8      	b.n	8006626 <__ascii_mbtowc+0x16>

08006634 <memchr>:
 8006634:	b510      	push	{r4, lr}
 8006636:	b2c9      	uxtb	r1, r1
 8006638:	4402      	add	r2, r0
 800663a:	4290      	cmp	r0, r2
 800663c:	4603      	mov	r3, r0
 800663e:	d101      	bne.n	8006644 <memchr+0x10>
 8006640:	2300      	movs	r3, #0
 8006642:	e003      	b.n	800664c <memchr+0x18>
 8006644:	781c      	ldrb	r4, [r3, #0]
 8006646:	3001      	adds	r0, #1
 8006648:	428c      	cmp	r4, r1
 800664a:	d1f6      	bne.n	800663a <memchr+0x6>
 800664c:	4618      	mov	r0, r3
 800664e:	bd10      	pop	{r4, pc}

08006650 <memcpy>:
 8006650:	b510      	push	{r4, lr}
 8006652:	1e43      	subs	r3, r0, #1
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	d100      	bne.n	800665c <memcpy+0xc>
 800665a:	bd10      	pop	{r4, pc}
 800665c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006664:	e7f7      	b.n	8006656 <memcpy+0x6>

08006666 <_Balloc>:
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800666a:	4604      	mov	r4, r0
 800666c:	460e      	mov	r6, r1
 800666e:	b93d      	cbnz	r5, 8006680 <_Balloc+0x1a>
 8006670:	2010      	movs	r0, #16
 8006672:	f7ff ffc5 	bl	8006600 <malloc>
 8006676:	6260      	str	r0, [r4, #36]	; 0x24
 8006678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667c:	6005      	str	r5, [r0, #0]
 800667e:	60c5      	str	r5, [r0, #12]
 8006680:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006682:	68eb      	ldr	r3, [r5, #12]
 8006684:	b183      	cbz	r3, 80066a8 <_Balloc+0x42>
 8006686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800668e:	b9b8      	cbnz	r0, 80066c0 <_Balloc+0x5a>
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f506 	lsl.w	r5, r1, r6
 8006696:	1d6a      	adds	r2, r5, #5
 8006698:	0092      	lsls	r2, r2, #2
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fbdc 	bl	8006e58 <_calloc_r>
 80066a0:	b160      	cbz	r0, 80066bc <_Balloc+0x56>
 80066a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80066a6:	e00e      	b.n	80066c6 <_Balloc+0x60>
 80066a8:	2221      	movs	r2, #33	; 0x21
 80066aa:	2104      	movs	r1, #4
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fbd3 	bl	8006e58 <_calloc_r>
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b4:	60e8      	str	r0, [r5, #12]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e4      	bne.n	8006686 <_Balloc+0x20>
 80066bc:	2000      	movs	r0, #0
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	6802      	ldr	r2, [r0, #0]
 80066c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80066c6:	2300      	movs	r3, #0
 80066c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066cc:	e7f7      	b.n	80066be <_Balloc+0x58>

080066ce <_Bfree>:
 80066ce:	b570      	push	{r4, r5, r6, lr}
 80066d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066d2:	4606      	mov	r6, r0
 80066d4:	460d      	mov	r5, r1
 80066d6:	b93c      	cbnz	r4, 80066e8 <_Bfree+0x1a>
 80066d8:	2010      	movs	r0, #16
 80066da:	f7ff ff91 	bl	8006600 <malloc>
 80066de:	6270      	str	r0, [r6, #36]	; 0x24
 80066e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066e4:	6004      	str	r4, [r0, #0]
 80066e6:	60c4      	str	r4, [r0, #12]
 80066e8:	b13d      	cbz	r5, 80066fa <_Bfree+0x2c>
 80066ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066ec:	686a      	ldr	r2, [r5, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066f4:	6029      	str	r1, [r5, #0]
 80066f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80066fa:	bd70      	pop	{r4, r5, r6, pc}

080066fc <__multadd>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	461f      	mov	r7, r3
 8006702:	4606      	mov	r6, r0
 8006704:	460c      	mov	r4, r1
 8006706:	2300      	movs	r3, #0
 8006708:	690d      	ldr	r5, [r1, #16]
 800670a:	f101 0c14 	add.w	ip, r1, #20
 800670e:	f8dc 0000 	ldr.w	r0, [ip]
 8006712:	3301      	adds	r3, #1
 8006714:	b281      	uxth	r1, r0
 8006716:	fb02 7101 	mla	r1, r2, r1, r7
 800671a:	0c00      	lsrs	r0, r0, #16
 800671c:	0c0f      	lsrs	r7, r1, #16
 800671e:	fb02 7000 	mla	r0, r2, r0, r7
 8006722:	b289      	uxth	r1, r1
 8006724:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006728:	429d      	cmp	r5, r3
 800672a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800672e:	f84c 1b04 	str.w	r1, [ip], #4
 8006732:	dcec      	bgt.n	800670e <__multadd+0x12>
 8006734:	b1d7      	cbz	r7, 800676c <__multadd+0x70>
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	42ab      	cmp	r3, r5
 800673a:	dc12      	bgt.n	8006762 <__multadd+0x66>
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	4630      	mov	r0, r6
 8006740:	3101      	adds	r1, #1
 8006742:	f7ff ff90 	bl	8006666 <_Balloc>
 8006746:	4680      	mov	r8, r0
 8006748:	6922      	ldr	r2, [r4, #16]
 800674a:	f104 010c 	add.w	r1, r4, #12
 800674e:	3202      	adds	r2, #2
 8006750:	0092      	lsls	r2, r2, #2
 8006752:	300c      	adds	r0, #12
 8006754:	f7ff ff7c 	bl	8006650 <memcpy>
 8006758:	4621      	mov	r1, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ffb7 	bl	80066ce <_Bfree>
 8006760:	4644      	mov	r4, r8
 8006762:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006766:	3501      	adds	r5, #1
 8006768:	615f      	str	r7, [r3, #20]
 800676a:	6125      	str	r5, [r4, #16]
 800676c:	4620      	mov	r0, r4
 800676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006772 <__s2b>:
 8006772:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006776:	4615      	mov	r5, r2
 8006778:	2209      	movs	r2, #9
 800677a:	461f      	mov	r7, r3
 800677c:	3308      	adds	r3, #8
 800677e:	460c      	mov	r4, r1
 8006780:	fb93 f3f2 	sdiv	r3, r3, r2
 8006784:	4606      	mov	r6, r0
 8006786:	2201      	movs	r2, #1
 8006788:	2100      	movs	r1, #0
 800678a:	429a      	cmp	r2, r3
 800678c:	db20      	blt.n	80067d0 <__s2b+0x5e>
 800678e:	4630      	mov	r0, r6
 8006790:	f7ff ff69 	bl	8006666 <_Balloc>
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	2d09      	cmp	r5, #9
 8006798:	6143      	str	r3, [r0, #20]
 800679a:	f04f 0301 	mov.w	r3, #1
 800679e:	6103      	str	r3, [r0, #16]
 80067a0:	dd19      	ble.n	80067d6 <__s2b+0x64>
 80067a2:	f104 0809 	add.w	r8, r4, #9
 80067a6:	46c1      	mov	r9, r8
 80067a8:	442c      	add	r4, r5
 80067aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80067ae:	4601      	mov	r1, r0
 80067b0:	3b30      	subs	r3, #48	; 0x30
 80067b2:	220a      	movs	r2, #10
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff ffa1 	bl	80066fc <__multadd>
 80067ba:	45a1      	cmp	r9, r4
 80067bc:	d1f5      	bne.n	80067aa <__s2b+0x38>
 80067be:	eb08 0405 	add.w	r4, r8, r5
 80067c2:	3c08      	subs	r4, #8
 80067c4:	1b2d      	subs	r5, r5, r4
 80067c6:	1963      	adds	r3, r4, r5
 80067c8:	42bb      	cmp	r3, r7
 80067ca:	db07      	blt.n	80067dc <__s2b+0x6a>
 80067cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d0:	0052      	lsls	r2, r2, #1
 80067d2:	3101      	adds	r1, #1
 80067d4:	e7d9      	b.n	800678a <__s2b+0x18>
 80067d6:	340a      	adds	r4, #10
 80067d8:	2509      	movs	r5, #9
 80067da:	e7f3      	b.n	80067c4 <__s2b+0x52>
 80067dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067e0:	4601      	mov	r1, r0
 80067e2:	3b30      	subs	r3, #48	; 0x30
 80067e4:	220a      	movs	r2, #10
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff88 	bl	80066fc <__multadd>
 80067ec:	e7eb      	b.n	80067c6 <__s2b+0x54>

080067ee <__hi0bits>:
 80067ee:	0c02      	lsrs	r2, r0, #16
 80067f0:	0412      	lsls	r2, r2, #16
 80067f2:	4603      	mov	r3, r0
 80067f4:	b9b2      	cbnz	r2, 8006824 <__hi0bits+0x36>
 80067f6:	0403      	lsls	r3, r0, #16
 80067f8:	2010      	movs	r0, #16
 80067fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067fe:	bf04      	itt	eq
 8006800:	021b      	lsleq	r3, r3, #8
 8006802:	3008      	addeq	r0, #8
 8006804:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006808:	bf04      	itt	eq
 800680a:	011b      	lsleq	r3, r3, #4
 800680c:	3004      	addeq	r0, #4
 800680e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006812:	bf04      	itt	eq
 8006814:	009b      	lsleq	r3, r3, #2
 8006816:	3002      	addeq	r0, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	db06      	blt.n	800682a <__hi0bits+0x3c>
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	d503      	bpl.n	8006828 <__hi0bits+0x3a>
 8006820:	3001      	adds	r0, #1
 8006822:	4770      	bx	lr
 8006824:	2000      	movs	r0, #0
 8006826:	e7e8      	b.n	80067fa <__hi0bits+0xc>
 8006828:	2020      	movs	r0, #32
 800682a:	4770      	bx	lr

0800682c <__lo0bits>:
 800682c:	6803      	ldr	r3, [r0, #0]
 800682e:	4601      	mov	r1, r0
 8006830:	f013 0207 	ands.w	r2, r3, #7
 8006834:	d00b      	beq.n	800684e <__lo0bits+0x22>
 8006836:	07da      	lsls	r2, r3, #31
 8006838:	d423      	bmi.n	8006882 <__lo0bits+0x56>
 800683a:	0798      	lsls	r0, r3, #30
 800683c:	bf49      	itett	mi
 800683e:	085b      	lsrmi	r3, r3, #1
 8006840:	089b      	lsrpl	r3, r3, #2
 8006842:	2001      	movmi	r0, #1
 8006844:	600b      	strmi	r3, [r1, #0]
 8006846:	bf5c      	itt	pl
 8006848:	600b      	strpl	r3, [r1, #0]
 800684a:	2002      	movpl	r0, #2
 800684c:	4770      	bx	lr
 800684e:	b298      	uxth	r0, r3
 8006850:	b9a8      	cbnz	r0, 800687e <__lo0bits+0x52>
 8006852:	2010      	movs	r0, #16
 8006854:	0c1b      	lsrs	r3, r3, #16
 8006856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800685a:	bf04      	itt	eq
 800685c:	0a1b      	lsreq	r3, r3, #8
 800685e:	3008      	addeq	r0, #8
 8006860:	071a      	lsls	r2, r3, #28
 8006862:	bf04      	itt	eq
 8006864:	091b      	lsreq	r3, r3, #4
 8006866:	3004      	addeq	r0, #4
 8006868:	079a      	lsls	r2, r3, #30
 800686a:	bf04      	itt	eq
 800686c:	089b      	lsreq	r3, r3, #2
 800686e:	3002      	addeq	r0, #2
 8006870:	07da      	lsls	r2, r3, #31
 8006872:	d402      	bmi.n	800687a <__lo0bits+0x4e>
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	d006      	beq.n	8006886 <__lo0bits+0x5a>
 8006878:	3001      	adds	r0, #1
 800687a:	600b      	str	r3, [r1, #0]
 800687c:	4770      	bx	lr
 800687e:	4610      	mov	r0, r2
 8006880:	e7e9      	b.n	8006856 <__lo0bits+0x2a>
 8006882:	2000      	movs	r0, #0
 8006884:	4770      	bx	lr
 8006886:	2020      	movs	r0, #32
 8006888:	4770      	bx	lr

0800688a <__i2b>:
 800688a:	b510      	push	{r4, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	2101      	movs	r1, #1
 8006890:	f7ff fee9 	bl	8006666 <_Balloc>
 8006894:	2201      	movs	r2, #1
 8006896:	6144      	str	r4, [r0, #20]
 8006898:	6102      	str	r2, [r0, #16]
 800689a:	bd10      	pop	{r4, pc}

0800689c <__multiply>:
 800689c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	4614      	mov	r4, r2
 80068a2:	690a      	ldr	r2, [r1, #16]
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	4688      	mov	r8, r1
 80068a8:	429a      	cmp	r2, r3
 80068aa:	bfbe      	ittt	lt
 80068ac:	460b      	movlt	r3, r1
 80068ae:	46a0      	movlt	r8, r4
 80068b0:	461c      	movlt	r4, r3
 80068b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80068ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068c2:	eb07 0609 	add.w	r6, r7, r9
 80068c6:	42b3      	cmp	r3, r6
 80068c8:	bfb8      	it	lt
 80068ca:	3101      	addlt	r1, #1
 80068cc:	f7ff fecb 	bl	8006666 <_Balloc>
 80068d0:	f100 0514 	add.w	r5, r0, #20
 80068d4:	462b      	mov	r3, r5
 80068d6:	2200      	movs	r2, #0
 80068d8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80068dc:	4573      	cmp	r3, lr
 80068de:	d316      	bcc.n	800690e <__multiply+0x72>
 80068e0:	f104 0214 	add.w	r2, r4, #20
 80068e4:	f108 0114 	add.w	r1, r8, #20
 80068e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80068ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	9b00      	ldr	r3, [sp, #0]
 80068f4:	9201      	str	r2, [sp, #4]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d80c      	bhi.n	8006914 <__multiply+0x78>
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	dd03      	ble.n	8006906 <__multiply+0x6a>
 80068fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006902:	2b00      	cmp	r3, #0
 8006904:	d05d      	beq.n	80069c2 <__multiply+0x126>
 8006906:	6106      	str	r6, [r0, #16]
 8006908:	b003      	add	sp, #12
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	f843 2b04 	str.w	r2, [r3], #4
 8006912:	e7e3      	b.n	80068dc <__multiply+0x40>
 8006914:	f8b2 b000 	ldrh.w	fp, [r2]
 8006918:	f1bb 0f00 	cmp.w	fp, #0
 800691c:	d023      	beq.n	8006966 <__multiply+0xca>
 800691e:	4689      	mov	r9, r1
 8006920:	46ac      	mov	ip, r5
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f859 4b04 	ldr.w	r4, [r9], #4
 800692a:	f8dc a000 	ldr.w	sl, [ip]
 800692e:	b2a3      	uxth	r3, r4
 8006930:	fa1f fa8a 	uxth.w	sl, sl
 8006934:	fb0b a303 	mla	r3, fp, r3, sl
 8006938:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800693c:	f8dc 4000 	ldr.w	r4, [ip]
 8006940:	4443      	add	r3, r8
 8006942:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006946:	fb0b 840a 	mla	r4, fp, sl, r8
 800694a:	46e2      	mov	sl, ip
 800694c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006950:	b29b      	uxth	r3, r3
 8006952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006956:	454f      	cmp	r7, r9
 8006958:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800695c:	f84a 3b04 	str.w	r3, [sl], #4
 8006960:	d82b      	bhi.n	80069ba <__multiply+0x11e>
 8006962:	f8cc 8004 	str.w	r8, [ip, #4]
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	3204      	adds	r2, #4
 800696a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800696e:	f1ba 0f00 	cmp.w	sl, #0
 8006972:	d020      	beq.n	80069b6 <__multiply+0x11a>
 8006974:	4689      	mov	r9, r1
 8006976:	46a8      	mov	r8, r5
 8006978:	f04f 0b00 	mov.w	fp, #0
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006982:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006986:	b29b      	uxth	r3, r3
 8006988:	fb0a 440c 	mla	r4, sl, ip, r4
 800698c:	46c4      	mov	ip, r8
 800698e:	445c      	add	r4, fp
 8006990:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006994:	f84c 3b04 	str.w	r3, [ip], #4
 8006998:	f859 3b04 	ldr.w	r3, [r9], #4
 800699c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	fb0a b303 	mla	r3, sl, r3, fp
 80069a6:	454f      	cmp	r7, r9
 80069a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80069b0:	d805      	bhi.n	80069be <__multiply+0x122>
 80069b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80069b6:	3504      	adds	r5, #4
 80069b8:	e79b      	b.n	80068f2 <__multiply+0x56>
 80069ba:	46d4      	mov	ip, sl
 80069bc:	e7b3      	b.n	8006926 <__multiply+0x8a>
 80069be:	46e0      	mov	r8, ip
 80069c0:	e7dd      	b.n	800697e <__multiply+0xe2>
 80069c2:	3e01      	subs	r6, #1
 80069c4:	e799      	b.n	80068fa <__multiply+0x5e>
	...

080069c8 <__pow5mult>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	4615      	mov	r5, r2
 80069ce:	f012 0203 	ands.w	r2, r2, #3
 80069d2:	4606      	mov	r6, r0
 80069d4:	460f      	mov	r7, r1
 80069d6:	d007      	beq.n	80069e8 <__pow5mult+0x20>
 80069d8:	4c21      	ldr	r4, [pc, #132]	; (8006a60 <__pow5mult+0x98>)
 80069da:	3a01      	subs	r2, #1
 80069dc:	2300      	movs	r3, #0
 80069de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069e2:	f7ff fe8b 	bl	80066fc <__multadd>
 80069e6:	4607      	mov	r7, r0
 80069e8:	10ad      	asrs	r5, r5, #2
 80069ea:	d035      	beq.n	8006a58 <__pow5mult+0x90>
 80069ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ee:	b93c      	cbnz	r4, 8006a00 <__pow5mult+0x38>
 80069f0:	2010      	movs	r0, #16
 80069f2:	f7ff fe05 	bl	8006600 <malloc>
 80069f6:	6270      	str	r0, [r6, #36]	; 0x24
 80069f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069fc:	6004      	str	r4, [r0, #0]
 80069fe:	60c4      	str	r4, [r0, #12]
 8006a00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a08:	b94c      	cbnz	r4, 8006a1e <__pow5mult+0x56>
 8006a0a:	f240 2171 	movw	r1, #625	; 0x271
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ff3b 	bl	800688a <__i2b>
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1c:	6003      	str	r3, [r0, #0]
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	07eb      	lsls	r3, r5, #31
 8006a24:	d50a      	bpl.n	8006a3c <__pow5mult+0x74>
 8006a26:	4639      	mov	r1, r7
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff ff36 	bl	800689c <__multiply>
 8006a30:	4681      	mov	r9, r0
 8006a32:	4639      	mov	r1, r7
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7ff fe4a 	bl	80066ce <_Bfree>
 8006a3a:	464f      	mov	r7, r9
 8006a3c:	106d      	asrs	r5, r5, #1
 8006a3e:	d00b      	beq.n	8006a58 <__pow5mult+0x90>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	b938      	cbnz	r0, 8006a54 <__pow5mult+0x8c>
 8006a44:	4622      	mov	r2, r4
 8006a46:	4621      	mov	r1, r4
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f7ff ff27 	bl	800689c <__multiply>
 8006a4e:	6020      	str	r0, [r4, #0]
 8006a50:	f8c0 8000 	str.w	r8, [r0]
 8006a54:	4604      	mov	r4, r0
 8006a56:	e7e4      	b.n	8006a22 <__pow5mult+0x5a>
 8006a58:	4638      	mov	r0, r7
 8006a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5e:	bf00      	nop
 8006a60:	08007550 	.word	0x08007550

08006a64 <__lshift>:
 8006a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	460c      	mov	r4, r1
 8006a6a:	4607      	mov	r7, r0
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a74:	eb0a 0903 	add.w	r9, sl, r3
 8006a78:	6849      	ldr	r1, [r1, #4]
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	f109 0501 	add.w	r5, r9, #1
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	db32      	blt.n	8006aea <__lshift+0x86>
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff fdee 	bl	8006666 <_Balloc>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f100 0114 	add.w	r1, r0, #20
 8006a94:	4553      	cmp	r3, sl
 8006a96:	db2b      	blt.n	8006af0 <__lshift+0x8c>
 8006a98:	6920      	ldr	r0, [r4, #16]
 8006a9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a9e:	f104 0314 	add.w	r3, r4, #20
 8006aa2:	f016 021f 	ands.w	r2, r6, #31
 8006aa6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006aae:	d025      	beq.n	8006afc <__lshift+0x98>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f1c2 0e20 	rsb	lr, r2, #32
 8006ab6:	468a      	mov	sl, r1
 8006ab8:	681e      	ldr	r6, [r3, #0]
 8006aba:	4096      	lsls	r6, r2
 8006abc:	4330      	orrs	r0, r6
 8006abe:	f84a 0b04 	str.w	r0, [sl], #4
 8006ac2:	f853 0b04 	ldr.w	r0, [r3], #4
 8006ac6:	459c      	cmp	ip, r3
 8006ac8:	fa20 f00e 	lsr.w	r0, r0, lr
 8006acc:	d814      	bhi.n	8006af8 <__lshift+0x94>
 8006ace:	6048      	str	r0, [r1, #4]
 8006ad0:	b108      	cbz	r0, 8006ad6 <__lshift+0x72>
 8006ad2:	f109 0502 	add.w	r5, r9, #2
 8006ad6:	3d01      	subs	r5, #1
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ade:	4621      	mov	r1, r4
 8006ae0:	f7ff fdf5 	bl	80066ce <_Bfree>
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aea:	3101      	adds	r1, #1
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	e7c7      	b.n	8006a80 <__lshift+0x1c>
 8006af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006af4:	3301      	adds	r3, #1
 8006af6:	e7cd      	b.n	8006a94 <__lshift+0x30>
 8006af8:	4651      	mov	r1, sl
 8006afa:	e7dc      	b.n	8006ab6 <__lshift+0x52>
 8006afc:	3904      	subs	r1, #4
 8006afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b02:	459c      	cmp	ip, r3
 8006b04:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b08:	d8f9      	bhi.n	8006afe <__lshift+0x9a>
 8006b0a:	e7e4      	b.n	8006ad6 <__lshift+0x72>

08006b0c <__mcmp>:
 8006b0c:	6903      	ldr	r3, [r0, #16]
 8006b0e:	690a      	ldr	r2, [r1, #16]
 8006b10:	b530      	push	{r4, r5, lr}
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	d10c      	bne.n	8006b30 <__mcmp+0x24>
 8006b16:	0092      	lsls	r2, r2, #2
 8006b18:	3014      	adds	r0, #20
 8006b1a:	3114      	adds	r1, #20
 8006b1c:	1884      	adds	r4, r0, r2
 8006b1e:	4411      	add	r1, r2
 8006b20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b28:	4295      	cmp	r5, r2
 8006b2a:	d003      	beq.n	8006b34 <__mcmp+0x28>
 8006b2c:	d305      	bcc.n	8006b3a <__mcmp+0x2e>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd30      	pop	{r4, r5, pc}
 8006b34:	42a0      	cmp	r0, r4
 8006b36:	d3f3      	bcc.n	8006b20 <__mcmp+0x14>
 8006b38:	e7fa      	b.n	8006b30 <__mcmp+0x24>
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b3e:	e7f7      	b.n	8006b30 <__mcmp+0x24>

08006b40 <__mdiff>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	460d      	mov	r5, r1
 8006b46:	4607      	mov	r7, r0
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	f7ff ffdd 	bl	8006b0c <__mcmp>
 8006b52:	1e06      	subs	r6, r0, #0
 8006b54:	d108      	bne.n	8006b68 <__mdiff+0x28>
 8006b56:	4631      	mov	r1, r6
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff fd84 	bl	8006666 <_Balloc>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	bfa4      	itt	ge
 8006b6a:	4623      	movge	r3, r4
 8006b6c:	462c      	movge	r4, r5
 8006b6e:	4638      	mov	r0, r7
 8006b70:	6861      	ldr	r1, [r4, #4]
 8006b72:	bfa6      	itte	ge
 8006b74:	461d      	movge	r5, r3
 8006b76:	2600      	movge	r6, #0
 8006b78:	2601      	movlt	r6, #1
 8006b7a:	f7ff fd74 	bl	8006666 <_Balloc>
 8006b7e:	f04f 0e00 	mov.w	lr, #0
 8006b82:	60c6      	str	r6, [r0, #12]
 8006b84:	692b      	ldr	r3, [r5, #16]
 8006b86:	6926      	ldr	r6, [r4, #16]
 8006b88:	f104 0214 	add.w	r2, r4, #20
 8006b8c:	f105 0914 	add.w	r9, r5, #20
 8006b90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b98:	f100 0114 	add.w	r1, r0, #20
 8006b9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ba0:	f859 5b04 	ldr.w	r5, [r9], #4
 8006ba4:	fa1f f38a 	uxth.w	r3, sl
 8006ba8:	4473      	add	r3, lr
 8006baa:	b2ac      	uxth	r4, r5
 8006bac:	1b1b      	subs	r3, r3, r4
 8006bae:	0c2c      	lsrs	r4, r5, #16
 8006bb0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006bb4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006bbe:	45c8      	cmp	r8, r9
 8006bc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006bc4:	4694      	mov	ip, r2
 8006bc6:	f841 4b04 	str.w	r4, [r1], #4
 8006bca:	d8e7      	bhi.n	8006b9c <__mdiff+0x5c>
 8006bcc:	45bc      	cmp	ip, r7
 8006bce:	d304      	bcc.n	8006bda <__mdiff+0x9a>
 8006bd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006bd4:	b183      	cbz	r3, 8006bf8 <__mdiff+0xb8>
 8006bd6:	6106      	str	r6, [r0, #16]
 8006bd8:	e7c4      	b.n	8006b64 <__mdiff+0x24>
 8006bda:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006bde:	b2a2      	uxth	r2, r4
 8006be0:	4472      	add	r2, lr
 8006be2:	1413      	asrs	r3, r2, #16
 8006be4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006be8:	b292      	uxth	r2, r2
 8006bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006bf2:	f841 2b04 	str.w	r2, [r1], #4
 8006bf6:	e7e9      	b.n	8006bcc <__mdiff+0x8c>
 8006bf8:	3e01      	subs	r6, #1
 8006bfa:	e7e9      	b.n	8006bd0 <__mdiff+0x90>

08006bfc <__ulp>:
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <__ulp+0x44>)
 8006bfe:	400b      	ands	r3, r1
 8006c00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dd02      	ble.n	8006c0e <__ulp+0x12>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4770      	bx	lr
 8006c0e:	425b      	negs	r3, r3
 8006c10:	151b      	asrs	r3, r3, #20
 8006c12:	2b13      	cmp	r3, #19
 8006c14:	f04f 0000 	mov.w	r0, #0
 8006c18:	f04f 0100 	mov.w	r1, #0
 8006c1c:	dc04      	bgt.n	8006c28 <__ulp+0x2c>
 8006c1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c22:	fa42 f103 	asr.w	r1, r2, r3
 8006c26:	4770      	bx	lr
 8006c28:	2201      	movs	r2, #1
 8006c2a:	3b14      	subs	r3, #20
 8006c2c:	2b1e      	cmp	r3, #30
 8006c2e:	bfce      	itee	gt
 8006c30:	4613      	movgt	r3, r2
 8006c32:	f1c3 031f 	rsble	r3, r3, #31
 8006c36:	fa02 f303 	lslle.w	r3, r2, r3
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	7ff00000 	.word	0x7ff00000

08006c44 <__b2d>:
 8006c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c48:	6907      	ldr	r7, [r0, #16]
 8006c4a:	f100 0914 	add.w	r9, r0, #20
 8006c4e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006c52:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006c56:	f1a7 0804 	sub.w	r8, r7, #4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff fdc7 	bl	80067ee <__hi0bits>
 8006c60:	f1c0 0320 	rsb	r3, r0, #32
 8006c64:	280a      	cmp	r0, #10
 8006c66:	600b      	str	r3, [r1, #0]
 8006c68:	491e      	ldr	r1, [pc, #120]	; (8006ce4 <__b2d+0xa0>)
 8006c6a:	dc17      	bgt.n	8006c9c <__b2d+0x58>
 8006c6c:	45c1      	cmp	r9, r8
 8006c6e:	bf28      	it	cs
 8006c70:	2200      	movcs	r2, #0
 8006c72:	f1c0 0c0b 	rsb	ip, r0, #11
 8006c76:	fa26 f30c 	lsr.w	r3, r6, ip
 8006c7a:	bf38      	it	cc
 8006c7c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006c80:	ea43 0501 	orr.w	r5, r3, r1
 8006c84:	f100 0315 	add.w	r3, r0, #21
 8006c88:	fa06 f303 	lsl.w	r3, r6, r3
 8006c8c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006c90:	ea43 0402 	orr.w	r4, r3, r2
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9c:	45c1      	cmp	r9, r8
 8006c9e:	bf3a      	itte	cc
 8006ca0:	f1a7 0808 	subcc.w	r8, r7, #8
 8006ca4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ca8:	2200      	movcs	r2, #0
 8006caa:	f1b0 030b 	subs.w	r3, r0, #11
 8006cae:	d015      	beq.n	8006cdc <__b2d+0x98>
 8006cb0:	409e      	lsls	r6, r3
 8006cb2:	f1c3 0720 	rsb	r7, r3, #32
 8006cb6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006cba:	fa22 f107 	lsr.w	r1, r2, r7
 8006cbe:	45c8      	cmp	r8, r9
 8006cc0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006cc4:	ea46 0501 	orr.w	r5, r6, r1
 8006cc8:	bf94      	ite	ls
 8006cca:	2100      	movls	r1, #0
 8006ccc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006cd0:	fa02 f003 	lsl.w	r0, r2, r3
 8006cd4:	40f9      	lsrs	r1, r7
 8006cd6:	ea40 0401 	orr.w	r4, r0, r1
 8006cda:	e7db      	b.n	8006c94 <__b2d+0x50>
 8006cdc:	ea46 0501 	orr.w	r5, r6, r1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	e7d7      	b.n	8006c94 <__b2d+0x50>
 8006ce4:	3ff00000 	.word	0x3ff00000

08006ce8 <__d2b>:
 8006ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006cec:	461c      	mov	r4, r3
 8006cee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4690      	mov	r8, r2
 8006cf6:	f7ff fcb6 	bl	8006666 <_Balloc>
 8006cfa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006cfe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d02:	4607      	mov	r7, r0
 8006d04:	bb34      	cbnz	r4, 8006d54 <__d2b+0x6c>
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	f1b8 0200 	subs.w	r2, r8, #0
 8006d0c:	d027      	beq.n	8006d5e <__d2b+0x76>
 8006d0e:	a802      	add	r0, sp, #8
 8006d10:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006d14:	f7ff fd8a 	bl	800682c <__lo0bits>
 8006d18:	9900      	ldr	r1, [sp, #0]
 8006d1a:	b1f0      	cbz	r0, 8006d5a <__d2b+0x72>
 8006d1c:	9a01      	ldr	r2, [sp, #4]
 8006d1e:	f1c0 0320 	rsb	r3, r0, #32
 8006d22:	fa02 f303 	lsl.w	r3, r2, r3
 8006d26:	430b      	orrs	r3, r1
 8006d28:	40c2      	lsrs	r2, r0
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf14      	ite	ne
 8006d34:	2102      	movne	r1, #2
 8006d36:	2101      	moveq	r1, #1
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	6139      	str	r1, [r7, #16]
 8006d3c:	b1c4      	cbz	r4, 8006d70 <__d2b+0x88>
 8006d3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d42:	4404      	add	r4, r0
 8006d44:	6034      	str	r4, [r6, #0]
 8006d46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d4a:	6028      	str	r0, [r5, #0]
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	b002      	add	sp, #8
 8006d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d58:	e7d5      	b.n	8006d06 <__d2b+0x1e>
 8006d5a:	6179      	str	r1, [r7, #20]
 8006d5c:	e7e7      	b.n	8006d2e <__d2b+0x46>
 8006d5e:	a801      	add	r0, sp, #4
 8006d60:	f7ff fd64 	bl	800682c <__lo0bits>
 8006d64:	2101      	movs	r1, #1
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	6139      	str	r1, [r7, #16]
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	3020      	adds	r0, #32
 8006d6e:	e7e5      	b.n	8006d3c <__d2b+0x54>
 8006d70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d78:	6030      	str	r0, [r6, #0]
 8006d7a:	6918      	ldr	r0, [r3, #16]
 8006d7c:	f7ff fd37 	bl	80067ee <__hi0bits>
 8006d80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d84:	e7e1      	b.n	8006d4a <__d2b+0x62>

08006d86 <__ratio>:
 8006d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	4688      	mov	r8, r1
 8006d8c:	4669      	mov	r1, sp
 8006d8e:	4681      	mov	r9, r0
 8006d90:	f7ff ff58 	bl	8006c44 <__b2d>
 8006d94:	468b      	mov	fp, r1
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	a901      	add	r1, sp, #4
 8006d9e:	f7ff ff51 	bl	8006c44 <__b2d>
 8006da2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006da6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006daa:	460d      	mov	r5, r1
 8006dac:	eba3 0c02 	sub.w	ip, r3, r2
 8006db0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfd5      	itete	le
 8006dbe:	460a      	movle	r2, r1
 8006dc0:	463a      	movgt	r2, r7
 8006dc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006dc6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006dca:	bfd8      	it	le
 8006dcc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7f9 fca8 	bl	800072c <__aeabi_ddiv>
 8006ddc:	b003      	add	sp, #12
 8006dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006de2 <__copybits>:
 8006de2:	3901      	subs	r1, #1
 8006de4:	b510      	push	{r4, lr}
 8006de6:	1149      	asrs	r1, r1, #5
 8006de8:	6914      	ldr	r4, [r2, #16]
 8006dea:	3101      	adds	r1, #1
 8006dec:	f102 0314 	add.w	r3, r2, #20
 8006df0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006df4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006df8:	42a3      	cmp	r3, r4
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	d303      	bcc.n	8006e06 <__copybits+0x24>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	428a      	cmp	r2, r1
 8006e02:	d305      	bcc.n	8006e10 <__copybits+0x2e>
 8006e04:	bd10      	pop	{r4, pc}
 8006e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0a:	f840 2b04 	str.w	r2, [r0], #4
 8006e0e:	e7f3      	b.n	8006df8 <__copybits+0x16>
 8006e10:	f842 3b04 	str.w	r3, [r2], #4
 8006e14:	e7f4      	b.n	8006e00 <__copybits+0x1e>

08006e16 <__any_on>:
 8006e16:	f100 0214 	add.w	r2, r0, #20
 8006e1a:	6900      	ldr	r0, [r0, #16]
 8006e1c:	114b      	asrs	r3, r1, #5
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	b510      	push	{r4, lr}
 8006e22:	db11      	blt.n	8006e48 <__any_on+0x32>
 8006e24:	dd0a      	ble.n	8006e3c <__any_on+0x26>
 8006e26:	f011 011f 	ands.w	r1, r1, #31
 8006e2a:	d007      	beq.n	8006e3c <__any_on+0x26>
 8006e2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e30:	fa24 f001 	lsr.w	r0, r4, r1
 8006e34:	fa00 f101 	lsl.w	r1, r0, r1
 8006e38:	428c      	cmp	r4, r1
 8006e3a:	d10b      	bne.n	8006e54 <__any_on+0x3e>
 8006e3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d803      	bhi.n	8006e4c <__any_on+0x36>
 8006e44:	2000      	movs	r0, #0
 8006e46:	bd10      	pop	{r4, pc}
 8006e48:	4603      	mov	r3, r0
 8006e4a:	e7f7      	b.n	8006e3c <__any_on+0x26>
 8006e4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d0f5      	beq.n	8006e40 <__any_on+0x2a>
 8006e54:	2001      	movs	r0, #1
 8006e56:	e7f6      	b.n	8006e46 <__any_on+0x30>

08006e58 <_calloc_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	fb02 f401 	mul.w	r4, r2, r1
 8006e5e:	4621      	mov	r1, r4
 8006e60:	f000 f854 	bl	8006f0c <_malloc_r>
 8006e64:	4605      	mov	r5, r0
 8006e66:	b118      	cbz	r0, 8006e70 <_calloc_r+0x18>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f7fc fd2c 	bl	80038c8 <memset>
 8006e70:	4628      	mov	r0, r5
 8006e72:	bd38      	pop	{r3, r4, r5, pc}

08006e74 <_free_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4605      	mov	r5, r0
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d043      	beq.n	8006f04 <_free_r+0x90>
 8006e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e80:	1f0c      	subs	r4, r1, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfb8      	it	lt
 8006e86:	18e4      	addlt	r4, r4, r3
 8006e88:	f000 fa34 	bl	80072f4 <__malloc_lock>
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <_free_r+0x94>)
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	4610      	mov	r0, r2
 8006e92:	b933      	cbnz	r3, 8006ea2 <_free_r+0x2e>
 8006e94:	6063      	str	r3, [r4, #4]
 8006e96:	6014      	str	r4, [r2, #0]
 8006e98:	4628      	mov	r0, r5
 8006e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e9e:	f000 ba2a 	b.w	80072f6 <__malloc_unlock>
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	d90b      	bls.n	8006ebe <_free_r+0x4a>
 8006ea6:	6821      	ldr	r1, [r4, #0]
 8006ea8:	1862      	adds	r2, r4, r1
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bf01      	itttt	eq
 8006eae:	681a      	ldreq	r2, [r3, #0]
 8006eb0:	685b      	ldreq	r3, [r3, #4]
 8006eb2:	1852      	addeq	r2, r2, r1
 8006eb4:	6022      	streq	r2, [r4, #0]
 8006eb6:	6063      	str	r3, [r4, #4]
 8006eb8:	6004      	str	r4, [r0, #0]
 8006eba:	e7ed      	b.n	8006e98 <_free_r+0x24>
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	b10a      	cbz	r2, 8006ec6 <_free_r+0x52>
 8006ec2:	42a2      	cmp	r2, r4
 8006ec4:	d9fa      	bls.n	8006ebc <_free_r+0x48>
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	1858      	adds	r0, r3, r1
 8006eca:	42a0      	cmp	r0, r4
 8006ecc:	d10b      	bne.n	8006ee6 <_free_r+0x72>
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	4401      	add	r1, r0
 8006ed2:	1858      	adds	r0, r3, r1
 8006ed4:	4282      	cmp	r2, r0
 8006ed6:	6019      	str	r1, [r3, #0]
 8006ed8:	d1de      	bne.n	8006e98 <_free_r+0x24>
 8006eda:	6810      	ldr	r0, [r2, #0]
 8006edc:	6852      	ldr	r2, [r2, #4]
 8006ede:	4401      	add	r1, r0
 8006ee0:	6019      	str	r1, [r3, #0]
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	e7d8      	b.n	8006e98 <_free_r+0x24>
 8006ee6:	d902      	bls.n	8006eee <_free_r+0x7a>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	e7d4      	b.n	8006e98 <_free_r+0x24>
 8006eee:	6820      	ldr	r0, [r4, #0]
 8006ef0:	1821      	adds	r1, r4, r0
 8006ef2:	428a      	cmp	r2, r1
 8006ef4:	bf01      	itttt	eq
 8006ef6:	6811      	ldreq	r1, [r2, #0]
 8006ef8:	6852      	ldreq	r2, [r2, #4]
 8006efa:	1809      	addeq	r1, r1, r0
 8006efc:	6021      	streq	r1, [r4, #0]
 8006efe:	6062      	str	r2, [r4, #4]
 8006f00:	605c      	str	r4, [r3, #4]
 8006f02:	e7c9      	b.n	8006e98 <_free_r+0x24>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	bf00      	nop
 8006f08:	200001fc 	.word	0x200001fc

08006f0c <_malloc_r>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	1ccd      	adds	r5, r1, #3
 8006f10:	f025 0503 	bic.w	r5, r5, #3
 8006f14:	3508      	adds	r5, #8
 8006f16:	2d0c      	cmp	r5, #12
 8006f18:	bf38      	it	cc
 8006f1a:	250c      	movcc	r5, #12
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	4606      	mov	r6, r0
 8006f20:	db01      	blt.n	8006f26 <_malloc_r+0x1a>
 8006f22:	42a9      	cmp	r1, r5
 8006f24:	d903      	bls.n	8006f2e <_malloc_r+0x22>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	f000 f9e1 	bl	80072f4 <__malloc_lock>
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <_malloc_r+0xac>)
 8006f34:	6814      	ldr	r4, [r2, #0]
 8006f36:	4621      	mov	r1, r4
 8006f38:	b991      	cbnz	r1, 8006f60 <_malloc_r+0x54>
 8006f3a:	4c20      	ldr	r4, [pc, #128]	; (8006fbc <_malloc_r+0xb0>)
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	b91b      	cbnz	r3, 8006f48 <_malloc_r+0x3c>
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 f98f 	bl	8007264 <_sbrk_r>
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 f98a 	bl	8007264 <_sbrk_r>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d124      	bne.n	8006f9e <_malloc_r+0x92>
 8006f54:	230c      	movs	r3, #12
 8006f56:	4630      	mov	r0, r6
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	f000 f9cc 	bl	80072f6 <__malloc_unlock>
 8006f5e:	e7e4      	b.n	8006f2a <_malloc_r+0x1e>
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	1b5b      	subs	r3, r3, r5
 8006f64:	d418      	bmi.n	8006f98 <_malloc_r+0x8c>
 8006f66:	2b0b      	cmp	r3, #11
 8006f68:	d90f      	bls.n	8006f8a <_malloc_r+0x7e>
 8006f6a:	600b      	str	r3, [r1, #0]
 8006f6c:	18cc      	adds	r4, r1, r3
 8006f6e:	50cd      	str	r5, [r1, r3]
 8006f70:	4630      	mov	r0, r6
 8006f72:	f000 f9c0 	bl	80072f6 <__malloc_unlock>
 8006f76:	f104 000b 	add.w	r0, r4, #11
 8006f7a:	1d23      	adds	r3, r4, #4
 8006f7c:	f020 0007 	bic.w	r0, r0, #7
 8006f80:	1ac3      	subs	r3, r0, r3
 8006f82:	d0d3      	beq.n	8006f2c <_malloc_r+0x20>
 8006f84:	425a      	negs	r2, r3
 8006f86:	50e2      	str	r2, [r4, r3]
 8006f88:	e7d0      	b.n	8006f2c <_malloc_r+0x20>
 8006f8a:	684b      	ldr	r3, [r1, #4]
 8006f8c:	428c      	cmp	r4, r1
 8006f8e:	bf16      	itet	ne
 8006f90:	6063      	strne	r3, [r4, #4]
 8006f92:	6013      	streq	r3, [r2, #0]
 8006f94:	460c      	movne	r4, r1
 8006f96:	e7eb      	b.n	8006f70 <_malloc_r+0x64>
 8006f98:	460c      	mov	r4, r1
 8006f9a:	6849      	ldr	r1, [r1, #4]
 8006f9c:	e7cc      	b.n	8006f38 <_malloc_r+0x2c>
 8006f9e:	1cc4      	adds	r4, r0, #3
 8006fa0:	f024 0403 	bic.w	r4, r4, #3
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d005      	beq.n	8006fb4 <_malloc_r+0xa8>
 8006fa8:	1a21      	subs	r1, r4, r0
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 f95a 	bl	8007264 <_sbrk_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d0cf      	beq.n	8006f54 <_malloc_r+0x48>
 8006fb4:	6025      	str	r5, [r4, #0]
 8006fb6:	e7db      	b.n	8006f70 <_malloc_r+0x64>
 8006fb8:	200001fc 	.word	0x200001fc
 8006fbc:	20000200 	.word	0x20000200

08006fc0 <__ssputs_r>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	688e      	ldr	r6, [r1, #8]
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	429e      	cmp	r6, r3
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4690      	mov	r8, r2
 8006fce:	4699      	mov	r9, r3
 8006fd0:	d837      	bhi.n	8007042 <__ssputs_r+0x82>
 8006fd2:	898a      	ldrh	r2, [r1, #12]
 8006fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fd8:	d031      	beq.n	800703e <__ssputs_r+0x7e>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	6909      	ldr	r1, [r1, #16]
 8006fe0:	1a6f      	subs	r7, r5, r1
 8006fe2:	6965      	ldr	r5, [r4, #20]
 8006fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fec:	f109 0301 	add.w	r3, r9, #1
 8006ff0:	443b      	add	r3, r7
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	bf38      	it	cc
 8006ff6:	461d      	movcc	r5, r3
 8006ff8:	0553      	lsls	r3, r2, #21
 8006ffa:	d530      	bpl.n	800705e <__ssputs_r+0x9e>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7ff ff85 	bl	8006f0c <_malloc_r>
 8007002:	4606      	mov	r6, r0
 8007004:	b950      	cbnz	r0, 800701c <__ssputs_r+0x5c>
 8007006:	230c      	movs	r3, #12
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	f8ca 3000 	str.w	r3, [sl]
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	463a      	mov	r2, r7
 800701e:	6921      	ldr	r1, [r4, #16]
 8007020:	f7ff fb16 	bl	8006650 <memcpy>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800702a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	6126      	str	r6, [r4, #16]
 8007032:	443e      	add	r6, r7
 8007034:	6026      	str	r6, [r4, #0]
 8007036:	464e      	mov	r6, r9
 8007038:	6165      	str	r5, [r4, #20]
 800703a:	1bed      	subs	r5, r5, r7
 800703c:	60a5      	str	r5, [r4, #8]
 800703e:	454e      	cmp	r6, r9
 8007040:	d900      	bls.n	8007044 <__ssputs_r+0x84>
 8007042:	464e      	mov	r6, r9
 8007044:	4632      	mov	r2, r6
 8007046:	4641      	mov	r1, r8
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	f000 f93a 	bl	80072c2 <memmove>
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	2000      	movs	r0, #0
 8007052:	1b9b      	subs	r3, r3, r6
 8007054:	60a3      	str	r3, [r4, #8]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	441e      	add	r6, r3
 800705a:	6026      	str	r6, [r4, #0]
 800705c:	e7dc      	b.n	8007018 <__ssputs_r+0x58>
 800705e:	462a      	mov	r2, r5
 8007060:	f000 f94a 	bl	80072f8 <_realloc_r>
 8007064:	4606      	mov	r6, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d1e2      	bne.n	8007030 <__ssputs_r+0x70>
 800706a:	6921      	ldr	r1, [r4, #16]
 800706c:	4650      	mov	r0, sl
 800706e:	f7ff ff01 	bl	8006e74 <_free_r>
 8007072:	e7c8      	b.n	8007006 <__ssputs_r+0x46>

08007074 <_svfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	461d      	mov	r5, r3
 800707a:	898b      	ldrh	r3, [r1, #12]
 800707c:	b09d      	sub	sp, #116	; 0x74
 800707e:	061f      	lsls	r7, r3, #24
 8007080:	4680      	mov	r8, r0
 8007082:	460c      	mov	r4, r1
 8007084:	4616      	mov	r6, r2
 8007086:	d50f      	bpl.n	80070a8 <_svfiprintf_r+0x34>
 8007088:	690b      	ldr	r3, [r1, #16]
 800708a:	b96b      	cbnz	r3, 80070a8 <_svfiprintf_r+0x34>
 800708c:	2140      	movs	r1, #64	; 0x40
 800708e:	f7ff ff3d 	bl	8006f0c <_malloc_r>
 8007092:	6020      	str	r0, [r4, #0]
 8007094:	6120      	str	r0, [r4, #16]
 8007096:	b928      	cbnz	r0, 80070a4 <_svfiprintf_r+0x30>
 8007098:	230c      	movs	r3, #12
 800709a:	f8c8 3000 	str.w	r3, [r8]
 800709e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a2:	e0c8      	b.n	8007236 <_svfiprintf_r+0x1c2>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	6163      	str	r3, [r4, #20]
 80070a8:	2300      	movs	r3, #0
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	2320      	movs	r3, #32
 80070ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b2:	2330      	movs	r3, #48	; 0x30
 80070b4:	f04f 0b01 	mov.w	fp, #1
 80070b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070bc:	9503      	str	r5, [sp, #12]
 80070be:	4637      	mov	r7, r6
 80070c0:	463d      	mov	r5, r7
 80070c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070c6:	b10b      	cbz	r3, 80070cc <_svfiprintf_r+0x58>
 80070c8:	2b25      	cmp	r3, #37	; 0x25
 80070ca:	d13e      	bne.n	800714a <_svfiprintf_r+0xd6>
 80070cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80070d0:	d00b      	beq.n	80070ea <_svfiprintf_r+0x76>
 80070d2:	4653      	mov	r3, sl
 80070d4:	4632      	mov	r2, r6
 80070d6:	4621      	mov	r1, r4
 80070d8:	4640      	mov	r0, r8
 80070da:	f7ff ff71 	bl	8006fc0 <__ssputs_r>
 80070de:	3001      	adds	r0, #1
 80070e0:	f000 80a4 	beq.w	800722c <_svfiprintf_r+0x1b8>
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	4453      	add	r3, sl
 80070e8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ea:	783b      	ldrb	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 809d 	beq.w	800722c <_svfiprintf_r+0x1b8>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007104:	931a      	str	r3, [sp, #104]	; 0x68
 8007106:	462f      	mov	r7, r5
 8007108:	2205      	movs	r2, #5
 800710a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800710e:	4850      	ldr	r0, [pc, #320]	; (8007250 <_svfiprintf_r+0x1dc>)
 8007110:	f7ff fa90 	bl	8006634 <memchr>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	b9d0      	cbnz	r0, 800714e <_svfiprintf_r+0xda>
 8007118:	06d9      	lsls	r1, r3, #27
 800711a:	bf44      	itt	mi
 800711c:	2220      	movmi	r2, #32
 800711e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007122:	071a      	lsls	r2, r3, #28
 8007124:	bf44      	itt	mi
 8007126:	222b      	movmi	r2, #43	; 0x2b
 8007128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800712c:	782a      	ldrb	r2, [r5, #0]
 800712e:	2a2a      	cmp	r2, #42	; 0x2a
 8007130:	d015      	beq.n	800715e <_svfiprintf_r+0xea>
 8007132:	462f      	mov	r7, r5
 8007134:	2000      	movs	r0, #0
 8007136:	250a      	movs	r5, #10
 8007138:	9a07      	ldr	r2, [sp, #28]
 800713a:	4639      	mov	r1, r7
 800713c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007140:	3b30      	subs	r3, #48	; 0x30
 8007142:	2b09      	cmp	r3, #9
 8007144:	d94d      	bls.n	80071e2 <_svfiprintf_r+0x16e>
 8007146:	b1b8      	cbz	r0, 8007178 <_svfiprintf_r+0x104>
 8007148:	e00f      	b.n	800716a <_svfiprintf_r+0xf6>
 800714a:	462f      	mov	r7, r5
 800714c:	e7b8      	b.n	80070c0 <_svfiprintf_r+0x4c>
 800714e:	4a40      	ldr	r2, [pc, #256]	; (8007250 <_svfiprintf_r+0x1dc>)
 8007150:	463d      	mov	r5, r7
 8007152:	1a80      	subs	r0, r0, r2
 8007154:	fa0b f000 	lsl.w	r0, fp, r0
 8007158:	4318      	orrs	r0, r3
 800715a:	9004      	str	r0, [sp, #16]
 800715c:	e7d3      	b.n	8007106 <_svfiprintf_r+0x92>
 800715e:	9a03      	ldr	r2, [sp, #12]
 8007160:	1d11      	adds	r1, r2, #4
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	9103      	str	r1, [sp, #12]
 8007166:	2a00      	cmp	r2, #0
 8007168:	db01      	blt.n	800716e <_svfiprintf_r+0xfa>
 800716a:	9207      	str	r2, [sp, #28]
 800716c:	e004      	b.n	8007178 <_svfiprintf_r+0x104>
 800716e:	4252      	negs	r2, r2
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	9207      	str	r2, [sp, #28]
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	783b      	ldrb	r3, [r7, #0]
 800717a:	2b2e      	cmp	r3, #46	; 0x2e
 800717c:	d10c      	bne.n	8007198 <_svfiprintf_r+0x124>
 800717e:	787b      	ldrb	r3, [r7, #1]
 8007180:	2b2a      	cmp	r3, #42	; 0x2a
 8007182:	d133      	bne.n	80071ec <_svfiprintf_r+0x178>
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	3702      	adds	r7, #2
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	4d2e      	ldr	r5, [pc, #184]	; (8007254 <_svfiprintf_r+0x1e0>)
 800719a:	2203      	movs	r2, #3
 800719c:	7839      	ldrb	r1, [r7, #0]
 800719e:	4628      	mov	r0, r5
 80071a0:	f7ff fa48 	bl	8006634 <memchr>
 80071a4:	b138      	cbz	r0, 80071b6 <_svfiprintf_r+0x142>
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	1b40      	subs	r0, r0, r5
 80071aa:	fa03 f000 	lsl.w	r0, r3, r0
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	3701      	adds	r7, #1
 80071b2:	4303      	orrs	r3, r0
 80071b4:	9304      	str	r3, [sp, #16]
 80071b6:	7839      	ldrb	r1, [r7, #0]
 80071b8:	2206      	movs	r2, #6
 80071ba:	4827      	ldr	r0, [pc, #156]	; (8007258 <_svfiprintf_r+0x1e4>)
 80071bc:	1c7e      	adds	r6, r7, #1
 80071be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c2:	f7ff fa37 	bl	8006634 <memchr>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d038      	beq.n	800723c <_svfiprintf_r+0x1c8>
 80071ca:	4b24      	ldr	r3, [pc, #144]	; (800725c <_svfiprintf_r+0x1e8>)
 80071cc:	bb13      	cbnz	r3, 8007214 <_svfiprintf_r+0x1a0>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	3307      	adds	r3, #7
 80071d2:	f023 0307 	bic.w	r3, r3, #7
 80071d6:	3308      	adds	r3, #8
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071dc:	444b      	add	r3, r9
 80071de:	9309      	str	r3, [sp, #36]	; 0x24
 80071e0:	e76d      	b.n	80070be <_svfiprintf_r+0x4a>
 80071e2:	fb05 3202 	mla	r2, r5, r2, r3
 80071e6:	2001      	movs	r0, #1
 80071e8:	460f      	mov	r7, r1
 80071ea:	e7a6      	b.n	800713a <_svfiprintf_r+0xc6>
 80071ec:	2300      	movs	r3, #0
 80071ee:	250a      	movs	r5, #10
 80071f0:	4619      	mov	r1, r3
 80071f2:	3701      	adds	r7, #1
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	4638      	mov	r0, r7
 80071f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071fc:	3a30      	subs	r2, #48	; 0x30
 80071fe:	2a09      	cmp	r2, #9
 8007200:	d903      	bls.n	800720a <_svfiprintf_r+0x196>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0c8      	beq.n	8007198 <_svfiprintf_r+0x124>
 8007206:	9105      	str	r1, [sp, #20]
 8007208:	e7c6      	b.n	8007198 <_svfiprintf_r+0x124>
 800720a:	fb05 2101 	mla	r1, r5, r1, r2
 800720e:	2301      	movs	r3, #1
 8007210:	4607      	mov	r7, r0
 8007212:	e7f0      	b.n	80071f6 <_svfiprintf_r+0x182>
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4622      	mov	r2, r4
 800721a:	4b11      	ldr	r3, [pc, #68]	; (8007260 <_svfiprintf_r+0x1ec>)
 800721c:	a904      	add	r1, sp, #16
 800721e:	4640      	mov	r0, r8
 8007220:	f7fc fbec 	bl	80039fc <_printf_float>
 8007224:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007228:	4681      	mov	r9, r0
 800722a:	d1d6      	bne.n	80071da <_svfiprintf_r+0x166>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	065b      	lsls	r3, r3, #25
 8007230:	f53f af35 	bmi.w	800709e <_svfiprintf_r+0x2a>
 8007234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007236:	b01d      	add	sp, #116	; 0x74
 8007238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	ab03      	add	r3, sp, #12
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4622      	mov	r2, r4
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <_svfiprintf_r+0x1ec>)
 8007244:	a904      	add	r1, sp, #16
 8007246:	4640      	mov	r0, r8
 8007248:	f7fc fe84 	bl	8003f54 <_printf_i>
 800724c:	e7ea      	b.n	8007224 <_svfiprintf_r+0x1b0>
 800724e:	bf00      	nop
 8007250:	0800755c 	.word	0x0800755c
 8007254:	08007562 	.word	0x08007562
 8007258:	08007566 	.word	0x08007566
 800725c:	080039fd 	.word	0x080039fd
 8007260:	08006fc1 	.word	0x08006fc1

08007264 <_sbrk_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	2300      	movs	r3, #0
 8007268:	4c05      	ldr	r4, [pc, #20]	; (8007280 <_sbrk_r+0x1c>)
 800726a:	4605      	mov	r5, r0
 800726c:	4608      	mov	r0, r1
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	f7fa f97a 	bl	8001568 <_sbrk>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_sbrk_r+0x1a>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	b103      	cbz	r3, 800727e <_sbrk_r+0x1a>
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	200002b0 	.word	0x200002b0

08007284 <strncmp>:
 8007284:	b510      	push	{r4, lr}
 8007286:	b16a      	cbz	r2, 80072a4 <strncmp+0x20>
 8007288:	3901      	subs	r1, #1
 800728a:	1884      	adds	r4, r0, r2
 800728c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007290:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007294:	4293      	cmp	r3, r2
 8007296:	d103      	bne.n	80072a0 <strncmp+0x1c>
 8007298:	42a0      	cmp	r0, r4
 800729a:	d001      	beq.n	80072a0 <strncmp+0x1c>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f5      	bne.n	800728c <strncmp+0x8>
 80072a0:	1a98      	subs	r0, r3, r2
 80072a2:	bd10      	pop	{r4, pc}
 80072a4:	4610      	mov	r0, r2
 80072a6:	e7fc      	b.n	80072a2 <strncmp+0x1e>

080072a8 <__ascii_wctomb>:
 80072a8:	b149      	cbz	r1, 80072be <__ascii_wctomb+0x16>
 80072aa:	2aff      	cmp	r2, #255	; 0xff
 80072ac:	bf8b      	itete	hi
 80072ae:	238a      	movhi	r3, #138	; 0x8a
 80072b0:	700a      	strbls	r2, [r1, #0]
 80072b2:	6003      	strhi	r3, [r0, #0]
 80072b4:	2001      	movls	r0, #1
 80072b6:	bf88      	it	hi
 80072b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80072bc:	4770      	bx	lr
 80072be:	4608      	mov	r0, r1
 80072c0:	4770      	bx	lr

080072c2 <memmove>:
 80072c2:	4288      	cmp	r0, r1
 80072c4:	b510      	push	{r4, lr}
 80072c6:	eb01 0302 	add.w	r3, r1, r2
 80072ca:	d807      	bhi.n	80072dc <memmove+0x1a>
 80072cc:	1e42      	subs	r2, r0, #1
 80072ce:	4299      	cmp	r1, r3
 80072d0:	d00a      	beq.n	80072e8 <memmove+0x26>
 80072d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072da:	e7f8      	b.n	80072ce <memmove+0xc>
 80072dc:	4283      	cmp	r3, r0
 80072de:	d9f5      	bls.n	80072cc <memmove+0xa>
 80072e0:	1881      	adds	r1, r0, r2
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	42d3      	cmn	r3, r2
 80072e6:	d100      	bne.n	80072ea <memmove+0x28>
 80072e8:	bd10      	pop	{r4, pc}
 80072ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072f2:	e7f7      	b.n	80072e4 <memmove+0x22>

080072f4 <__malloc_lock>:
 80072f4:	4770      	bx	lr

080072f6 <__malloc_unlock>:
 80072f6:	4770      	bx	lr

080072f8 <_realloc_r>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	4607      	mov	r7, r0
 80072fc:	4614      	mov	r4, r2
 80072fe:	460e      	mov	r6, r1
 8007300:	b921      	cbnz	r1, 800730c <_realloc_r+0x14>
 8007302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007306:	4611      	mov	r1, r2
 8007308:	f7ff be00 	b.w	8006f0c <_malloc_r>
 800730c:	b922      	cbnz	r2, 8007318 <_realloc_r+0x20>
 800730e:	f7ff fdb1 	bl	8006e74 <_free_r>
 8007312:	4625      	mov	r5, r4
 8007314:	4628      	mov	r0, r5
 8007316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007318:	f000 f814 	bl	8007344 <_malloc_usable_size_r>
 800731c:	42a0      	cmp	r0, r4
 800731e:	d20f      	bcs.n	8007340 <_realloc_r+0x48>
 8007320:	4621      	mov	r1, r4
 8007322:	4638      	mov	r0, r7
 8007324:	f7ff fdf2 	bl	8006f0c <_malloc_r>
 8007328:	4605      	mov	r5, r0
 800732a:	2800      	cmp	r0, #0
 800732c:	d0f2      	beq.n	8007314 <_realloc_r+0x1c>
 800732e:	4631      	mov	r1, r6
 8007330:	4622      	mov	r2, r4
 8007332:	f7ff f98d 	bl	8006650 <memcpy>
 8007336:	4631      	mov	r1, r6
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff fd9b 	bl	8006e74 <_free_r>
 800733e:	e7e9      	b.n	8007314 <_realloc_r+0x1c>
 8007340:	4635      	mov	r5, r6
 8007342:	e7e7      	b.n	8007314 <_realloc_r+0x1c>

08007344 <_malloc_usable_size_r>:
 8007344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007348:	1f18      	subs	r0, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	bfbc      	itt	lt
 800734e:	580b      	ldrlt	r3, [r1, r0]
 8007350:	18c0      	addlt	r0, r0, r3
 8007352:	4770      	bx	lr

08007354 <_init>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr

08007360 <_fini>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	bf00      	nop
 8007364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007366:	bc08      	pop	{r3}
 8007368:	469e      	mov	lr, r3
 800736a:	4770      	bx	lr
